
Read_CAN.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003428  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000070  080034e8  080034e8  000134e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003558  08003558  00020078  2**0
                  CONTENTS
  4 .ARM          00000000  08003558  08003558  00020078  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003558  08003558  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003558  08003558  00013558  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800355c  0800355c  0001355c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08003560  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001c4  20000078  080035d8  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000023c  080035d8  0002023c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007b7f  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000014d6  00000000  00000000  00027c1f  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000006f8  00000000  00000000  000290f8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000640  00000000  00000000  000297f0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00014364  00000000  00000000  00029e30  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00005f45  00000000  00000000  0003e194  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000712f1  00000000  00000000  000440d9  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000b53ca  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001a94  00000000  00000000  000b5448  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000078 	.word	0x20000078
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080034d0 	.word	0x080034d0

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	2000007c 	.word	0x2000007c
 8000104:	080034d0 	.word	0x080034d0

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	b082      	sub	sp, #8
 8000224:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	  uint32_t out=12;
 8000226:	230c      	movs	r3, #12
 8000228:	607b      	str	r3, [r7, #4]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800022a:	f000 fba7 	bl	800097c <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800022e:	f000 f80f 	bl	8000250 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000232:	f000 f8e9 	bl	8000408 <MX_GPIO_Init>
  MX_CAN_Init();
 8000236:	f000 f847 	bl	80002c8 <MX_CAN_Init>
  MX_USART2_UART_Init();
 800023a:	f000 f8b5 	bl	80003a8 <MX_USART2_UART_Init>
//	sFilterConfig.FilterActivation=ENABLE;



//	HAL_CAN_Start(&hcan); //start CAN
	HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING); //enable interrupts
 800023e:	4b03      	ldr	r3, [pc, #12]	; (800024c <main+0x2c>)
 8000240:	2102      	movs	r1, #2
 8000242:	0018      	movs	r0, r3
 8000244:	f000 ff50 	bl	80010e8 <HAL_CAN_ActivateNotification>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000248:	e7fe      	b.n	8000248 <main+0x28>
 800024a:	46c0      	nop			; (mov r8, r8)
 800024c:	200000d8 	.word	0x200000d8

08000250 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000250:	b590      	push	{r4, r7, lr}
 8000252:	b093      	sub	sp, #76	; 0x4c
 8000254:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000256:	2414      	movs	r4, #20
 8000258:	193b      	adds	r3, r7, r4
 800025a:	0018      	movs	r0, r3
 800025c:	2334      	movs	r3, #52	; 0x34
 800025e:	001a      	movs	r2, r3
 8000260:	2100      	movs	r1, #0
 8000262:	f002 fd25 	bl	8002cb0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000266:	1d3b      	adds	r3, r7, #4
 8000268:	0018      	movs	r0, r3
 800026a:	2310      	movs	r3, #16
 800026c:	001a      	movs	r2, r3
 800026e:	2100      	movs	r1, #0
 8000270:	f002 fd1e 	bl	8002cb0 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48;
 8000274:	193b      	adds	r3, r7, r4
 8000276:	2220      	movs	r2, #32
 8000278:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 800027a:	193b      	adds	r3, r7, r4
 800027c:	2201      	movs	r2, #1
 800027e:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000280:	193b      	adds	r3, r7, r4
 8000282:	2200      	movs	r2, #0
 8000284:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000286:	193b      	adds	r3, r7, r4
 8000288:	0018      	movs	r0, r3
 800028a:	f001 fbef 	bl	8001a6c <HAL_RCC_OscConfig>
 800028e:	1e03      	subs	r3, r0, #0
 8000290:	d001      	beq.n	8000296 <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000292:	f000 f929 	bl	80004e8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000296:	1d3b      	adds	r3, r7, #4
 8000298:	2207      	movs	r2, #7
 800029a:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI48;
 800029c:	1d3b      	adds	r3, r7, #4
 800029e:	2203      	movs	r2, #3
 80002a0:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002a2:	1d3b      	adds	r3, r7, #4
 80002a4:	2200      	movs	r2, #0
 80002a6:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80002a8:	1d3b      	adds	r3, r7, #4
 80002aa:	2200      	movs	r2, #0
 80002ac:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80002ae:	1d3b      	adds	r3, r7, #4
 80002b0:	2101      	movs	r1, #1
 80002b2:	0018      	movs	r0, r3
 80002b4:	f001 ff60 	bl	8002178 <HAL_RCC_ClockConfig>
 80002b8:	1e03      	subs	r3, r0, #0
 80002ba:	d001      	beq.n	80002c0 <SystemClock_Config+0x70>
  {
    Error_Handler();
 80002bc:	f000 f914 	bl	80004e8 <Error_Handler>
  }
}
 80002c0:	46c0      	nop			; (mov r8, r8)
 80002c2:	46bd      	mov	sp, r7
 80002c4:	b013      	add	sp, #76	; 0x4c
 80002c6:	bd90      	pop	{r4, r7, pc}

080002c8 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 80002c8:	b580      	push	{r7, lr}
 80002ca:	b08a      	sub	sp, #40	; 0x28
 80002cc:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN;
 80002ce:	4b34      	ldr	r3, [pc, #208]	; (80003a0 <MX_CAN_Init+0xd8>)
 80002d0:	4a34      	ldr	r2, [pc, #208]	; (80003a4 <MX_CAN_Init+0xdc>)
 80002d2:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 12;
 80002d4:	4b32      	ldr	r3, [pc, #200]	; (80003a0 <MX_CAN_Init+0xd8>)
 80002d6:	220c      	movs	r2, #12
 80002d8:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 80002da:	4b31      	ldr	r3, [pc, #196]	; (80003a0 <MX_CAN_Init+0xd8>)
 80002dc:	2200      	movs	r2, #0
 80002de:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80002e0:	4b2f      	ldr	r3, [pc, #188]	; (80003a0 <MX_CAN_Init+0xd8>)
 80002e2:	2200      	movs	r2, #0
 80002e4:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_13TQ;
 80002e6:	4b2e      	ldr	r3, [pc, #184]	; (80003a0 <MX_CAN_Init+0xd8>)
 80002e8:	22c0      	movs	r2, #192	; 0xc0
 80002ea:	0312      	lsls	r2, r2, #12
 80002ec:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_2TQ;
 80002ee:	4b2c      	ldr	r3, [pc, #176]	; (80003a0 <MX_CAN_Init+0xd8>)
 80002f0:	2280      	movs	r2, #128	; 0x80
 80002f2:	0352      	lsls	r2, r2, #13
 80002f4:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 80002f6:	4b2a      	ldr	r3, [pc, #168]	; (80003a0 <MX_CAN_Init+0xd8>)
 80002f8:	2200      	movs	r2, #0
 80002fa:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 80002fc:	4b28      	ldr	r3, [pc, #160]	; (80003a0 <MX_CAN_Init+0xd8>)
 80002fe:	2200      	movs	r2, #0
 8000300:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8000302:	4b27      	ldr	r3, [pc, #156]	; (80003a0 <MX_CAN_Init+0xd8>)
 8000304:	2200      	movs	r2, #0
 8000306:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 8000308:	4b25      	ldr	r3, [pc, #148]	; (80003a0 <MX_CAN_Init+0xd8>)
 800030a:	2200      	movs	r2, #0
 800030c:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 800030e:	4b24      	ldr	r3, [pc, #144]	; (80003a0 <MX_CAN_Init+0xd8>)
 8000310:	2200      	movs	r2, #0
 8000312:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8000314:	4b22      	ldr	r3, [pc, #136]	; (80003a0 <MX_CAN_Init+0xd8>)
 8000316:	2200      	movs	r2, #0
 8000318:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 800031a:	4b21      	ldr	r3, [pc, #132]	; (80003a0 <MX_CAN_Init+0xd8>)
 800031c:	0018      	movs	r0, r3
 800031e:	f000 fb91 	bl	8000a44 <HAL_CAN_Init>
 8000322:	1e03      	subs	r3, r0, #0
 8000324:	d001      	beq.n	800032a <MX_CAN_Init+0x62>
  {
    Error_Handler();
 8000326:	f000 f8df 	bl	80004e8 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

   CAN_FilterTypeDef sFilterConfig = {0};
 800032a:	003b      	movs	r3, r7
 800032c:	0018      	movs	r0, r3
 800032e:	2328      	movs	r3, #40	; 0x28
 8000330:	001a      	movs	r2, r3
 8000332:	2100      	movs	r1, #0
 8000334:	f002 fcbc 	bl	8002cb0 <memset>
   sFilterConfig.FilterBank = 0;
 8000338:	003b      	movs	r3, r7
 800033a:	2200      	movs	r2, #0
 800033c:	615a      	str	r2, [r3, #20]
   sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 800033e:	003b      	movs	r3, r7
 8000340:	2200      	movs	r2, #0
 8000342:	619a      	str	r2, [r3, #24]
   sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8000344:	003b      	movs	r3, r7
 8000346:	2201      	movs	r2, #1
 8000348:	61da      	str	r2, [r3, #28]
   sFilterConfig.FilterIdHigh = 0x0000;
 800034a:	003b      	movs	r3, r7
 800034c:	2200      	movs	r2, #0
 800034e:	601a      	str	r2, [r3, #0]
   sFilterConfig.FilterIdLow = 0x0000;
 8000350:	003b      	movs	r3, r7
 8000352:	2200      	movs	r2, #0
 8000354:	605a      	str	r2, [r3, #4]
   sFilterConfig.FilterMaskIdHigh = 0x0000;
 8000356:	003b      	movs	r3, r7
 8000358:	2200      	movs	r2, #0
 800035a:	609a      	str	r2, [r3, #8]
   sFilterConfig.FilterMaskIdHigh = 0x0000;
 800035c:	003b      	movs	r3, r7
 800035e:	2200      	movs	r2, #0
 8000360:	609a      	str	r2, [r3, #8]
   sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 8000362:	003b      	movs	r3, r7
 8000364:	2200      	movs	r2, #0
 8000366:	611a      	str	r2, [r3, #16]
   sFilterConfig.FilterActivation = ENABLE;
 8000368:	003b      	movs	r3, r7
 800036a:	2201      	movs	r2, #1
 800036c:	621a      	str	r2, [r3, #32]
   sFilterConfig.SlaveStartFilterBank = 14;
 800036e:	003b      	movs	r3, r7
 8000370:	220e      	movs	r2, #14
 8000372:	625a      	str	r2, [r3, #36]	; 0x24

   if (HAL_CAN_ConfigFilter(&hcan, &sFilterConfig) != HAL_OK){
 8000374:	003a      	movs	r2, r7
 8000376:	4b0a      	ldr	r3, [pc, #40]	; (80003a0 <MX_CAN_Init+0xd8>)
 8000378:	0011      	movs	r1, r2
 800037a:	0018      	movs	r0, r3
 800037c:	f000 fc60 	bl	8000c40 <HAL_CAN_ConfigFilter>
 8000380:	1e03      	subs	r3, r0, #0
 8000382:	d001      	beq.n	8000388 <MX_CAN_Init+0xc0>
 	  Error_Handler();
 8000384:	f000 f8b0 	bl	80004e8 <Error_Handler>
   }

   if (HAL_CAN_Start(&hcan) != HAL_OK) {
 8000388:	4b05      	ldr	r3, [pc, #20]	; (80003a0 <MX_CAN_Init+0xd8>)
 800038a:	0018      	movs	r0, r3
 800038c:	f000 fd4a 	bl	8000e24 <HAL_CAN_Start>
 8000390:	1e03      	subs	r3, r0, #0
 8000392:	d001      	beq.n	8000398 <MX_CAN_Init+0xd0>
 	  Error_Handler();
 8000394:	f000 f8a8 	bl	80004e8 <Error_Handler>
   }
  /* USER CODE END CAN_Init 2 */

}
 8000398:	46c0      	nop			; (mov r8, r8)
 800039a:	46bd      	mov	sp, r7
 800039c:	b00a      	add	sp, #40	; 0x28
 800039e:	bd80      	pop	{r7, pc}
 80003a0:	200000d8 	.word	0x200000d8
 80003a4:	40006400 	.word	0x40006400

080003a8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80003a8:	b580      	push	{r7, lr}
 80003aa:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80003ac:	4b14      	ldr	r3, [pc, #80]	; (8000400 <MX_USART2_UART_Init+0x58>)
 80003ae:	4a15      	ldr	r2, [pc, #84]	; (8000404 <MX_USART2_UART_Init+0x5c>)
 80003b0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 80003b2:	4b13      	ldr	r3, [pc, #76]	; (8000400 <MX_USART2_UART_Init+0x58>)
 80003b4:	2296      	movs	r2, #150	; 0x96
 80003b6:	0212      	lsls	r2, r2, #8
 80003b8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80003ba:	4b11      	ldr	r3, [pc, #68]	; (8000400 <MX_USART2_UART_Init+0x58>)
 80003bc:	2200      	movs	r2, #0
 80003be:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80003c0:	4b0f      	ldr	r3, [pc, #60]	; (8000400 <MX_USART2_UART_Init+0x58>)
 80003c2:	2200      	movs	r2, #0
 80003c4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80003c6:	4b0e      	ldr	r3, [pc, #56]	; (8000400 <MX_USART2_UART_Init+0x58>)
 80003c8:	2200      	movs	r2, #0
 80003ca:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80003cc:	4b0c      	ldr	r3, [pc, #48]	; (8000400 <MX_USART2_UART_Init+0x58>)
 80003ce:	220c      	movs	r2, #12
 80003d0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80003d2:	4b0b      	ldr	r3, [pc, #44]	; (8000400 <MX_USART2_UART_Init+0x58>)
 80003d4:	2200      	movs	r2, #0
 80003d6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80003d8:	4b09      	ldr	r3, [pc, #36]	; (8000400 <MX_USART2_UART_Init+0x58>)
 80003da:	2200      	movs	r2, #0
 80003dc:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80003de:	4b08      	ldr	r3, [pc, #32]	; (8000400 <MX_USART2_UART_Init+0x58>)
 80003e0:	2200      	movs	r2, #0
 80003e2:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80003e4:	4b06      	ldr	r3, [pc, #24]	; (8000400 <MX_USART2_UART_Init+0x58>)
 80003e6:	2200      	movs	r2, #0
 80003e8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80003ea:	4b05      	ldr	r3, [pc, #20]	; (8000400 <MX_USART2_UART_Init+0x58>)
 80003ec:	0018      	movs	r0, r3
 80003ee:	f002 f83b 	bl	8002468 <HAL_UART_Init>
 80003f2:	1e03      	subs	r3, r0, #0
 80003f4:	d001      	beq.n	80003fa <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80003f6:	f000 f877 	bl	80004e8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80003fa:	46c0      	nop			; (mov r8, r8)
 80003fc:	46bd      	mov	sp, r7
 80003fe:	bd80      	pop	{r7, pc}
 8000400:	20000160 	.word	0x20000160
 8000404:	40004400 	.word	0x40004400

08000408 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000408:	b590      	push	{r4, r7, lr}
 800040a:	b089      	sub	sp, #36	; 0x24
 800040c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800040e:	240c      	movs	r4, #12
 8000410:	193b      	adds	r3, r7, r4
 8000412:	0018      	movs	r0, r3
 8000414:	2314      	movs	r3, #20
 8000416:	001a      	movs	r2, r3
 8000418:	2100      	movs	r1, #0
 800041a:	f002 fc49 	bl	8002cb0 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800041e:	4b30      	ldr	r3, [pc, #192]	; (80004e0 <MX_GPIO_Init+0xd8>)
 8000420:	695a      	ldr	r2, [r3, #20]
 8000422:	4b2f      	ldr	r3, [pc, #188]	; (80004e0 <MX_GPIO_Init+0xd8>)
 8000424:	2180      	movs	r1, #128	; 0x80
 8000426:	03c9      	lsls	r1, r1, #15
 8000428:	430a      	orrs	r2, r1
 800042a:	615a      	str	r2, [r3, #20]
 800042c:	4b2c      	ldr	r3, [pc, #176]	; (80004e0 <MX_GPIO_Init+0xd8>)
 800042e:	695a      	ldr	r2, [r3, #20]
 8000430:	2380      	movs	r3, #128	; 0x80
 8000432:	03db      	lsls	r3, r3, #15
 8000434:	4013      	ands	r3, r2
 8000436:	60bb      	str	r3, [r7, #8]
 8000438:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800043a:	4b29      	ldr	r3, [pc, #164]	; (80004e0 <MX_GPIO_Init+0xd8>)
 800043c:	695a      	ldr	r2, [r3, #20]
 800043e:	4b28      	ldr	r3, [pc, #160]	; (80004e0 <MX_GPIO_Init+0xd8>)
 8000440:	2180      	movs	r1, #128	; 0x80
 8000442:	0289      	lsls	r1, r1, #10
 8000444:	430a      	orrs	r2, r1
 8000446:	615a      	str	r2, [r3, #20]
 8000448:	4b25      	ldr	r3, [pc, #148]	; (80004e0 <MX_GPIO_Init+0xd8>)
 800044a:	695a      	ldr	r2, [r3, #20]
 800044c:	2380      	movs	r3, #128	; 0x80
 800044e:	029b      	lsls	r3, r3, #10
 8000450:	4013      	ands	r3, r2
 8000452:	607b      	str	r3, [r7, #4]
 8000454:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000456:	4b22      	ldr	r3, [pc, #136]	; (80004e0 <MX_GPIO_Init+0xd8>)
 8000458:	695a      	ldr	r2, [r3, #20]
 800045a:	4b21      	ldr	r3, [pc, #132]	; (80004e0 <MX_GPIO_Init+0xd8>)
 800045c:	2180      	movs	r1, #128	; 0x80
 800045e:	02c9      	lsls	r1, r1, #11
 8000460:	430a      	orrs	r2, r1
 8000462:	615a      	str	r2, [r3, #20]
 8000464:	4b1e      	ldr	r3, [pc, #120]	; (80004e0 <MX_GPIO_Init+0xd8>)
 8000466:	695a      	ldr	r2, [r3, #20]
 8000468:	2380      	movs	r3, #128	; 0x80
 800046a:	02db      	lsls	r3, r3, #11
 800046c:	4013      	ands	r3, r2
 800046e:	603b      	str	r3, [r7, #0]
 8000470:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4|GPIO_PIN_7, GPIO_PIN_RESET);
 8000472:	2390      	movs	r3, #144	; 0x90
 8000474:	05db      	lsls	r3, r3, #23
 8000476:	2200      	movs	r2, #0
 8000478:	2190      	movs	r1, #144	; 0x90
 800047a:	0018      	movs	r0, r3
 800047c:	f001 fabe 	bl	80019fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET);
 8000480:	4b18      	ldr	r3, [pc, #96]	; (80004e4 <MX_GPIO_Init+0xdc>)
 8000482:	2200      	movs	r2, #0
 8000484:	2108      	movs	r1, #8
 8000486:	0018      	movs	r0, r3
 8000488:	f001 fab8 	bl	80019fc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA4 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_7;
 800048c:	193b      	adds	r3, r7, r4
 800048e:	2290      	movs	r2, #144	; 0x90
 8000490:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000492:	193b      	adds	r3, r7, r4
 8000494:	2201      	movs	r2, #1
 8000496:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000498:	193b      	adds	r3, r7, r4
 800049a:	2200      	movs	r2, #0
 800049c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800049e:	193b      	adds	r3, r7, r4
 80004a0:	2200      	movs	r2, #0
 80004a2:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004a4:	193a      	adds	r2, r7, r4
 80004a6:	2390      	movs	r3, #144	; 0x90
 80004a8:	05db      	lsls	r3, r3, #23
 80004aa:	0011      	movs	r1, r2
 80004ac:	0018      	movs	r0, r3
 80004ae:	f001 f93d 	bl	800172c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 80004b2:	0021      	movs	r1, r4
 80004b4:	187b      	adds	r3, r7, r1
 80004b6:	2208      	movs	r2, #8
 80004b8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004ba:	187b      	adds	r3, r7, r1
 80004bc:	2201      	movs	r2, #1
 80004be:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004c0:	187b      	adds	r3, r7, r1
 80004c2:	2200      	movs	r2, #0
 80004c4:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004c6:	187b      	adds	r3, r7, r1
 80004c8:	2200      	movs	r2, #0
 80004ca:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80004cc:	187b      	adds	r3, r7, r1
 80004ce:	4a05      	ldr	r2, [pc, #20]	; (80004e4 <MX_GPIO_Init+0xdc>)
 80004d0:	0019      	movs	r1, r3
 80004d2:	0010      	movs	r0, r2
 80004d4:	f001 f92a 	bl	800172c <HAL_GPIO_Init>

}
 80004d8:	46c0      	nop			; (mov r8, r8)
 80004da:	46bd      	mov	sp, r7
 80004dc:	b009      	add	sp, #36	; 0x24
 80004de:	bd90      	pop	{r4, r7, pc}
 80004e0:	40021000 	.word	0x40021000
 80004e4:	48000400 	.word	0x48000400

080004e8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80004e8:	b580      	push	{r7, lr}
 80004ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
	 HAL_GPIO_TogglePin(GPIOA,GPIO_PIN_7);
 80004ec:	2390      	movs	r3, #144	; 0x90
 80004ee:	05db      	lsls	r3, r3, #23
 80004f0:	2180      	movs	r1, #128	; 0x80
 80004f2:	0018      	movs	r0, r3
 80004f4:	f001 fa9f 	bl	8001a36 <HAL_GPIO_TogglePin>
  /* USER CODE END Error_Handler_Debug */
}
 80004f8:	46c0      	nop			; (mov r8, r8)
 80004fa:	46bd      	mov	sp, r7
 80004fc:	bd80      	pop	{r7, pc}
	...

08000500 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000500:	b580      	push	{r7, lr}
 8000502:	b082      	sub	sp, #8
 8000504:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000506:	4b13      	ldr	r3, [pc, #76]	; (8000554 <HAL_MspInit+0x54>)
 8000508:	699a      	ldr	r2, [r3, #24]
 800050a:	4b12      	ldr	r3, [pc, #72]	; (8000554 <HAL_MspInit+0x54>)
 800050c:	2101      	movs	r1, #1
 800050e:	430a      	orrs	r2, r1
 8000510:	619a      	str	r2, [r3, #24]
 8000512:	4b10      	ldr	r3, [pc, #64]	; (8000554 <HAL_MspInit+0x54>)
 8000514:	699b      	ldr	r3, [r3, #24]
 8000516:	2201      	movs	r2, #1
 8000518:	4013      	ands	r3, r2
 800051a:	607b      	str	r3, [r7, #4]
 800051c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800051e:	4b0d      	ldr	r3, [pc, #52]	; (8000554 <HAL_MspInit+0x54>)
 8000520:	69da      	ldr	r2, [r3, #28]
 8000522:	4b0c      	ldr	r3, [pc, #48]	; (8000554 <HAL_MspInit+0x54>)
 8000524:	2180      	movs	r1, #128	; 0x80
 8000526:	0549      	lsls	r1, r1, #21
 8000528:	430a      	orrs	r2, r1
 800052a:	61da      	str	r2, [r3, #28]
 800052c:	4b09      	ldr	r3, [pc, #36]	; (8000554 <HAL_MspInit+0x54>)
 800052e:	69da      	ldr	r2, [r3, #28]
 8000530:	2380      	movs	r3, #128	; 0x80
 8000532:	055b      	lsls	r3, r3, #21
 8000534:	4013      	ands	r3, r2
 8000536:	603b      	str	r3, [r7, #0]
 8000538:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_CRS_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_CRS_IRQn, 0, 0);
 800053a:	2200      	movs	r2, #0
 800053c:	2100      	movs	r1, #0
 800053e:	2004      	movs	r0, #4
 8000540:	f001 f8c2 	bl	80016c8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_CRS_IRQn);
 8000544:	2004      	movs	r0, #4
 8000546:	f001 f8d4 	bl	80016f2 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800054a:	46c0      	nop			; (mov r8, r8)
 800054c:	46bd      	mov	sp, r7
 800054e:	b002      	add	sp, #8
 8000550:	bd80      	pop	{r7, pc}
 8000552:	46c0      	nop			; (mov r8, r8)
 8000554:	40021000 	.word	0x40021000

08000558 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000558:	b580      	push	{r7, lr}
 800055a:	b08a      	sub	sp, #40	; 0x28
 800055c:	af00      	add	r7, sp, #0
 800055e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000560:	2314      	movs	r3, #20
 8000562:	18fb      	adds	r3, r7, r3
 8000564:	0018      	movs	r0, r3
 8000566:	2314      	movs	r3, #20
 8000568:	001a      	movs	r2, r3
 800056a:	2100      	movs	r1, #0
 800056c:	f002 fba0 	bl	8002cb0 <memset>
  if(hcan->Instance==CAN)
 8000570:	687b      	ldr	r3, [r7, #4]
 8000572:	681b      	ldr	r3, [r3, #0]
 8000574:	4a21      	ldr	r2, [pc, #132]	; (80005fc <HAL_CAN_MspInit+0xa4>)
 8000576:	4293      	cmp	r3, r2
 8000578:	d13b      	bne.n	80005f2 <HAL_CAN_MspInit+0x9a>
  {
  /* USER CODE BEGIN CAN_MspInit 0 */

  /* USER CODE END CAN_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 800057a:	4b21      	ldr	r3, [pc, #132]	; (8000600 <HAL_CAN_MspInit+0xa8>)
 800057c:	69da      	ldr	r2, [r3, #28]
 800057e:	4b20      	ldr	r3, [pc, #128]	; (8000600 <HAL_CAN_MspInit+0xa8>)
 8000580:	2180      	movs	r1, #128	; 0x80
 8000582:	0489      	lsls	r1, r1, #18
 8000584:	430a      	orrs	r2, r1
 8000586:	61da      	str	r2, [r3, #28]
 8000588:	4b1d      	ldr	r3, [pc, #116]	; (8000600 <HAL_CAN_MspInit+0xa8>)
 800058a:	69da      	ldr	r2, [r3, #28]
 800058c:	2380      	movs	r3, #128	; 0x80
 800058e:	049b      	lsls	r3, r3, #18
 8000590:	4013      	ands	r3, r2
 8000592:	613b      	str	r3, [r7, #16]
 8000594:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000596:	4b1a      	ldr	r3, [pc, #104]	; (8000600 <HAL_CAN_MspInit+0xa8>)
 8000598:	695a      	ldr	r2, [r3, #20]
 800059a:	4b19      	ldr	r3, [pc, #100]	; (8000600 <HAL_CAN_MspInit+0xa8>)
 800059c:	2180      	movs	r1, #128	; 0x80
 800059e:	0289      	lsls	r1, r1, #10
 80005a0:	430a      	orrs	r2, r1
 80005a2:	615a      	str	r2, [r3, #20]
 80005a4:	4b16      	ldr	r3, [pc, #88]	; (8000600 <HAL_CAN_MspInit+0xa8>)
 80005a6:	695a      	ldr	r2, [r3, #20]
 80005a8:	2380      	movs	r3, #128	; 0x80
 80005aa:	029b      	lsls	r3, r3, #10
 80005ac:	4013      	ands	r3, r2
 80005ae:	60fb      	str	r3, [r7, #12]
 80005b0:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80005b2:	2114      	movs	r1, #20
 80005b4:	187b      	adds	r3, r7, r1
 80005b6:	22c0      	movs	r2, #192	; 0xc0
 80005b8:	0152      	lsls	r2, r2, #5
 80005ba:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005bc:	187b      	adds	r3, r7, r1
 80005be:	2202      	movs	r2, #2
 80005c0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005c2:	187b      	adds	r3, r7, r1
 80005c4:	2200      	movs	r2, #0
 80005c6:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80005c8:	187b      	adds	r3, r7, r1
 80005ca:	2203      	movs	r2, #3
 80005cc:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_CAN;
 80005ce:	187b      	adds	r3, r7, r1
 80005d0:	2204      	movs	r2, #4
 80005d2:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005d4:	187a      	adds	r2, r7, r1
 80005d6:	2390      	movs	r3, #144	; 0x90
 80005d8:	05db      	lsls	r3, r3, #23
 80005da:	0011      	movs	r1, r2
 80005dc:	0018      	movs	r0, r3
 80005de:	f001 f8a5 	bl	800172c <HAL_GPIO_Init>

    /* CAN interrupt Init */
    HAL_NVIC_SetPriority(CEC_CAN_IRQn, 0, 0);
 80005e2:	2200      	movs	r2, #0
 80005e4:	2100      	movs	r1, #0
 80005e6:	201e      	movs	r0, #30
 80005e8:	f001 f86e 	bl	80016c8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CEC_CAN_IRQn);
 80005ec:	201e      	movs	r0, #30
 80005ee:	f001 f880 	bl	80016f2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN_MspInit 1 */

  /* USER CODE END CAN_MspInit 1 */
  }

}
 80005f2:	46c0      	nop			; (mov r8, r8)
 80005f4:	46bd      	mov	sp, r7
 80005f6:	b00a      	add	sp, #40	; 0x28
 80005f8:	bd80      	pop	{r7, pc}
 80005fa:	46c0      	nop			; (mov r8, r8)
 80005fc:	40006400 	.word	0x40006400
 8000600:	40021000 	.word	0x40021000

08000604 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000604:	b580      	push	{r7, lr}
 8000606:	b08a      	sub	sp, #40	; 0x28
 8000608:	af00      	add	r7, sp, #0
 800060a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800060c:	2314      	movs	r3, #20
 800060e:	18fb      	adds	r3, r7, r3
 8000610:	0018      	movs	r0, r3
 8000612:	2314      	movs	r3, #20
 8000614:	001a      	movs	r2, r3
 8000616:	2100      	movs	r1, #0
 8000618:	f002 fb4a 	bl	8002cb0 <memset>
  if(huart->Instance==USART2)
 800061c:	687b      	ldr	r3, [r7, #4]
 800061e:	681b      	ldr	r3, [r3, #0]
 8000620:	4a1c      	ldr	r2, [pc, #112]	; (8000694 <HAL_UART_MspInit+0x90>)
 8000622:	4293      	cmp	r3, r2
 8000624:	d132      	bne.n	800068c <HAL_UART_MspInit+0x88>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000626:	4b1c      	ldr	r3, [pc, #112]	; (8000698 <HAL_UART_MspInit+0x94>)
 8000628:	69da      	ldr	r2, [r3, #28]
 800062a:	4b1b      	ldr	r3, [pc, #108]	; (8000698 <HAL_UART_MspInit+0x94>)
 800062c:	2180      	movs	r1, #128	; 0x80
 800062e:	0289      	lsls	r1, r1, #10
 8000630:	430a      	orrs	r2, r1
 8000632:	61da      	str	r2, [r3, #28]
 8000634:	4b18      	ldr	r3, [pc, #96]	; (8000698 <HAL_UART_MspInit+0x94>)
 8000636:	69da      	ldr	r2, [r3, #28]
 8000638:	2380      	movs	r3, #128	; 0x80
 800063a:	029b      	lsls	r3, r3, #10
 800063c:	4013      	ands	r3, r2
 800063e:	613b      	str	r3, [r7, #16]
 8000640:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000642:	4b15      	ldr	r3, [pc, #84]	; (8000698 <HAL_UART_MspInit+0x94>)
 8000644:	695a      	ldr	r2, [r3, #20]
 8000646:	4b14      	ldr	r3, [pc, #80]	; (8000698 <HAL_UART_MspInit+0x94>)
 8000648:	2180      	movs	r1, #128	; 0x80
 800064a:	0289      	lsls	r1, r1, #10
 800064c:	430a      	orrs	r2, r1
 800064e:	615a      	str	r2, [r3, #20]
 8000650:	4b11      	ldr	r3, [pc, #68]	; (8000698 <HAL_UART_MspInit+0x94>)
 8000652:	695a      	ldr	r2, [r3, #20]
 8000654:	2380      	movs	r3, #128	; 0x80
 8000656:	029b      	lsls	r3, r3, #10
 8000658:	4013      	ands	r3, r2
 800065a:	60fb      	str	r3, [r7, #12]
 800065c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_15;
 800065e:	2114      	movs	r1, #20
 8000660:	187b      	adds	r3, r7, r1
 8000662:	4a0e      	ldr	r2, [pc, #56]	; (800069c <HAL_UART_MspInit+0x98>)
 8000664:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000666:	187b      	adds	r3, r7, r1
 8000668:	2202      	movs	r2, #2
 800066a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800066c:	187b      	adds	r3, r7, r1
 800066e:	2200      	movs	r2, #0
 8000670:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000672:	187b      	adds	r3, r7, r1
 8000674:	2203      	movs	r2, #3
 8000676:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8000678:	187b      	adds	r3, r7, r1
 800067a:	2201      	movs	r2, #1
 800067c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800067e:	187a      	adds	r2, r7, r1
 8000680:	2390      	movs	r3, #144	; 0x90
 8000682:	05db      	lsls	r3, r3, #23
 8000684:	0011      	movs	r1, r2
 8000686:	0018      	movs	r0, r3
 8000688:	f001 f850 	bl	800172c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800068c:	46c0      	nop			; (mov r8, r8)
 800068e:	46bd      	mov	sp, r7
 8000690:	b00a      	add	sp, #40	; 0x28
 8000692:	bd80      	pop	{r7, pc}
 8000694:	40004400 	.word	0x40004400
 8000698:	40021000 	.word	0x40021000
 800069c:	00008004 	.word	0x00008004

080006a0 <NMI_Handler>:
/******************************************************************************/
/**
 * @brief This function handles Non maskable interrupt.
 */
void NMI_Handler(void)
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	af00      	add	r7, sp, #0

	/* USER CODE END NonMaskableInt_IRQn 0 */
	/* USER CODE BEGIN NonMaskableInt_IRQn 1 */

	/* USER CODE END NonMaskableInt_IRQn 1 */
}
 80006a4:	46c0      	nop			; (mov r8, r8)
 80006a6:	46bd      	mov	sp, r7
 80006a8:	bd80      	pop	{r7, pc}

080006aa <HardFault_Handler>:

/**
 * @brief This function handles Hard fault interrupt.
 */
void HardFault_Handler(void)
{
 80006aa:	b580      	push	{r7, lr}
 80006ac:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN HardFault_IRQn 0 */

	/* USER CODE END HardFault_IRQn 0 */
	while (1)
 80006ae:	e7fe      	b.n	80006ae <HardFault_Handler+0x4>

080006b0 <SVC_Handler>:

/**
 * @brief This function handles System service call via SWI instruction.
 */
void SVC_Handler(void)
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	af00      	add	r7, sp, #0

	/* USER CODE END SVC_IRQn 0 */
	/* USER CODE BEGIN SVC_IRQn 1 */

	/* USER CODE END SVC_IRQn 1 */
}
 80006b4:	46c0      	nop			; (mov r8, r8)
 80006b6:	46bd      	mov	sp, r7
 80006b8:	bd80      	pop	{r7, pc}

080006ba <PendSV_Handler>:

/**
 * @brief This function handles Pendable request for system service.
 */
void PendSV_Handler(void)
{
 80006ba:	b580      	push	{r7, lr}
 80006bc:	af00      	add	r7, sp, #0

	/* USER CODE END PendSV_IRQn 0 */
	/* USER CODE BEGIN PendSV_IRQn 1 */

	/* USER CODE END PendSV_IRQn 1 */
}
 80006be:	46c0      	nop			; (mov r8, r8)
 80006c0:	46bd      	mov	sp, r7
 80006c2:	bd80      	pop	{r7, pc}

080006c4 <SysTick_Handler>:

/**
 * @brief This function handles System tick timer.
 */
void SysTick_Handler(void)
{
 80006c4:	b580      	push	{r7, lr}
 80006c6:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN SysTick_IRQn 0 */

	/* USER CODE END SysTick_IRQn 0 */
	HAL_IncTick();
 80006c8:	f000 f9a0 	bl	8000a0c <HAL_IncTick>
	/* USER CODE BEGIN SysTick_IRQn 1 */

	/* USER CODE END SysTick_IRQn 1 */
}
 80006cc:	46c0      	nop			; (mov r8, r8)
 80006ce:	46bd      	mov	sp, r7
 80006d0:	bd80      	pop	{r7, pc}

080006d2 <RCC_CRS_IRQHandler>:

/**
 * @brief This function handles RCC and CRS global interrupts.
 */
void RCC_CRS_IRQHandler(void)
{
 80006d2:	b580      	push	{r7, lr}
 80006d4:	af00      	add	r7, sp, #0

	/* USER CODE END RCC_CRS_IRQn 0 */
	/* USER CODE BEGIN RCC_CRS_IRQn 1 */

	/* USER CODE END RCC_CRS_IRQn 1 */
}
 80006d6:	46c0      	nop			; (mov r8, r8)
 80006d8:	46bd      	mov	sp, r7
 80006da:	bd80      	pop	{r7, pc}

080006dc <CEC_CAN_IRQHandler>:

/**
 * @brief This function handles HDMI-CEC and CAN global interrupts / HDMI-CEC wake-up interrupt through EXTI line 27.
 */
void CEC_CAN_IRQHandler(void)
{
 80006dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80006de:	b097      	sub	sp, #92	; 0x5c
 80006e0:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN CEC_CAN_IRQn 0 */

	/* USER CODE END CEC_CAN_IRQn 0 */
	HAL_CAN_IRQHandler(&hcan);
 80006e2:	4b62      	ldr	r3, [pc, #392]	; (800086c <CEC_CAN_IRQHandler+0x190>)
 80006e4:	0018      	movs	r0, r3
 80006e6:	f000 fd29 	bl	800113c <HAL_CAN_IRQHandler>
	/* USER CODE BEGIN CEC_CAN_IRQn 1 */
	CAN_RxHeaderTypeDef RxHeader;
	uint8_t RxData[8];
	uint8_t ID[8]={NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL};
 80006ea:	232c      	movs	r3, #44	; 0x2c
 80006ec:	18fb      	adds	r3, r7, r3
 80006ee:	0018      	movs	r0, r3
 80006f0:	2308      	movs	r3, #8
 80006f2:	001a      	movs	r2, r3
 80006f4:	2100      	movs	r1, #0
 80006f6:	f002 fadb 	bl	8002cb0 <memset>
	char B4[2];
	char B5[2];
	char B6[2];
	char B7[2];

	HAL_CAN_GetRxMessage(&hcan, CAN_RX_FIFO0, &RxHeader, RxData);  // get the currently waiting frame
 80006fa:	2434      	movs	r4, #52	; 0x34
 80006fc:	193b      	adds	r3, r7, r4
 80006fe:	253c      	movs	r5, #60	; 0x3c
 8000700:	197a      	adds	r2, r7, r5
 8000702:	485a      	ldr	r0, [pc, #360]	; (800086c <CEC_CAN_IRQHandler+0x190>)
 8000704:	2100      	movs	r1, #0
 8000706:	f000 fbd3 	bl	8000eb0 <HAL_CAN_GetRxMessage>

	//	  		HAL_GPIO_TogglePin(GPIOA,GPIO_PIN_7);
	char buffer1 [8];
	sprintf(buffer1,"%0x",RxHeader.ExtId);
 800070a:	197b      	adds	r3, r7, r5
 800070c:	685a      	ldr	r2, [r3, #4]
 800070e:	4958      	ldr	r1, [pc, #352]	; (8000870 <CEC_CAN_IRQHandler+0x194>)
 8000710:	1d3b      	adds	r3, r7, #4
 8000712:	0018      	movs	r0, r3
 8000714:	f002 fad4 	bl	8002cc0 <siprintf>

	sprintf(B0,"%0x",RxData[0]);
 8000718:	193b      	adds	r3, r7, r4
 800071a:	781b      	ldrb	r3, [r3, #0]
 800071c:	001a      	movs	r2, r3
 800071e:	4954      	ldr	r1, [pc, #336]	; (8000870 <CEC_CAN_IRQHandler+0x194>)
 8000720:	2628      	movs	r6, #40	; 0x28
 8000722:	19bb      	adds	r3, r7, r6
 8000724:	0018      	movs	r0, r3
 8000726:	f002 facb 	bl	8002cc0 <siprintf>
	sprintf(B1,"%0x",RxData[1]);
 800072a:	193b      	adds	r3, r7, r4
 800072c:	785b      	ldrb	r3, [r3, #1]
 800072e:	001a      	movs	r2, r3
 8000730:	494f      	ldr	r1, [pc, #316]	; (8000870 <CEC_CAN_IRQHandler+0x194>)
 8000732:	2324      	movs	r3, #36	; 0x24
 8000734:	18fb      	adds	r3, r7, r3
 8000736:	0018      	movs	r0, r3
 8000738:	f002 fac2 	bl	8002cc0 <siprintf>
	sprintf(B2,"%0x",RxData[2]);
 800073c:	193b      	adds	r3, r7, r4
 800073e:	789b      	ldrb	r3, [r3, #2]
 8000740:	001a      	movs	r2, r3
 8000742:	494b      	ldr	r1, [pc, #300]	; (8000870 <CEC_CAN_IRQHandler+0x194>)
 8000744:	2020      	movs	r0, #32
 8000746:	183b      	adds	r3, r7, r0
 8000748:	0018      	movs	r0, r3
 800074a:	f002 fab9 	bl	8002cc0 <siprintf>
	sprintf(B3,"%0x",RxData[3]);
 800074e:	193b      	adds	r3, r7, r4
 8000750:	78db      	ldrb	r3, [r3, #3]
 8000752:	001a      	movs	r2, r3
 8000754:	4946      	ldr	r1, [pc, #280]	; (8000870 <CEC_CAN_IRQHandler+0x194>)
 8000756:	251c      	movs	r5, #28
 8000758:	197b      	adds	r3, r7, r5
 800075a:	0018      	movs	r0, r3
 800075c:	f002 fab0 	bl	8002cc0 <siprintf>
	sprintf(B4,"%0x",RxData[4]);
 8000760:	193b      	adds	r3, r7, r4
 8000762:	791b      	ldrb	r3, [r3, #4]
 8000764:	001a      	movs	r2, r3
 8000766:	4942      	ldr	r1, [pc, #264]	; (8000870 <CEC_CAN_IRQHandler+0x194>)
 8000768:	2318      	movs	r3, #24
 800076a:	18fb      	adds	r3, r7, r3
 800076c:	0018      	movs	r0, r3
 800076e:	f002 faa7 	bl	8002cc0 <siprintf>
	sprintf(B5,"%0x",RxData[5]);
 8000772:	193b      	adds	r3, r7, r4
 8000774:	795b      	ldrb	r3, [r3, #5]
 8000776:	001a      	movs	r2, r3
 8000778:	493d      	ldr	r1, [pc, #244]	; (8000870 <CEC_CAN_IRQHandler+0x194>)
 800077a:	2414      	movs	r4, #20
 800077c:	193b      	adds	r3, r7, r4
 800077e:	0018      	movs	r0, r3
 8000780:	f002 fa9e 	bl	8002cc0 <siprintf>



	HAL_UART_Transmit(&huart2, (uint8_t *)buffer1, sizeof(buffer1), 20);
 8000784:	1d39      	adds	r1, r7, #4
 8000786:	483b      	ldr	r0, [pc, #236]	; (8000874 <CEC_CAN_IRQHandler+0x198>)
 8000788:	2314      	movs	r3, #20
 800078a:	2208      	movs	r2, #8
 800078c:	f001 fec0 	bl	8002510 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, space, sizeof(space), 20);
 8000790:	4939      	ldr	r1, [pc, #228]	; (8000878 <CEC_CAN_IRQHandler+0x19c>)
 8000792:	4838      	ldr	r0, [pc, #224]	; (8000874 <CEC_CAN_IRQHandler+0x198>)
 8000794:	2314      	movs	r3, #20
 8000796:	2202      	movs	r2, #2
 8000798:	f001 feba 	bl	8002510 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, (uint8_t *)B0, sizeof(B0), 20);
 800079c:	19b9      	adds	r1, r7, r6
 800079e:	4835      	ldr	r0, [pc, #212]	; (8000874 <CEC_CAN_IRQHandler+0x198>)
 80007a0:	2314      	movs	r3, #20
 80007a2:	2202      	movs	r2, #2
 80007a4:	f001 feb4 	bl	8002510 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, space, sizeof(space), 20);
 80007a8:	4933      	ldr	r1, [pc, #204]	; (8000878 <CEC_CAN_IRQHandler+0x19c>)
 80007aa:	4832      	ldr	r0, [pc, #200]	; (8000874 <CEC_CAN_IRQHandler+0x198>)
 80007ac:	2314      	movs	r3, #20
 80007ae:	2202      	movs	r2, #2
 80007b0:	f001 feae 	bl	8002510 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, (uint8_t *)B1, sizeof(B0), 20);
 80007b4:	2324      	movs	r3, #36	; 0x24
 80007b6:	18f9      	adds	r1, r7, r3
 80007b8:	482e      	ldr	r0, [pc, #184]	; (8000874 <CEC_CAN_IRQHandler+0x198>)
 80007ba:	2314      	movs	r3, #20
 80007bc:	2202      	movs	r2, #2
 80007be:	f001 fea7 	bl	8002510 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, space, sizeof(space), 20);
 80007c2:	492d      	ldr	r1, [pc, #180]	; (8000878 <CEC_CAN_IRQHandler+0x19c>)
 80007c4:	482b      	ldr	r0, [pc, #172]	; (8000874 <CEC_CAN_IRQHandler+0x198>)
 80007c6:	2314      	movs	r3, #20
 80007c8:	2202      	movs	r2, #2
 80007ca:	f001 fea1 	bl	8002510 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, (uint8_t *)B2, sizeof(B0), 20);
 80007ce:	2020      	movs	r0, #32
 80007d0:	1839      	adds	r1, r7, r0
 80007d2:	4828      	ldr	r0, [pc, #160]	; (8000874 <CEC_CAN_IRQHandler+0x198>)
 80007d4:	2314      	movs	r3, #20
 80007d6:	2202      	movs	r2, #2
 80007d8:	f001 fe9a 	bl	8002510 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, space, sizeof(space), 20);
 80007dc:	4926      	ldr	r1, [pc, #152]	; (8000878 <CEC_CAN_IRQHandler+0x19c>)
 80007de:	4825      	ldr	r0, [pc, #148]	; (8000874 <CEC_CAN_IRQHandler+0x198>)
 80007e0:	2314      	movs	r3, #20
 80007e2:	2202      	movs	r2, #2
 80007e4:	f001 fe94 	bl	8002510 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, (uint8_t *)B3, sizeof(B0), 20);
 80007e8:	1979      	adds	r1, r7, r5
 80007ea:	4822      	ldr	r0, [pc, #136]	; (8000874 <CEC_CAN_IRQHandler+0x198>)
 80007ec:	2314      	movs	r3, #20
 80007ee:	2202      	movs	r2, #2
 80007f0:	f001 fe8e 	bl	8002510 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, space, sizeof(space), 20);
 80007f4:	4920      	ldr	r1, [pc, #128]	; (8000878 <CEC_CAN_IRQHandler+0x19c>)
 80007f6:	481f      	ldr	r0, [pc, #124]	; (8000874 <CEC_CAN_IRQHandler+0x198>)
 80007f8:	2314      	movs	r3, #20
 80007fa:	2202      	movs	r2, #2
 80007fc:	f001 fe88 	bl	8002510 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, (uint8_t *)B3, sizeof(B0), 20);
 8000800:	1979      	adds	r1, r7, r5
 8000802:	481c      	ldr	r0, [pc, #112]	; (8000874 <CEC_CAN_IRQHandler+0x198>)
 8000804:	2314      	movs	r3, #20
 8000806:	2202      	movs	r2, #2
 8000808:	f001 fe82 	bl	8002510 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, space, sizeof(space), 20);
 800080c:	491a      	ldr	r1, [pc, #104]	; (8000878 <CEC_CAN_IRQHandler+0x19c>)
 800080e:	4819      	ldr	r0, [pc, #100]	; (8000874 <CEC_CAN_IRQHandler+0x198>)
 8000810:	2314      	movs	r3, #20
 8000812:	2202      	movs	r2, #2
 8000814:	f001 fe7c 	bl	8002510 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, (uint8_t *)B4, sizeof(B0), 20);
 8000818:	2318      	movs	r3, #24
 800081a:	18f9      	adds	r1, r7, r3
 800081c:	4815      	ldr	r0, [pc, #84]	; (8000874 <CEC_CAN_IRQHandler+0x198>)
 800081e:	2314      	movs	r3, #20
 8000820:	2202      	movs	r2, #2
 8000822:	f001 fe75 	bl	8002510 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, space, sizeof(space), 20);
 8000826:	4914      	ldr	r1, [pc, #80]	; (8000878 <CEC_CAN_IRQHandler+0x19c>)
 8000828:	4812      	ldr	r0, [pc, #72]	; (8000874 <CEC_CAN_IRQHandler+0x198>)
 800082a:	2314      	movs	r3, #20
 800082c:	2202      	movs	r2, #2
 800082e:	f001 fe6f 	bl	8002510 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, (uint8_t *)B5, sizeof(B0), 20);
 8000832:	1939      	adds	r1, r7, r4
 8000834:	480f      	ldr	r0, [pc, #60]	; (8000874 <CEC_CAN_IRQHandler+0x198>)
 8000836:	2314      	movs	r3, #20
 8000838:	2202      	movs	r2, #2
 800083a:	f001 fe69 	bl	8002510 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, space, sizeof(space), 20);
 800083e:	490e      	ldr	r1, [pc, #56]	; (8000878 <CEC_CAN_IRQHandler+0x19c>)
 8000840:	480c      	ldr	r0, [pc, #48]	; (8000874 <CEC_CAN_IRQHandler+0x198>)
 8000842:	2314      	movs	r3, #20
 8000844:	2202      	movs	r2, #2
 8000846:	f001 fe63 	bl	8002510 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, newline, sizeof(newline), 20);
 800084a:	490c      	ldr	r1, [pc, #48]	; (800087c <CEC_CAN_IRQHandler+0x1a0>)
 800084c:	4809      	ldr	r0, [pc, #36]	; (8000874 <CEC_CAN_IRQHandler+0x198>)
 800084e:	2314      	movs	r3, #20
 8000850:	2202      	movs	r2, #2
 8000852:	f001 fe5d 	bl	8002510 <HAL_UART_Transmit>
	//  GPIOD->ODR=r<<12; //use output data register to turn on LEDs
	HAL_GPIO_TogglePin(GPIOA,GPIO_PIN_7);
 8000856:	2390      	movs	r3, #144	; 0x90
 8000858:	05db      	lsls	r3, r3, #23
 800085a:	2180      	movs	r1, #128	; 0x80
 800085c:	0018      	movs	r0, r3
 800085e:	f001 f8ea 	bl	8001a36 <HAL_GPIO_TogglePin>
	/* USER CODE END CEC_CAN_IRQn 1 */
}
 8000862:	46c0      	nop			; (mov r8, r8)
 8000864:	46bd      	mov	sp, r7
 8000866:	b017      	add	sp, #92	; 0x5c
 8000868:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800086a:	46c0      	nop			; (mov r8, r8)
 800086c:	200000d8 	.word	0x200000d8
 8000870:	080034e8 	.word	0x080034e8
 8000874:	20000160 	.word	0x20000160
 8000878:	20000004 	.word	0x20000004
 800087c:	20000000 	.word	0x20000000

08000880 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000880:	b580      	push	{r7, lr}
 8000882:	b086      	sub	sp, #24
 8000884:	af00      	add	r7, sp, #0
 8000886:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000888:	4a14      	ldr	r2, [pc, #80]	; (80008dc <_sbrk+0x5c>)
 800088a:	4b15      	ldr	r3, [pc, #84]	; (80008e0 <_sbrk+0x60>)
 800088c:	1ad3      	subs	r3, r2, r3
 800088e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000890:	697b      	ldr	r3, [r7, #20]
 8000892:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000894:	4b13      	ldr	r3, [pc, #76]	; (80008e4 <_sbrk+0x64>)
 8000896:	681b      	ldr	r3, [r3, #0]
 8000898:	2b00      	cmp	r3, #0
 800089a:	d102      	bne.n	80008a2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800089c:	4b11      	ldr	r3, [pc, #68]	; (80008e4 <_sbrk+0x64>)
 800089e:	4a12      	ldr	r2, [pc, #72]	; (80008e8 <_sbrk+0x68>)
 80008a0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80008a2:	4b10      	ldr	r3, [pc, #64]	; (80008e4 <_sbrk+0x64>)
 80008a4:	681a      	ldr	r2, [r3, #0]
 80008a6:	687b      	ldr	r3, [r7, #4]
 80008a8:	18d3      	adds	r3, r2, r3
 80008aa:	693a      	ldr	r2, [r7, #16]
 80008ac:	429a      	cmp	r2, r3
 80008ae:	d207      	bcs.n	80008c0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80008b0:	f002 f9d4 	bl	8002c5c <__errno>
 80008b4:	0003      	movs	r3, r0
 80008b6:	220c      	movs	r2, #12
 80008b8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80008ba:	2301      	movs	r3, #1
 80008bc:	425b      	negs	r3, r3
 80008be:	e009      	b.n	80008d4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80008c0:	4b08      	ldr	r3, [pc, #32]	; (80008e4 <_sbrk+0x64>)
 80008c2:	681b      	ldr	r3, [r3, #0]
 80008c4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80008c6:	4b07      	ldr	r3, [pc, #28]	; (80008e4 <_sbrk+0x64>)
 80008c8:	681a      	ldr	r2, [r3, #0]
 80008ca:	687b      	ldr	r3, [r7, #4]
 80008cc:	18d2      	adds	r2, r2, r3
 80008ce:	4b05      	ldr	r3, [pc, #20]	; (80008e4 <_sbrk+0x64>)
 80008d0:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 80008d2:	68fb      	ldr	r3, [r7, #12]
}
 80008d4:	0018      	movs	r0, r3
 80008d6:	46bd      	mov	sp, r7
 80008d8:	b006      	add	sp, #24
 80008da:	bd80      	pop	{r7, pc}
 80008dc:	20001800 	.word	0x20001800
 80008e0:	00000400 	.word	0x00000400
 80008e4:	20000094 	.word	0x20000094
 80008e8:	20000240 	.word	0x20000240

080008ec <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 80008f0:	46c0      	nop			; (mov r8, r8)
 80008f2:	46bd      	mov	sp, r7
 80008f4:	bd80      	pop	{r7, pc}
	...

080008f8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80008f8:	4813      	ldr	r0, [pc, #76]	; (8000948 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80008fa:	4685      	mov	sp, r0

/*Check if boot space corresponds to test memory*/
 
    LDR R0,=0x00000004
 80008fc:	4813      	ldr	r0, [pc, #76]	; (800094c <LoopForever+0x6>)
    LDR R1, [R0]
 80008fe:	6801      	ldr	r1, [r0, #0]
    LSRS R1, R1, #24
 8000900:	0e09      	lsrs	r1, r1, #24
    LDR R2,=0x1F
 8000902:	4a13      	ldr	r2, [pc, #76]	; (8000950 <LoopForever+0xa>)
    CMP R1, R2
 8000904:	4291      	cmp	r1, r2
    BNE ApplicationStart
 8000906:	d105      	bne.n	8000914 <ApplicationStart>

 /*SYSCFG clock enable*/

    LDR R0,=0x40021018
 8000908:	4812      	ldr	r0, [pc, #72]	; (8000954 <LoopForever+0xe>)
    LDR R1,=0x00000001
 800090a:	4913      	ldr	r1, [pc, #76]	; (8000958 <LoopForever+0x12>)
    STR R1, [R0]
 800090c:	6001      	str	r1, [r0, #0]

/*Set CFGR1 register with flash memory remap at address 0*/
    LDR R0,=0x40010000
 800090e:	4813      	ldr	r0, [pc, #76]	; (800095c <LoopForever+0x16>)
    LDR R1,=0x00000000
 8000910:	4913      	ldr	r1, [pc, #76]	; (8000960 <LoopForever+0x1a>)
    STR R1, [R0]
 8000912:	6001      	str	r1, [r0, #0]

08000914 <ApplicationStart>:

ApplicationStart:
/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000914:	4813      	ldr	r0, [pc, #76]	; (8000964 <LoopForever+0x1e>)
  ldr r1, =_edata
 8000916:	4914      	ldr	r1, [pc, #80]	; (8000968 <LoopForever+0x22>)
  ldr r2, =_sidata
 8000918:	4a14      	ldr	r2, [pc, #80]	; (800096c <LoopForever+0x26>)
  movs r3, #0
 800091a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800091c:	e002      	b.n	8000924 <LoopCopyDataInit>

0800091e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800091e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000920:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000922:	3304      	adds	r3, #4

08000924 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000924:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000926:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000928:	d3f9      	bcc.n	800091e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800092a:	4a11      	ldr	r2, [pc, #68]	; (8000970 <LoopForever+0x2a>)
  ldr r4, =_ebss
 800092c:	4c11      	ldr	r4, [pc, #68]	; (8000974 <LoopForever+0x2e>)
  movs r3, #0
 800092e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000930:	e001      	b.n	8000936 <LoopFillZerobss>

08000932 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000932:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000934:	3204      	adds	r2, #4

08000936 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000936:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000938:	d3fb      	bcc.n	8000932 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 800093a:	f7ff ffd7 	bl	80008ec <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 800093e:	f002 f993 	bl	8002c68 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000942:	f7ff fc6d 	bl	8000220 <main>

08000946 <LoopForever>:

LoopForever:
    b LoopForever
 8000946:	e7fe      	b.n	8000946 <LoopForever>
  ldr   r0, =_estack
 8000948:	20001800 	.word	0x20001800
    LDR R0,=0x00000004
 800094c:	00000004 	.word	0x00000004
    LDR R2,=0x1F
 8000950:	0000001f 	.word	0x0000001f
    LDR R0,=0x40021018
 8000954:	40021018 	.word	0x40021018
    LDR R1,=0x00000001
 8000958:	00000001 	.word	0x00000001
    LDR R0,=0x40010000
 800095c:	40010000 	.word	0x40010000
    LDR R1,=0x00000000
 8000960:	00000000 	.word	0x00000000
  ldr r0, =_sdata
 8000964:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000968:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 800096c:	08003560 	.word	0x08003560
  ldr r2, =_sbss
 8000970:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8000974:	2000023c 	.word	0x2000023c

08000978 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000978:	e7fe      	b.n	8000978 <ADC1_IRQHandler>
	...

0800097c <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000980:	4b07      	ldr	r3, [pc, #28]	; (80009a0 <HAL_Init+0x24>)
 8000982:	681a      	ldr	r2, [r3, #0]
 8000984:	4b06      	ldr	r3, [pc, #24]	; (80009a0 <HAL_Init+0x24>)
 8000986:	2110      	movs	r1, #16
 8000988:	430a      	orrs	r2, r1
 800098a:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 800098c:	2000      	movs	r0, #0
 800098e:	f000 f809 	bl	80009a4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000992:	f7ff fdb5 	bl	8000500 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000996:	2300      	movs	r3, #0
}
 8000998:	0018      	movs	r0, r3
 800099a:	46bd      	mov	sp, r7
 800099c:	bd80      	pop	{r7, pc}
 800099e:	46c0      	nop			; (mov r8, r8)
 80009a0:	40022000 	.word	0x40022000

080009a4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009a4:	b590      	push	{r4, r7, lr}
 80009a6:	b083      	sub	sp, #12
 80009a8:	af00      	add	r7, sp, #0
 80009aa:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80009ac:	4b14      	ldr	r3, [pc, #80]	; (8000a00 <HAL_InitTick+0x5c>)
 80009ae:	681c      	ldr	r4, [r3, #0]
 80009b0:	4b14      	ldr	r3, [pc, #80]	; (8000a04 <HAL_InitTick+0x60>)
 80009b2:	781b      	ldrb	r3, [r3, #0]
 80009b4:	0019      	movs	r1, r3
 80009b6:	23fa      	movs	r3, #250	; 0xfa
 80009b8:	0098      	lsls	r0, r3, #2
 80009ba:	f7ff fba5 	bl	8000108 <__udivsi3>
 80009be:	0003      	movs	r3, r0
 80009c0:	0019      	movs	r1, r3
 80009c2:	0020      	movs	r0, r4
 80009c4:	f7ff fba0 	bl	8000108 <__udivsi3>
 80009c8:	0003      	movs	r3, r0
 80009ca:	0018      	movs	r0, r3
 80009cc:	f000 fea1 	bl	8001712 <HAL_SYSTICK_Config>
 80009d0:	1e03      	subs	r3, r0, #0
 80009d2:	d001      	beq.n	80009d8 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 80009d4:	2301      	movs	r3, #1
 80009d6:	e00f      	b.n	80009f8 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	2b03      	cmp	r3, #3
 80009dc:	d80b      	bhi.n	80009f6 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80009de:	6879      	ldr	r1, [r7, #4]
 80009e0:	2301      	movs	r3, #1
 80009e2:	425b      	negs	r3, r3
 80009e4:	2200      	movs	r2, #0
 80009e6:	0018      	movs	r0, r3
 80009e8:	f000 fe6e 	bl	80016c8 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80009ec:	4b06      	ldr	r3, [pc, #24]	; (8000a08 <HAL_InitTick+0x64>)
 80009ee:	687a      	ldr	r2, [r7, #4]
 80009f0:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 80009f2:	2300      	movs	r3, #0
 80009f4:	e000      	b.n	80009f8 <HAL_InitTick+0x54>
    return HAL_ERROR;
 80009f6:	2301      	movs	r3, #1
}
 80009f8:	0018      	movs	r0, r3
 80009fa:	46bd      	mov	sp, r7
 80009fc:	b003      	add	sp, #12
 80009fe:	bd90      	pop	{r4, r7, pc}
 8000a00:	20000008 	.word	0x20000008
 8000a04:	20000010 	.word	0x20000010
 8000a08:	2000000c 	.word	0x2000000c

08000a0c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a10:	4b05      	ldr	r3, [pc, #20]	; (8000a28 <HAL_IncTick+0x1c>)
 8000a12:	781b      	ldrb	r3, [r3, #0]
 8000a14:	001a      	movs	r2, r3
 8000a16:	4b05      	ldr	r3, [pc, #20]	; (8000a2c <HAL_IncTick+0x20>)
 8000a18:	681b      	ldr	r3, [r3, #0]
 8000a1a:	18d2      	adds	r2, r2, r3
 8000a1c:	4b03      	ldr	r3, [pc, #12]	; (8000a2c <HAL_IncTick+0x20>)
 8000a1e:	601a      	str	r2, [r3, #0]
}
 8000a20:	46c0      	nop			; (mov r8, r8)
 8000a22:	46bd      	mov	sp, r7
 8000a24:	bd80      	pop	{r7, pc}
 8000a26:	46c0      	nop			; (mov r8, r8)
 8000a28:	20000010 	.word	0x20000010
 8000a2c:	20000234 	.word	0x20000234

08000a30 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	af00      	add	r7, sp, #0
  return uwTick;
 8000a34:	4b02      	ldr	r3, [pc, #8]	; (8000a40 <HAL_GetTick+0x10>)
 8000a36:	681b      	ldr	r3, [r3, #0]
}
 8000a38:	0018      	movs	r0, r3
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	bd80      	pop	{r7, pc}
 8000a3e:	46c0      	nop			; (mov r8, r8)
 8000a40:	20000234 	.word	0x20000234

08000a44 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	b084      	sub	sp, #16
 8000a48:	af00      	add	r7, sp, #0
 8000a4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	2b00      	cmp	r3, #0
 8000a50:	d101      	bne.n	8000a56 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8000a52:	2301      	movs	r3, #1
 8000a54:	e0f0      	b.n	8000c38 <HAL_CAN_Init+0x1f4>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	2220      	movs	r2, #32
 8000a5a:	5c9b      	ldrb	r3, [r3, r2]
 8000a5c:	b2db      	uxtb	r3, r3
 8000a5e:	2b00      	cmp	r3, #0
 8000a60:	d103      	bne.n	8000a6a <HAL_CAN_Init+0x26>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	0018      	movs	r0, r3
 8000a66:	f7ff fd77 	bl	8000558 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	681b      	ldr	r3, [r3, #0]
 8000a6e:	681a      	ldr	r2, [r3, #0]
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	681b      	ldr	r3, [r3, #0]
 8000a74:	2102      	movs	r1, #2
 8000a76:	438a      	bics	r2, r1
 8000a78:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000a7a:	f7ff ffd9 	bl	8000a30 <HAL_GetTick>
 8000a7e:	0003      	movs	r3, r0
 8000a80:	60fb      	str	r3, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000a82:	e013      	b.n	8000aac <HAL_CAN_Init+0x68>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000a84:	f7ff ffd4 	bl	8000a30 <HAL_GetTick>
 8000a88:	0002      	movs	r2, r0
 8000a8a:	68fb      	ldr	r3, [r7, #12]
 8000a8c:	1ad3      	subs	r3, r2, r3
 8000a8e:	2b0a      	cmp	r3, #10
 8000a90:	d90c      	bls.n	8000aac <HAL_CAN_Init+0x68>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a96:	2280      	movs	r2, #128	; 0x80
 8000a98:	0292      	lsls	r2, r2, #10
 8000a9a:	431a      	orrs	r2, r3
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	2220      	movs	r2, #32
 8000aa4:	2105      	movs	r1, #5
 8000aa6:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8000aa8:	2301      	movs	r3, #1
 8000aaa:	e0c5      	b.n	8000c38 <HAL_CAN_Init+0x1f4>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	681b      	ldr	r3, [r3, #0]
 8000ab0:	685b      	ldr	r3, [r3, #4]
 8000ab2:	2202      	movs	r2, #2
 8000ab4:	4013      	ands	r3, r2
 8000ab6:	d1e5      	bne.n	8000a84 <HAL_CAN_Init+0x40>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	681b      	ldr	r3, [r3, #0]
 8000abc:	681a      	ldr	r2, [r3, #0]
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	681b      	ldr	r3, [r3, #0]
 8000ac2:	2101      	movs	r1, #1
 8000ac4:	430a      	orrs	r2, r1
 8000ac6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000ac8:	f7ff ffb2 	bl	8000a30 <HAL_GetTick>
 8000acc:	0003      	movs	r3, r0
 8000ace:	60fb      	str	r3, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000ad0:	e013      	b.n	8000afa <HAL_CAN_Init+0xb6>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000ad2:	f7ff ffad 	bl	8000a30 <HAL_GetTick>
 8000ad6:	0002      	movs	r2, r0
 8000ad8:	68fb      	ldr	r3, [r7, #12]
 8000ada:	1ad3      	subs	r3, r2, r3
 8000adc:	2b0a      	cmp	r3, #10
 8000ade:	d90c      	bls.n	8000afa <HAL_CAN_Init+0xb6>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ae4:	2280      	movs	r2, #128	; 0x80
 8000ae6:	0292      	lsls	r2, r2, #10
 8000ae8:	431a      	orrs	r2, r3
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	2220      	movs	r2, #32
 8000af2:	2105      	movs	r1, #5
 8000af4:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8000af6:	2301      	movs	r3, #1
 8000af8:	e09e      	b.n	8000c38 <HAL_CAN_Init+0x1f4>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	681b      	ldr	r3, [r3, #0]
 8000afe:	685b      	ldr	r3, [r3, #4]
 8000b00:	2201      	movs	r2, #1
 8000b02:	4013      	ands	r3, r2
 8000b04:	d0e5      	beq.n	8000ad2 <HAL_CAN_Init+0x8e>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	7e1b      	ldrb	r3, [r3, #24]
 8000b0a:	2b01      	cmp	r3, #1
 8000b0c:	d108      	bne.n	8000b20 <HAL_CAN_Init+0xdc>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	681b      	ldr	r3, [r3, #0]
 8000b12:	681a      	ldr	r2, [r3, #0]
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	681b      	ldr	r3, [r3, #0]
 8000b18:	2180      	movs	r1, #128	; 0x80
 8000b1a:	430a      	orrs	r2, r1
 8000b1c:	601a      	str	r2, [r3, #0]
 8000b1e:	e007      	b.n	8000b30 <HAL_CAN_Init+0xec>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	681a      	ldr	r2, [r3, #0]
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	681b      	ldr	r3, [r3, #0]
 8000b2a:	2180      	movs	r1, #128	; 0x80
 8000b2c:	438a      	bics	r2, r1
 8000b2e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	7e5b      	ldrb	r3, [r3, #25]
 8000b34:	2b01      	cmp	r3, #1
 8000b36:	d108      	bne.n	8000b4a <HAL_CAN_Init+0x106>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	681b      	ldr	r3, [r3, #0]
 8000b3c:	681a      	ldr	r2, [r3, #0]
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	681b      	ldr	r3, [r3, #0]
 8000b42:	2140      	movs	r1, #64	; 0x40
 8000b44:	430a      	orrs	r2, r1
 8000b46:	601a      	str	r2, [r3, #0]
 8000b48:	e007      	b.n	8000b5a <HAL_CAN_Init+0x116>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	681b      	ldr	r3, [r3, #0]
 8000b4e:	681a      	ldr	r2, [r3, #0]
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	681b      	ldr	r3, [r3, #0]
 8000b54:	2140      	movs	r1, #64	; 0x40
 8000b56:	438a      	bics	r2, r1
 8000b58:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	7e9b      	ldrb	r3, [r3, #26]
 8000b5e:	2b01      	cmp	r3, #1
 8000b60:	d108      	bne.n	8000b74 <HAL_CAN_Init+0x130>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	681b      	ldr	r3, [r3, #0]
 8000b66:	681a      	ldr	r2, [r3, #0]
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	2120      	movs	r1, #32
 8000b6e:	430a      	orrs	r2, r1
 8000b70:	601a      	str	r2, [r3, #0]
 8000b72:	e007      	b.n	8000b84 <HAL_CAN_Init+0x140>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	681a      	ldr	r2, [r3, #0]
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	681b      	ldr	r3, [r3, #0]
 8000b7e:	2120      	movs	r1, #32
 8000b80:	438a      	bics	r2, r1
 8000b82:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	7edb      	ldrb	r3, [r3, #27]
 8000b88:	2b01      	cmp	r3, #1
 8000b8a:	d108      	bne.n	8000b9e <HAL_CAN_Init+0x15a>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	681b      	ldr	r3, [r3, #0]
 8000b90:	681a      	ldr	r2, [r3, #0]
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	681b      	ldr	r3, [r3, #0]
 8000b96:	2110      	movs	r1, #16
 8000b98:	438a      	bics	r2, r1
 8000b9a:	601a      	str	r2, [r3, #0]
 8000b9c:	e007      	b.n	8000bae <HAL_CAN_Init+0x16a>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	681b      	ldr	r3, [r3, #0]
 8000ba2:	681a      	ldr	r2, [r3, #0]
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	2110      	movs	r1, #16
 8000baa:	430a      	orrs	r2, r1
 8000bac:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	7f1b      	ldrb	r3, [r3, #28]
 8000bb2:	2b01      	cmp	r3, #1
 8000bb4:	d108      	bne.n	8000bc8 <HAL_CAN_Init+0x184>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	681b      	ldr	r3, [r3, #0]
 8000bba:	681a      	ldr	r2, [r3, #0]
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	681b      	ldr	r3, [r3, #0]
 8000bc0:	2108      	movs	r1, #8
 8000bc2:	430a      	orrs	r2, r1
 8000bc4:	601a      	str	r2, [r3, #0]
 8000bc6:	e007      	b.n	8000bd8 <HAL_CAN_Init+0x194>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	681a      	ldr	r2, [r3, #0]
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	681b      	ldr	r3, [r3, #0]
 8000bd2:	2108      	movs	r1, #8
 8000bd4:	438a      	bics	r2, r1
 8000bd6:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	7f5b      	ldrb	r3, [r3, #29]
 8000bdc:	2b01      	cmp	r3, #1
 8000bde:	d108      	bne.n	8000bf2 <HAL_CAN_Init+0x1ae>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	681a      	ldr	r2, [r3, #0]
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	681b      	ldr	r3, [r3, #0]
 8000bea:	2104      	movs	r1, #4
 8000bec:	430a      	orrs	r2, r1
 8000bee:	601a      	str	r2, [r3, #0]
 8000bf0:	e007      	b.n	8000c02 <HAL_CAN_Init+0x1be>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	681b      	ldr	r3, [r3, #0]
 8000bf6:	681a      	ldr	r2, [r3, #0]
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	2104      	movs	r1, #4
 8000bfe:	438a      	bics	r2, r1
 8000c00:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	689a      	ldr	r2, [r3, #8]
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	68db      	ldr	r3, [r3, #12]
 8000c0a:	431a      	orrs	r2, r3
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	691b      	ldr	r3, [r3, #16]
 8000c10:	431a      	orrs	r2, r3
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	695b      	ldr	r3, [r3, #20]
 8000c16:	431a      	orrs	r2, r3
 8000c18:	0011      	movs	r1, r2
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	685b      	ldr	r3, [r3, #4]
 8000c1e:	1e5a      	subs	r2, r3, #1
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	430a      	orrs	r2, r1
 8000c26:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	2220      	movs	r2, #32
 8000c32:	2101      	movs	r1, #1
 8000c34:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8000c36:	2300      	movs	r3, #0
}
 8000c38:	0018      	movs	r0, r3
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	b004      	add	sp, #16
 8000c3e:	bd80      	pop	{r7, pc}

08000c40 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	b086      	sub	sp, #24
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	6078      	str	r0, [r7, #4]
 8000c48:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	681b      	ldr	r3, [r3, #0]
 8000c4e:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8000c50:	2013      	movs	r0, #19
 8000c52:	183b      	adds	r3, r7, r0
 8000c54:	687a      	ldr	r2, [r7, #4]
 8000c56:	2120      	movs	r1, #32
 8000c58:	5c52      	ldrb	r2, [r2, r1]
 8000c5a:	701a      	strb	r2, [r3, #0]

  if ((state == HAL_CAN_STATE_READY) ||
 8000c5c:	183b      	adds	r3, r7, r0
 8000c5e:	781b      	ldrb	r3, [r3, #0]
 8000c60:	2b01      	cmp	r3, #1
 8000c62:	d005      	beq.n	8000c70 <HAL_CAN_ConfigFilter+0x30>
 8000c64:	2313      	movs	r3, #19
 8000c66:	18fb      	adds	r3, r7, r3
 8000c68:	781b      	ldrb	r3, [r3, #0]
 8000c6a:	2b02      	cmp	r3, #2
 8000c6c:	d000      	beq.n	8000c70 <HAL_CAN_ConfigFilter+0x30>
 8000c6e:	e0cd      	b.n	8000e0c <HAL_CAN_ConfigFilter+0x1cc>

    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8000c70:	697a      	ldr	r2, [r7, #20]
 8000c72:	2380      	movs	r3, #128	; 0x80
 8000c74:	009b      	lsls	r3, r3, #2
 8000c76:	58d3      	ldr	r3, [r2, r3]
 8000c78:	2201      	movs	r2, #1
 8000c7a:	431a      	orrs	r2, r3
 8000c7c:	0011      	movs	r1, r2
 8000c7e:	697a      	ldr	r2, [r7, #20]
 8000c80:	2380      	movs	r3, #128	; 0x80
 8000c82:	009b      	lsls	r3, r3, #2
 8000c84:	50d1      	str	r1, [r2, r3]

    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8000c86:	683b      	ldr	r3, [r7, #0]
 8000c88:	695b      	ldr	r3, [r3, #20]
 8000c8a:	221f      	movs	r2, #31
 8000c8c:	4013      	ands	r3, r2
 8000c8e:	2201      	movs	r2, #1
 8000c90:	409a      	lsls	r2, r3
 8000c92:	0013      	movs	r3, r2
 8000c94:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8000c96:	697a      	ldr	r2, [r7, #20]
 8000c98:	2387      	movs	r3, #135	; 0x87
 8000c9a:	009b      	lsls	r3, r3, #2
 8000c9c:	58d3      	ldr	r3, [r2, r3]
 8000c9e:	68fa      	ldr	r2, [r7, #12]
 8000ca0:	43d2      	mvns	r2, r2
 8000ca2:	401a      	ands	r2, r3
 8000ca4:	0011      	movs	r1, r2
 8000ca6:	697a      	ldr	r2, [r7, #20]
 8000ca8:	2387      	movs	r3, #135	; 0x87
 8000caa:	009b      	lsls	r3, r3, #2
 8000cac:	50d1      	str	r1, [r2, r3]

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8000cae:	683b      	ldr	r3, [r7, #0]
 8000cb0:	69db      	ldr	r3, [r3, #28]
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	d129      	bne.n	8000d0a <HAL_CAN_ConfigFilter+0xca>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8000cb6:	697a      	ldr	r2, [r7, #20]
 8000cb8:	2383      	movs	r3, #131	; 0x83
 8000cba:	009b      	lsls	r3, r3, #2
 8000cbc:	58d3      	ldr	r3, [r2, r3]
 8000cbe:	68fa      	ldr	r2, [r7, #12]
 8000cc0:	43d2      	mvns	r2, r2
 8000cc2:	401a      	ands	r2, r3
 8000cc4:	0011      	movs	r1, r2
 8000cc6:	697a      	ldr	r2, [r7, #20]
 8000cc8:	2383      	movs	r3, #131	; 0x83
 8000cca:	009b      	lsls	r3, r3, #2
 8000ccc:	50d1      	str	r1, [r2, r3]

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000cce:	683b      	ldr	r3, [r7, #0]
 8000cd0:	68db      	ldr	r3, [r3, #12]
 8000cd2:	0418      	lsls	r0, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000cd4:	683b      	ldr	r3, [r7, #0]
 8000cd6:	685b      	ldr	r3, [r3, #4]
 8000cd8:	041b      	lsls	r3, r3, #16
 8000cda:	0c19      	lsrs	r1, r3, #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000cdc:	683b      	ldr	r3, [r7, #0]
 8000cde:	695a      	ldr	r2, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000ce0:	4301      	orrs	r1, r0
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000ce2:	697b      	ldr	r3, [r7, #20]
 8000ce4:	3248      	adds	r2, #72	; 0x48
 8000ce6:	00d2      	lsls	r2, r2, #3
 8000ce8:	50d1      	str	r1, [r2, r3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000cea:	683b      	ldr	r3, [r7, #0]
 8000cec:	689b      	ldr	r3, [r3, #8]
 8000cee:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8000cf0:	683b      	ldr	r3, [r7, #0]
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	041b      	lsls	r3, r3, #16
 8000cf6:	0c1a      	lsrs	r2, r3, #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000cf8:	683b      	ldr	r3, [r7, #0]
 8000cfa:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000cfc:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000cfe:	6979      	ldr	r1, [r7, #20]
 8000d00:	3348      	adds	r3, #72	; 0x48
 8000d02:	00db      	lsls	r3, r3, #3
 8000d04:	18cb      	adds	r3, r1, r3
 8000d06:	3304      	adds	r3, #4
 8000d08:	601a      	str	r2, [r3, #0]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8000d0a:	683b      	ldr	r3, [r7, #0]
 8000d0c:	69db      	ldr	r3, [r3, #28]
 8000d0e:	2b01      	cmp	r3, #1
 8000d10:	d128      	bne.n	8000d64 <HAL_CAN_ConfigFilter+0x124>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8000d12:	697a      	ldr	r2, [r7, #20]
 8000d14:	2383      	movs	r3, #131	; 0x83
 8000d16:	009b      	lsls	r3, r3, #2
 8000d18:	58d2      	ldr	r2, [r2, r3]
 8000d1a:	68fb      	ldr	r3, [r7, #12]
 8000d1c:	431a      	orrs	r2, r3
 8000d1e:	0011      	movs	r1, r2
 8000d20:	697a      	ldr	r2, [r7, #20]
 8000d22:	2383      	movs	r3, #131	; 0x83
 8000d24:	009b      	lsls	r3, r3, #2
 8000d26:	50d1      	str	r1, [r2, r3]

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000d28:	683b      	ldr	r3, [r7, #0]
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	0418      	lsls	r0, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000d2e:	683b      	ldr	r3, [r7, #0]
 8000d30:	685b      	ldr	r3, [r3, #4]
 8000d32:	041b      	lsls	r3, r3, #16
 8000d34:	0c19      	lsrs	r1, r3, #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000d36:	683b      	ldr	r3, [r7, #0]
 8000d38:	695a      	ldr	r2, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000d3a:	4301      	orrs	r1, r0
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000d3c:	697b      	ldr	r3, [r7, #20]
 8000d3e:	3248      	adds	r2, #72	; 0x48
 8000d40:	00d2      	lsls	r2, r2, #3
 8000d42:	50d1      	str	r1, [r2, r3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000d44:	683b      	ldr	r3, [r7, #0]
 8000d46:	689b      	ldr	r3, [r3, #8]
 8000d48:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8000d4a:	683b      	ldr	r3, [r7, #0]
 8000d4c:	68db      	ldr	r3, [r3, #12]
 8000d4e:	041b      	lsls	r3, r3, #16
 8000d50:	0c1a      	lsrs	r2, r3, #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000d52:	683b      	ldr	r3, [r7, #0]
 8000d54:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000d56:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000d58:	6979      	ldr	r1, [r7, #20]
 8000d5a:	3348      	adds	r3, #72	; 0x48
 8000d5c:	00db      	lsls	r3, r3, #3
 8000d5e:	18cb      	adds	r3, r1, r3
 8000d60:	3304      	adds	r3, #4
 8000d62:	601a      	str	r2, [r3, #0]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8000d64:	683b      	ldr	r3, [r7, #0]
 8000d66:	699b      	ldr	r3, [r3, #24]
 8000d68:	2b00      	cmp	r3, #0
 8000d6a:	d10c      	bne.n	8000d86 <HAL_CAN_ConfigFilter+0x146>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8000d6c:	697a      	ldr	r2, [r7, #20]
 8000d6e:	2381      	movs	r3, #129	; 0x81
 8000d70:	009b      	lsls	r3, r3, #2
 8000d72:	58d3      	ldr	r3, [r2, r3]
 8000d74:	68fa      	ldr	r2, [r7, #12]
 8000d76:	43d2      	mvns	r2, r2
 8000d78:	401a      	ands	r2, r3
 8000d7a:	0011      	movs	r1, r2
 8000d7c:	697a      	ldr	r2, [r7, #20]
 8000d7e:	2381      	movs	r3, #129	; 0x81
 8000d80:	009b      	lsls	r3, r3, #2
 8000d82:	50d1      	str	r1, [r2, r3]
 8000d84:	e00a      	b.n	8000d9c <HAL_CAN_ConfigFilter+0x15c>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8000d86:	697a      	ldr	r2, [r7, #20]
 8000d88:	2381      	movs	r3, #129	; 0x81
 8000d8a:	009b      	lsls	r3, r3, #2
 8000d8c:	58d2      	ldr	r2, [r2, r3]
 8000d8e:	68fb      	ldr	r3, [r7, #12]
 8000d90:	431a      	orrs	r2, r3
 8000d92:	0011      	movs	r1, r2
 8000d94:	697a      	ldr	r2, [r7, #20]
 8000d96:	2381      	movs	r3, #129	; 0x81
 8000d98:	009b      	lsls	r3, r3, #2
 8000d9a:	50d1      	str	r1, [r2, r3]
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8000d9c:	683b      	ldr	r3, [r7, #0]
 8000d9e:	691b      	ldr	r3, [r3, #16]
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	d10c      	bne.n	8000dbe <HAL_CAN_ConfigFilter+0x17e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8000da4:	697a      	ldr	r2, [r7, #20]
 8000da6:	2385      	movs	r3, #133	; 0x85
 8000da8:	009b      	lsls	r3, r3, #2
 8000daa:	58d3      	ldr	r3, [r2, r3]
 8000dac:	68fa      	ldr	r2, [r7, #12]
 8000dae:	43d2      	mvns	r2, r2
 8000db0:	401a      	ands	r2, r3
 8000db2:	0011      	movs	r1, r2
 8000db4:	697a      	ldr	r2, [r7, #20]
 8000db6:	2385      	movs	r3, #133	; 0x85
 8000db8:	009b      	lsls	r3, r3, #2
 8000dba:	50d1      	str	r1, [r2, r3]
 8000dbc:	e00a      	b.n	8000dd4 <HAL_CAN_ConfigFilter+0x194>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8000dbe:	697a      	ldr	r2, [r7, #20]
 8000dc0:	2385      	movs	r3, #133	; 0x85
 8000dc2:	009b      	lsls	r3, r3, #2
 8000dc4:	58d2      	ldr	r2, [r2, r3]
 8000dc6:	68fb      	ldr	r3, [r7, #12]
 8000dc8:	431a      	orrs	r2, r3
 8000dca:	0011      	movs	r1, r2
 8000dcc:	697a      	ldr	r2, [r7, #20]
 8000dce:	2385      	movs	r3, #133	; 0x85
 8000dd0:	009b      	lsls	r3, r3, #2
 8000dd2:	50d1      	str	r1, [r2, r3]
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8000dd4:	683b      	ldr	r3, [r7, #0]
 8000dd6:	6a1b      	ldr	r3, [r3, #32]
 8000dd8:	2b01      	cmp	r3, #1
 8000dda:	d10a      	bne.n	8000df2 <HAL_CAN_ConfigFilter+0x1b2>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8000ddc:	697a      	ldr	r2, [r7, #20]
 8000dde:	2387      	movs	r3, #135	; 0x87
 8000de0:	009b      	lsls	r3, r3, #2
 8000de2:	58d2      	ldr	r2, [r2, r3]
 8000de4:	68fb      	ldr	r3, [r7, #12]
 8000de6:	431a      	orrs	r2, r3
 8000de8:	0011      	movs	r1, r2
 8000dea:	697a      	ldr	r2, [r7, #20]
 8000dec:	2387      	movs	r3, #135	; 0x87
 8000dee:	009b      	lsls	r3, r3, #2
 8000df0:	50d1      	str	r1, [r2, r3]
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8000df2:	697a      	ldr	r2, [r7, #20]
 8000df4:	2380      	movs	r3, #128	; 0x80
 8000df6:	009b      	lsls	r3, r3, #2
 8000df8:	58d3      	ldr	r3, [r2, r3]
 8000dfa:	2201      	movs	r2, #1
 8000dfc:	4393      	bics	r3, r2
 8000dfe:	0019      	movs	r1, r3
 8000e00:	697a      	ldr	r2, [r7, #20]
 8000e02:	2380      	movs	r3, #128	; 0x80
 8000e04:	009b      	lsls	r3, r3, #2
 8000e06:	50d1      	str	r1, [r2, r3]

    /* Return function status */
    return HAL_OK;
 8000e08:	2300      	movs	r3, #0
 8000e0a:	e007      	b.n	8000e1c <HAL_CAN_ConfigFilter+0x1dc>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e10:	2280      	movs	r2, #128	; 0x80
 8000e12:	02d2      	lsls	r2, r2, #11
 8000e14:	431a      	orrs	r2, r3
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000e1a:	2301      	movs	r3, #1
  }
}
 8000e1c:	0018      	movs	r0, r3
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	b006      	add	sp, #24
 8000e22:	bd80      	pop	{r7, pc}

08000e24 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	b084      	sub	sp, #16
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	2220      	movs	r2, #32
 8000e30:	5c9b      	ldrb	r3, [r3, r2]
 8000e32:	b2db      	uxtb	r3, r3
 8000e34:	2b01      	cmp	r3, #1
 8000e36:	d12f      	bne.n	8000e98 <HAL_CAN_Start+0x74>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	2220      	movs	r2, #32
 8000e3c:	2102      	movs	r1, #2
 8000e3e:	5499      	strb	r1, [r3, r2]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	681a      	ldr	r2, [r3, #0]
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	2101      	movs	r1, #1
 8000e4c:	438a      	bics	r2, r1
 8000e4e:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8000e50:	f7ff fdee 	bl	8000a30 <HAL_GetTick>
 8000e54:	0003      	movs	r3, r0
 8000e56:	60fb      	str	r3, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8000e58:	e013      	b.n	8000e82 <HAL_CAN_Start+0x5e>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000e5a:	f7ff fde9 	bl	8000a30 <HAL_GetTick>
 8000e5e:	0002      	movs	r2, r0
 8000e60:	68fb      	ldr	r3, [r7, #12]
 8000e62:	1ad3      	subs	r3, r2, r3
 8000e64:	2b0a      	cmp	r3, #10
 8000e66:	d90c      	bls.n	8000e82 <HAL_CAN_Start+0x5e>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e6c:	2280      	movs	r2, #128	; 0x80
 8000e6e:	0292      	lsls	r2, r2, #10
 8000e70:	431a      	orrs	r2, r3
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	2220      	movs	r2, #32
 8000e7a:	2105      	movs	r1, #5
 8000e7c:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8000e7e:	2301      	movs	r3, #1
 8000e80:	e012      	b.n	8000ea8 <HAL_CAN_Start+0x84>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	685b      	ldr	r3, [r3, #4]
 8000e88:	2201      	movs	r2, #1
 8000e8a:	4013      	ands	r3, r2
 8000e8c:	d1e5      	bne.n	8000e5a <HAL_CAN_Start+0x36>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	2200      	movs	r2, #0
 8000e92:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8000e94:	2300      	movs	r3, #0
 8000e96:	e007      	b.n	8000ea8 <HAL_CAN_Start+0x84>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e9c:	2280      	movs	r2, #128	; 0x80
 8000e9e:	0312      	lsls	r2, r2, #12
 8000ea0:	431a      	orrs	r2, r3
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000ea6:	2301      	movs	r3, #1
  }
}
 8000ea8:	0018      	movs	r0, r3
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	b004      	add	sp, #16
 8000eae:	bd80      	pop	{r7, pc}

08000eb0 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b086      	sub	sp, #24
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	60f8      	str	r0, [r7, #12]
 8000eb8:	60b9      	str	r1, [r7, #8]
 8000eba:	607a      	str	r2, [r7, #4]
 8000ebc:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8000ebe:	2017      	movs	r0, #23
 8000ec0:	183b      	adds	r3, r7, r0
 8000ec2:	68fa      	ldr	r2, [r7, #12]
 8000ec4:	2120      	movs	r1, #32
 8000ec6:	5c52      	ldrb	r2, [r2, r1]
 8000ec8:	701a      	strb	r2, [r3, #0]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8000eca:	183b      	adds	r3, r7, r0
 8000ecc:	781b      	ldrb	r3, [r3, #0]
 8000ece:	2b01      	cmp	r3, #1
 8000ed0:	d005      	beq.n	8000ede <HAL_CAN_GetRxMessage+0x2e>
 8000ed2:	2317      	movs	r3, #23
 8000ed4:	18fb      	adds	r3, r7, r3
 8000ed6:	781b      	ldrb	r3, [r3, #0]
 8000ed8:	2b02      	cmp	r3, #2
 8000eda:	d000      	beq.n	8000ede <HAL_CAN_GetRxMessage+0x2e>
 8000edc:	e0f8      	b.n	80010d0 <HAL_CAN_GetRxMessage+0x220>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8000ede:	68bb      	ldr	r3, [r7, #8]
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	d10e      	bne.n	8000f02 <HAL_CAN_GetRxMessage+0x52>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8000ee4:	68fb      	ldr	r3, [r7, #12]
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	68db      	ldr	r3, [r3, #12]
 8000eea:	2203      	movs	r2, #3
 8000eec:	4013      	ands	r3, r2
 8000eee:	d117      	bne.n	8000f20 <HAL_CAN_GetRxMessage+0x70>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8000ef0:	68fb      	ldr	r3, [r7, #12]
 8000ef2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ef4:	2280      	movs	r2, #128	; 0x80
 8000ef6:	0392      	lsls	r2, r2, #14
 8000ef8:	431a      	orrs	r2, r3
 8000efa:	68fb      	ldr	r3, [r7, #12]
 8000efc:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8000efe:	2301      	movs	r3, #1
 8000f00:	e0ee      	b.n	80010e0 <HAL_CAN_GetRxMessage+0x230>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8000f02:	68fb      	ldr	r3, [r7, #12]
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	691b      	ldr	r3, [r3, #16]
 8000f08:	2203      	movs	r2, #3
 8000f0a:	4013      	ands	r3, r2
 8000f0c:	d108      	bne.n	8000f20 <HAL_CAN_GetRxMessage+0x70>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8000f0e:	68fb      	ldr	r3, [r7, #12]
 8000f10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f12:	2280      	movs	r2, #128	; 0x80
 8000f14:	0392      	lsls	r2, r2, #14
 8000f16:	431a      	orrs	r2, r3
 8000f18:	68fb      	ldr	r3, [r7, #12]
 8000f1a:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8000f1c:	2301      	movs	r3, #1
 8000f1e:	e0df      	b.n	80010e0 <HAL_CAN_GetRxMessage+0x230>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8000f20:	68fb      	ldr	r3, [r7, #12]
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	68ba      	ldr	r2, [r7, #8]
 8000f26:	321b      	adds	r2, #27
 8000f28:	0112      	lsls	r2, r2, #4
 8000f2a:	58d3      	ldr	r3, [r2, r3]
 8000f2c:	2204      	movs	r2, #4
 8000f2e:	401a      	ands	r2, r3
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	689b      	ldr	r3, [r3, #8]
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	d10b      	bne.n	8000f54 <HAL_CAN_GetRxMessage+0xa4>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8000f3c:	68fb      	ldr	r3, [r7, #12]
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	68ba      	ldr	r2, [r7, #8]
 8000f42:	321b      	adds	r2, #27
 8000f44:	0112      	lsls	r2, r2, #4
 8000f46:	58d3      	ldr	r3, [r2, r3]
 8000f48:	0d5b      	lsrs	r3, r3, #21
 8000f4a:	055b      	lsls	r3, r3, #21
 8000f4c:	0d5a      	lsrs	r2, r3, #21
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	601a      	str	r2, [r3, #0]
 8000f52:	e00a      	b.n	8000f6a <HAL_CAN_GetRxMessage+0xba>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8000f54:	68fb      	ldr	r3, [r7, #12]
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	68ba      	ldr	r2, [r7, #8]
 8000f5a:	321b      	adds	r2, #27
 8000f5c:	0112      	lsls	r2, r2, #4
 8000f5e:	58d3      	ldr	r3, [r2, r3]
 8000f60:	08db      	lsrs	r3, r3, #3
 8000f62:	00db      	lsls	r3, r3, #3
 8000f64:	08da      	lsrs	r2, r3, #3
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8000f6a:	68fb      	ldr	r3, [r7, #12]
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	68ba      	ldr	r2, [r7, #8]
 8000f70:	321b      	adds	r2, #27
 8000f72:	0112      	lsls	r2, r2, #4
 8000f74:	58d3      	ldr	r3, [r2, r3]
 8000f76:	2202      	movs	r2, #2
 8000f78:	401a      	ands	r2, r3
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8000f7e:	68fb      	ldr	r3, [r7, #12]
 8000f80:	681a      	ldr	r2, [r3, #0]
 8000f82:	68bb      	ldr	r3, [r7, #8]
 8000f84:	331b      	adds	r3, #27
 8000f86:	011b      	lsls	r3, r3, #4
 8000f88:	18d3      	adds	r3, r2, r3
 8000f8a:	3304      	adds	r3, #4
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	220f      	movs	r2, #15
 8000f90:	401a      	ands	r2, r3
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8000f96:	68fb      	ldr	r3, [r7, #12]
 8000f98:	681a      	ldr	r2, [r3, #0]
 8000f9a:	68bb      	ldr	r3, [r7, #8]
 8000f9c:	331b      	adds	r3, #27
 8000f9e:	011b      	lsls	r3, r3, #4
 8000fa0:	18d3      	adds	r3, r2, r3
 8000fa2:	3304      	adds	r3, #4
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	0a1b      	lsrs	r3, r3, #8
 8000fa8:	22ff      	movs	r2, #255	; 0xff
 8000faa:	401a      	ands	r2, r3
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8000fb0:	68fb      	ldr	r3, [r7, #12]
 8000fb2:	681a      	ldr	r2, [r3, #0]
 8000fb4:	68bb      	ldr	r3, [r7, #8]
 8000fb6:	331b      	adds	r3, #27
 8000fb8:	011b      	lsls	r3, r3, #4
 8000fba:	18d3      	adds	r3, r2, r3
 8000fbc:	3304      	adds	r3, #4
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	0c1b      	lsrs	r3, r3, #16
 8000fc2:	041b      	lsls	r3, r3, #16
 8000fc4:	0c1a      	lsrs	r2, r3, #16
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8000fca:	68fb      	ldr	r3, [r7, #12]
 8000fcc:	6819      	ldr	r1, [r3, #0]
 8000fce:	68ba      	ldr	r2, [r7, #8]
 8000fd0:	23dc      	movs	r3, #220	; 0xdc
 8000fd2:	005b      	lsls	r3, r3, #1
 8000fd4:	0112      	lsls	r2, r2, #4
 8000fd6:	188a      	adds	r2, r1, r2
 8000fd8:	18d3      	adds	r3, r2, r3
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	b2da      	uxtb	r2, r3
 8000fde:	683b      	ldr	r3, [r7, #0]
 8000fe0:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8000fe2:	68fb      	ldr	r3, [r7, #12]
 8000fe4:	6819      	ldr	r1, [r3, #0]
 8000fe6:	68ba      	ldr	r2, [r7, #8]
 8000fe8:	23dc      	movs	r3, #220	; 0xdc
 8000fea:	005b      	lsls	r3, r3, #1
 8000fec:	0112      	lsls	r2, r2, #4
 8000fee:	188a      	adds	r2, r1, r2
 8000ff0:	18d3      	adds	r3, r2, r3
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	0a1a      	lsrs	r2, r3, #8
 8000ff6:	683b      	ldr	r3, [r7, #0]
 8000ff8:	3301      	adds	r3, #1
 8000ffa:	b2d2      	uxtb	r2, r2
 8000ffc:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8000ffe:	68fb      	ldr	r3, [r7, #12]
 8001000:	6819      	ldr	r1, [r3, #0]
 8001002:	68ba      	ldr	r2, [r7, #8]
 8001004:	23dc      	movs	r3, #220	; 0xdc
 8001006:	005b      	lsls	r3, r3, #1
 8001008:	0112      	lsls	r2, r2, #4
 800100a:	188a      	adds	r2, r1, r2
 800100c:	18d3      	adds	r3, r2, r3
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	0c1a      	lsrs	r2, r3, #16
 8001012:	683b      	ldr	r3, [r7, #0]
 8001014:	3302      	adds	r3, #2
 8001016:	b2d2      	uxtb	r2, r2
 8001018:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 800101a:	68fb      	ldr	r3, [r7, #12]
 800101c:	6819      	ldr	r1, [r3, #0]
 800101e:	68ba      	ldr	r2, [r7, #8]
 8001020:	23dc      	movs	r3, #220	; 0xdc
 8001022:	005b      	lsls	r3, r3, #1
 8001024:	0112      	lsls	r2, r2, #4
 8001026:	188a      	adds	r2, r1, r2
 8001028:	18d3      	adds	r3, r2, r3
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	0e1a      	lsrs	r2, r3, #24
 800102e:	683b      	ldr	r3, [r7, #0]
 8001030:	3303      	adds	r3, #3
 8001032:	b2d2      	uxtb	r2, r2
 8001034:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8001036:	68fb      	ldr	r3, [r7, #12]
 8001038:	6819      	ldr	r1, [r3, #0]
 800103a:	68ba      	ldr	r2, [r7, #8]
 800103c:	23de      	movs	r3, #222	; 0xde
 800103e:	005b      	lsls	r3, r3, #1
 8001040:	0112      	lsls	r2, r2, #4
 8001042:	188a      	adds	r2, r1, r2
 8001044:	18d3      	adds	r3, r2, r3
 8001046:	681a      	ldr	r2, [r3, #0]
 8001048:	683b      	ldr	r3, [r7, #0]
 800104a:	3304      	adds	r3, #4
 800104c:	b2d2      	uxtb	r2, r2
 800104e:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8001050:	68fb      	ldr	r3, [r7, #12]
 8001052:	6819      	ldr	r1, [r3, #0]
 8001054:	68ba      	ldr	r2, [r7, #8]
 8001056:	23de      	movs	r3, #222	; 0xde
 8001058:	005b      	lsls	r3, r3, #1
 800105a:	0112      	lsls	r2, r2, #4
 800105c:	188a      	adds	r2, r1, r2
 800105e:	18d3      	adds	r3, r2, r3
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	0a1a      	lsrs	r2, r3, #8
 8001064:	683b      	ldr	r3, [r7, #0]
 8001066:	3305      	adds	r3, #5
 8001068:	b2d2      	uxtb	r2, r2
 800106a:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 800106c:	68fb      	ldr	r3, [r7, #12]
 800106e:	6819      	ldr	r1, [r3, #0]
 8001070:	68ba      	ldr	r2, [r7, #8]
 8001072:	23de      	movs	r3, #222	; 0xde
 8001074:	005b      	lsls	r3, r3, #1
 8001076:	0112      	lsls	r2, r2, #4
 8001078:	188a      	adds	r2, r1, r2
 800107a:	18d3      	adds	r3, r2, r3
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	0c1a      	lsrs	r2, r3, #16
 8001080:	683b      	ldr	r3, [r7, #0]
 8001082:	3306      	adds	r3, #6
 8001084:	b2d2      	uxtb	r2, r2
 8001086:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8001088:	68fb      	ldr	r3, [r7, #12]
 800108a:	6819      	ldr	r1, [r3, #0]
 800108c:	68ba      	ldr	r2, [r7, #8]
 800108e:	23de      	movs	r3, #222	; 0xde
 8001090:	005b      	lsls	r3, r3, #1
 8001092:	0112      	lsls	r2, r2, #4
 8001094:	188a      	adds	r2, r1, r2
 8001096:	18d3      	adds	r3, r2, r3
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	0e1a      	lsrs	r2, r3, #24
 800109c:	683b      	ldr	r3, [r7, #0]
 800109e:	3307      	adds	r3, #7
 80010a0:	b2d2      	uxtb	r2, r2
 80010a2:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80010a4:	68bb      	ldr	r3, [r7, #8]
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d108      	bne.n	80010bc <HAL_CAN_GetRxMessage+0x20c>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 80010aa:	68fb      	ldr	r3, [r7, #12]
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	68da      	ldr	r2, [r3, #12]
 80010b0:	68fb      	ldr	r3, [r7, #12]
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	2120      	movs	r1, #32
 80010b6:	430a      	orrs	r2, r1
 80010b8:	60da      	str	r2, [r3, #12]
 80010ba:	e007      	b.n	80010cc <HAL_CAN_GetRxMessage+0x21c>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 80010bc:	68fb      	ldr	r3, [r7, #12]
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	691a      	ldr	r2, [r3, #16]
 80010c2:	68fb      	ldr	r3, [r7, #12]
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	2120      	movs	r1, #32
 80010c8:	430a      	orrs	r2, r1
 80010ca:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 80010cc:	2300      	movs	r3, #0
 80010ce:	e007      	b.n	80010e0 <HAL_CAN_GetRxMessage+0x230>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80010d0:	68fb      	ldr	r3, [r7, #12]
 80010d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010d4:	2280      	movs	r2, #128	; 0x80
 80010d6:	02d2      	lsls	r2, r2, #11
 80010d8:	431a      	orrs	r2, r3
 80010da:	68fb      	ldr	r3, [r7, #12]
 80010dc:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80010de:	2301      	movs	r3, #1
  }
}
 80010e0:	0018      	movs	r0, r3
 80010e2:	46bd      	mov	sp, r7
 80010e4:	b006      	add	sp, #24
 80010e6:	bd80      	pop	{r7, pc}

080010e8 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b084      	sub	sp, #16
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]
 80010f0:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80010f2:	200f      	movs	r0, #15
 80010f4:	183b      	adds	r3, r7, r0
 80010f6:	687a      	ldr	r2, [r7, #4]
 80010f8:	2120      	movs	r1, #32
 80010fa:	5c52      	ldrb	r2, [r2, r1]
 80010fc:	701a      	strb	r2, [r3, #0]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 80010fe:	183b      	adds	r3, r7, r0
 8001100:	781b      	ldrb	r3, [r3, #0]
 8001102:	2b01      	cmp	r3, #1
 8001104:	d004      	beq.n	8001110 <HAL_CAN_ActivateNotification+0x28>
 8001106:	230f      	movs	r3, #15
 8001108:	18fb      	adds	r3, r7, r3
 800110a:	781b      	ldrb	r3, [r3, #0]
 800110c:	2b02      	cmp	r3, #2
 800110e:	d109      	bne.n	8001124 <HAL_CAN_ActivateNotification+0x3c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	6959      	ldr	r1, [r3, #20]
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	683a      	ldr	r2, [r7, #0]
 800111c:	430a      	orrs	r2, r1
 800111e:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8001120:	2300      	movs	r3, #0
 8001122:	e007      	b.n	8001134 <HAL_CAN_ActivateNotification+0x4c>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001128:	2280      	movs	r2, #128	; 0x80
 800112a:	02d2      	lsls	r2, r2, #11
 800112c:	431a      	orrs	r2, r3
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001132:	2301      	movs	r3, #1
  }
}
 8001134:	0018      	movs	r0, r3
 8001136:	46bd      	mov	sp, r7
 8001138:	b004      	add	sp, #16
 800113a:	bd80      	pop	{r7, pc}

0800113c <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	b08a      	sub	sp, #40	; 0x28
 8001140:	af00      	add	r7, sp, #0
 8001142:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8001144:	2300      	movs	r3, #0
 8001146:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	695b      	ldr	r3, [r3, #20]
 800114e:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	685b      	ldr	r3, [r3, #4]
 8001156:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	689b      	ldr	r3, [r3, #8]
 800115e:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	68db      	ldr	r3, [r3, #12]
 8001166:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	691b      	ldr	r3, [r3, #16]
 800116e:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	699b      	ldr	r3, [r3, #24]
 8001176:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8001178:	6a3b      	ldr	r3, [r7, #32]
 800117a:	2201      	movs	r2, #1
 800117c:	4013      	ands	r3, r2
 800117e:	d100      	bne.n	8001182 <HAL_CAN_IRQHandler+0x46>
 8001180:	e084      	b.n	800128c <HAL_CAN_IRQHandler+0x150>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8001182:	69bb      	ldr	r3, [r7, #24]
 8001184:	2201      	movs	r2, #1
 8001186:	4013      	ands	r3, r2
 8001188:	d024      	beq.n	80011d4 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	2201      	movs	r2, #1
 8001190:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8001192:	69bb      	ldr	r3, [r7, #24]
 8001194:	2202      	movs	r2, #2
 8001196:	4013      	ands	r3, r2
 8001198:	d004      	beq.n	80011a4 <HAL_CAN_IRQHandler+0x68>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	0018      	movs	r0, r3
 800119e:	f000 f97e 	bl	800149e <HAL_CAN_TxMailbox0CompleteCallback>
 80011a2:	e017      	b.n	80011d4 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 80011a4:	69bb      	ldr	r3, [r7, #24]
 80011a6:	2204      	movs	r2, #4
 80011a8:	4013      	ands	r3, r2
 80011aa:	d005      	beq.n	80011b8 <HAL_CAN_IRQHandler+0x7c>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 80011ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011ae:	2280      	movs	r2, #128	; 0x80
 80011b0:	0112      	lsls	r2, r2, #4
 80011b2:	4313      	orrs	r3, r2
 80011b4:	627b      	str	r3, [r7, #36]	; 0x24
 80011b6:	e00d      	b.n	80011d4 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80011b8:	69bb      	ldr	r3, [r7, #24]
 80011ba:	2208      	movs	r2, #8
 80011bc:	4013      	ands	r3, r2
 80011be:	d005      	beq.n	80011cc <HAL_CAN_IRQHandler+0x90>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80011c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011c2:	2280      	movs	r2, #128	; 0x80
 80011c4:	0152      	lsls	r2, r2, #5
 80011c6:	4313      	orrs	r3, r2
 80011c8:	627b      	str	r3, [r7, #36]	; 0x24
 80011ca:	e003      	b.n	80011d4 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	0018      	movs	r0, r3
 80011d0:	f000 f97d 	bl	80014ce <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80011d4:	69ba      	ldr	r2, [r7, #24]
 80011d6:	2380      	movs	r3, #128	; 0x80
 80011d8:	005b      	lsls	r3, r3, #1
 80011da:	4013      	ands	r3, r2
 80011dc:	d028      	beq.n	8001230 <HAL_CAN_IRQHandler+0xf4>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	2280      	movs	r2, #128	; 0x80
 80011e4:	0052      	lsls	r2, r2, #1
 80011e6:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80011e8:	69ba      	ldr	r2, [r7, #24]
 80011ea:	2380      	movs	r3, #128	; 0x80
 80011ec:	009b      	lsls	r3, r3, #2
 80011ee:	4013      	ands	r3, r2
 80011f0:	d004      	beq.n	80011fc <HAL_CAN_IRQHandler+0xc0>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	0018      	movs	r0, r3
 80011f6:	f000 f95a 	bl	80014ae <HAL_CAN_TxMailbox1CompleteCallback>
 80011fa:	e019      	b.n	8001230 <HAL_CAN_IRQHandler+0xf4>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80011fc:	69ba      	ldr	r2, [r7, #24]
 80011fe:	2380      	movs	r3, #128	; 0x80
 8001200:	00db      	lsls	r3, r3, #3
 8001202:	4013      	ands	r3, r2
 8001204:	d005      	beq.n	8001212 <HAL_CAN_IRQHandler+0xd6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8001206:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001208:	2280      	movs	r2, #128	; 0x80
 800120a:	0192      	lsls	r2, r2, #6
 800120c:	4313      	orrs	r3, r2
 800120e:	627b      	str	r3, [r7, #36]	; 0x24
 8001210:	e00e      	b.n	8001230 <HAL_CAN_IRQHandler+0xf4>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8001212:	69ba      	ldr	r2, [r7, #24]
 8001214:	2380      	movs	r3, #128	; 0x80
 8001216:	011b      	lsls	r3, r3, #4
 8001218:	4013      	ands	r3, r2
 800121a:	d005      	beq.n	8001228 <HAL_CAN_IRQHandler+0xec>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 800121c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800121e:	2280      	movs	r2, #128	; 0x80
 8001220:	01d2      	lsls	r2, r2, #7
 8001222:	4313      	orrs	r3, r2
 8001224:	627b      	str	r3, [r7, #36]	; 0x24
 8001226:	e003      	b.n	8001230 <HAL_CAN_IRQHandler+0xf4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	0018      	movs	r0, r3
 800122c:	f000 f957 	bl	80014de <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8001230:	69ba      	ldr	r2, [r7, #24]
 8001232:	2380      	movs	r3, #128	; 0x80
 8001234:	025b      	lsls	r3, r3, #9
 8001236:	4013      	ands	r3, r2
 8001238:	d028      	beq.n	800128c <HAL_CAN_IRQHandler+0x150>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	2280      	movs	r2, #128	; 0x80
 8001240:	0252      	lsls	r2, r2, #9
 8001242:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8001244:	69ba      	ldr	r2, [r7, #24]
 8001246:	2380      	movs	r3, #128	; 0x80
 8001248:	029b      	lsls	r3, r3, #10
 800124a:	4013      	ands	r3, r2
 800124c:	d004      	beq.n	8001258 <HAL_CAN_IRQHandler+0x11c>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	0018      	movs	r0, r3
 8001252:	f000 f934 	bl	80014be <HAL_CAN_TxMailbox2CompleteCallback>
 8001256:	e019      	b.n	800128c <HAL_CAN_IRQHandler+0x150>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8001258:	69ba      	ldr	r2, [r7, #24]
 800125a:	2380      	movs	r3, #128	; 0x80
 800125c:	02db      	lsls	r3, r3, #11
 800125e:	4013      	ands	r3, r2
 8001260:	d005      	beq.n	800126e <HAL_CAN_IRQHandler+0x132>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8001262:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001264:	2280      	movs	r2, #128	; 0x80
 8001266:	0212      	lsls	r2, r2, #8
 8001268:	4313      	orrs	r3, r2
 800126a:	627b      	str	r3, [r7, #36]	; 0x24
 800126c:	e00e      	b.n	800128c <HAL_CAN_IRQHandler+0x150>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 800126e:	69ba      	ldr	r2, [r7, #24]
 8001270:	2380      	movs	r3, #128	; 0x80
 8001272:	031b      	lsls	r3, r3, #12
 8001274:	4013      	ands	r3, r2
 8001276:	d005      	beq.n	8001284 <HAL_CAN_IRQHandler+0x148>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8001278:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800127a:	2280      	movs	r2, #128	; 0x80
 800127c:	0252      	lsls	r2, r2, #9
 800127e:	4313      	orrs	r3, r2
 8001280:	627b      	str	r3, [r7, #36]	; 0x24
 8001282:	e003      	b.n	800128c <HAL_CAN_IRQHandler+0x150>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	0018      	movs	r0, r3
 8001288:	f000 f931 	bl	80014ee <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 800128c:	6a3b      	ldr	r3, [r7, #32]
 800128e:	2208      	movs	r2, #8
 8001290:	4013      	ands	r3, r2
 8001292:	d00c      	beq.n	80012ae <HAL_CAN_IRQHandler+0x172>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8001294:	697b      	ldr	r3, [r7, #20]
 8001296:	2210      	movs	r2, #16
 8001298:	4013      	ands	r3, r2
 800129a:	d008      	beq.n	80012ae <HAL_CAN_IRQHandler+0x172>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 800129c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800129e:	2280      	movs	r2, #128	; 0x80
 80012a0:	0092      	lsls	r2, r2, #2
 80012a2:	4313      	orrs	r3, r2
 80012a4:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	2210      	movs	r2, #16
 80012ac:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 80012ae:	6a3b      	ldr	r3, [r7, #32]
 80012b0:	2204      	movs	r2, #4
 80012b2:	4013      	ands	r3, r2
 80012b4:	d00b      	beq.n	80012ce <HAL_CAN_IRQHandler+0x192>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80012b6:	697b      	ldr	r3, [r7, #20]
 80012b8:	2208      	movs	r2, #8
 80012ba:	4013      	ands	r3, r2
 80012bc:	d007      	beq.n	80012ce <HAL_CAN_IRQHandler+0x192>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	2208      	movs	r2, #8
 80012c4:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	0018      	movs	r0, r3
 80012ca:	f000 f920 	bl	800150e <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80012ce:	6a3b      	ldr	r3, [r7, #32]
 80012d0:	2202      	movs	r2, #2
 80012d2:	4013      	ands	r3, r2
 80012d4:	d009      	beq.n	80012ea <HAL_CAN_IRQHandler+0x1ae>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	68db      	ldr	r3, [r3, #12]
 80012dc:	2203      	movs	r2, #3
 80012de:	4013      	ands	r3, r2
 80012e0:	d003      	beq.n	80012ea <HAL_CAN_IRQHandler+0x1ae>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	0018      	movs	r0, r3
 80012e6:	f000 f90a 	bl	80014fe <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80012ea:	6a3b      	ldr	r3, [r7, #32]
 80012ec:	2240      	movs	r2, #64	; 0x40
 80012ee:	4013      	ands	r3, r2
 80012f0:	d00c      	beq.n	800130c <HAL_CAN_IRQHandler+0x1d0>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80012f2:	693b      	ldr	r3, [r7, #16]
 80012f4:	2210      	movs	r2, #16
 80012f6:	4013      	ands	r3, r2
 80012f8:	d008      	beq.n	800130c <HAL_CAN_IRQHandler+0x1d0>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80012fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012fc:	2280      	movs	r2, #128	; 0x80
 80012fe:	00d2      	lsls	r2, r2, #3
 8001300:	4313      	orrs	r3, r2
 8001302:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	2210      	movs	r2, #16
 800130a:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 800130c:	6a3b      	ldr	r3, [r7, #32]
 800130e:	2220      	movs	r2, #32
 8001310:	4013      	ands	r3, r2
 8001312:	d00b      	beq.n	800132c <HAL_CAN_IRQHandler+0x1f0>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8001314:	693b      	ldr	r3, [r7, #16]
 8001316:	2208      	movs	r2, #8
 8001318:	4013      	ands	r3, r2
 800131a:	d007      	beq.n	800132c <HAL_CAN_IRQHandler+0x1f0>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	2208      	movs	r2, #8
 8001322:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	0018      	movs	r0, r3
 8001328:	f000 f901 	bl	800152e <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 800132c:	6a3b      	ldr	r3, [r7, #32]
 800132e:	2210      	movs	r2, #16
 8001330:	4013      	ands	r3, r2
 8001332:	d009      	beq.n	8001348 <HAL_CAN_IRQHandler+0x20c>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	691b      	ldr	r3, [r3, #16]
 800133a:	2203      	movs	r2, #3
 800133c:	4013      	ands	r3, r2
 800133e:	d003      	beq.n	8001348 <HAL_CAN_IRQHandler+0x20c>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	0018      	movs	r0, r3
 8001344:	f000 f8eb 	bl	800151e <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8001348:	6a3a      	ldr	r2, [r7, #32]
 800134a:	2380      	movs	r3, #128	; 0x80
 800134c:	029b      	lsls	r3, r3, #10
 800134e:	4013      	ands	r3, r2
 8001350:	d00b      	beq.n	800136a <HAL_CAN_IRQHandler+0x22e>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8001352:	69fb      	ldr	r3, [r7, #28]
 8001354:	2210      	movs	r2, #16
 8001356:	4013      	ands	r3, r2
 8001358:	d007      	beq.n	800136a <HAL_CAN_IRQHandler+0x22e>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	2210      	movs	r2, #16
 8001360:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	0018      	movs	r0, r3
 8001366:	f000 f8ea 	bl	800153e <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 800136a:	6a3a      	ldr	r2, [r7, #32]
 800136c:	2380      	movs	r3, #128	; 0x80
 800136e:	025b      	lsls	r3, r3, #9
 8001370:	4013      	ands	r3, r2
 8001372:	d00b      	beq.n	800138c <HAL_CAN_IRQHandler+0x250>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8001374:	69fb      	ldr	r3, [r7, #28]
 8001376:	2208      	movs	r2, #8
 8001378:	4013      	ands	r3, r2
 800137a:	d007      	beq.n	800138c <HAL_CAN_IRQHandler+0x250>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	2208      	movs	r2, #8
 8001382:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	0018      	movs	r0, r3
 8001388:	f000 f8e1 	bl	800154e <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 800138c:	6a3a      	ldr	r2, [r7, #32]
 800138e:	2380      	movs	r3, #128	; 0x80
 8001390:	021b      	lsls	r3, r3, #8
 8001392:	4013      	ands	r3, r2
 8001394:	d100      	bne.n	8001398 <HAL_CAN_IRQHandler+0x25c>
 8001396:	e071      	b.n	800147c <HAL_CAN_IRQHandler+0x340>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8001398:	69fb      	ldr	r3, [r7, #28]
 800139a:	2204      	movs	r2, #4
 800139c:	4013      	ands	r3, r2
 800139e:	d100      	bne.n	80013a2 <HAL_CAN_IRQHandler+0x266>
 80013a0:	e068      	b.n	8001474 <HAL_CAN_IRQHandler+0x338>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80013a2:	6a3a      	ldr	r2, [r7, #32]
 80013a4:	2380      	movs	r3, #128	; 0x80
 80013a6:	005b      	lsls	r3, r3, #1
 80013a8:	4013      	ands	r3, r2
 80013aa:	d007      	beq.n	80013bc <HAL_CAN_IRQHandler+0x280>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 80013ac:	68fb      	ldr	r3, [r7, #12]
 80013ae:	2201      	movs	r2, #1
 80013b0:	4013      	ands	r3, r2
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80013b2:	d003      	beq.n	80013bc <HAL_CAN_IRQHandler+0x280>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 80013b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013b6:	2201      	movs	r2, #1
 80013b8:	4313      	orrs	r3, r2
 80013ba:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80013bc:	6a3a      	ldr	r2, [r7, #32]
 80013be:	2380      	movs	r3, #128	; 0x80
 80013c0:	009b      	lsls	r3, r3, #2
 80013c2:	4013      	ands	r3, r2
 80013c4:	d007      	beq.n	80013d6 <HAL_CAN_IRQHandler+0x29a>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 80013c6:	68fb      	ldr	r3, [r7, #12]
 80013c8:	2202      	movs	r2, #2
 80013ca:	4013      	ands	r3, r2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80013cc:	d003      	beq.n	80013d6 <HAL_CAN_IRQHandler+0x29a>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 80013ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013d0:	2202      	movs	r2, #2
 80013d2:	4313      	orrs	r3, r2
 80013d4:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80013d6:	6a3a      	ldr	r2, [r7, #32]
 80013d8:	2380      	movs	r3, #128	; 0x80
 80013da:	00db      	lsls	r3, r3, #3
 80013dc:	4013      	ands	r3, r2
 80013de:	d007      	beq.n	80013f0 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 80013e0:	68fb      	ldr	r3, [r7, #12]
 80013e2:	2204      	movs	r2, #4
 80013e4:	4013      	ands	r3, r2
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80013e6:	d003      	beq.n	80013f0 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80013e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013ea:	2204      	movs	r2, #4
 80013ec:	4313      	orrs	r3, r2
 80013ee:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80013f0:	6a3a      	ldr	r2, [r7, #32]
 80013f2:	2380      	movs	r3, #128	; 0x80
 80013f4:	011b      	lsls	r3, r3, #4
 80013f6:	4013      	ands	r3, r2
 80013f8:	d03c      	beq.n	8001474 <HAL_CAN_IRQHandler+0x338>
          ((esrflags & CAN_ESR_LEC) != 0U))
 80013fa:	68fb      	ldr	r3, [r7, #12]
 80013fc:	2270      	movs	r2, #112	; 0x70
 80013fe:	4013      	ands	r3, r2
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001400:	d038      	beq.n	8001474 <HAL_CAN_IRQHandler+0x338>
      {
        switch (esrflags & CAN_ESR_LEC)
 8001402:	68fb      	ldr	r3, [r7, #12]
 8001404:	2270      	movs	r2, #112	; 0x70
 8001406:	4013      	ands	r3, r2
 8001408:	2b30      	cmp	r3, #48	; 0x30
 800140a:	d016      	beq.n	800143a <HAL_CAN_IRQHandler+0x2fe>
 800140c:	d804      	bhi.n	8001418 <HAL_CAN_IRQHandler+0x2dc>
 800140e:	2b10      	cmp	r3, #16
 8001410:	d009      	beq.n	8001426 <HAL_CAN_IRQHandler+0x2ea>
 8001412:	2b20      	cmp	r3, #32
 8001414:	d00c      	beq.n	8001430 <HAL_CAN_IRQHandler+0x2f4>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8001416:	e025      	b.n	8001464 <HAL_CAN_IRQHandler+0x328>
        switch (esrflags & CAN_ESR_LEC)
 8001418:	2b50      	cmp	r3, #80	; 0x50
 800141a:	d018      	beq.n	800144e <HAL_CAN_IRQHandler+0x312>
 800141c:	2b60      	cmp	r3, #96	; 0x60
 800141e:	d01b      	beq.n	8001458 <HAL_CAN_IRQHandler+0x31c>
 8001420:	2b40      	cmp	r3, #64	; 0x40
 8001422:	d00f      	beq.n	8001444 <HAL_CAN_IRQHandler+0x308>
            break;
 8001424:	e01e      	b.n	8001464 <HAL_CAN_IRQHandler+0x328>
            errorcode |= HAL_CAN_ERROR_STF;
 8001426:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001428:	2208      	movs	r2, #8
 800142a:	4313      	orrs	r3, r2
 800142c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800142e:	e019      	b.n	8001464 <HAL_CAN_IRQHandler+0x328>
            errorcode |= HAL_CAN_ERROR_FOR;
 8001430:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001432:	2210      	movs	r2, #16
 8001434:	4313      	orrs	r3, r2
 8001436:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001438:	e014      	b.n	8001464 <HAL_CAN_IRQHandler+0x328>
            errorcode |= HAL_CAN_ERROR_ACK;
 800143a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800143c:	2220      	movs	r2, #32
 800143e:	4313      	orrs	r3, r2
 8001440:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001442:	e00f      	b.n	8001464 <HAL_CAN_IRQHandler+0x328>
            errorcode |= HAL_CAN_ERROR_BR;
 8001444:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001446:	2240      	movs	r2, #64	; 0x40
 8001448:	4313      	orrs	r3, r2
 800144a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800144c:	e00a      	b.n	8001464 <HAL_CAN_IRQHandler+0x328>
            errorcode |= HAL_CAN_ERROR_BD;
 800144e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001450:	2280      	movs	r2, #128	; 0x80
 8001452:	4313      	orrs	r3, r2
 8001454:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001456:	e005      	b.n	8001464 <HAL_CAN_IRQHandler+0x328>
            errorcode |= HAL_CAN_ERROR_CRC;
 8001458:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800145a:	2280      	movs	r2, #128	; 0x80
 800145c:	0052      	lsls	r2, r2, #1
 800145e:	4313      	orrs	r3, r2
 8001460:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001462:	46c0      	nop			; (mov r8, r8)
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	699a      	ldr	r2, [r3, #24]
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	2170      	movs	r1, #112	; 0x70
 8001470:	438a      	bics	r2, r1
 8001472:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	2204      	movs	r2, #4
 800147a:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 800147c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800147e:	2b00      	cmp	r3, #0
 8001480:	d009      	beq.n	8001496 <HAL_CAN_IRQHandler+0x35a>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001486:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001488:	431a      	orrs	r2, r3
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	0018      	movs	r0, r3
 8001492:	f000 f864 	bl	800155e <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8001496:	46c0      	nop			; (mov r8, r8)
 8001498:	46bd      	mov	sp, r7
 800149a:	b00a      	add	sp, #40	; 0x28
 800149c:	bd80      	pop	{r7, pc}

0800149e <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800149e:	b580      	push	{r7, lr}
 80014a0:	b082      	sub	sp, #8
 80014a2:	af00      	add	r7, sp, #0
 80014a4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 80014a6:	46c0      	nop			; (mov r8, r8)
 80014a8:	46bd      	mov	sp, r7
 80014aa:	b002      	add	sp, #8
 80014ac:	bd80      	pop	{r7, pc}

080014ae <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80014ae:	b580      	push	{r7, lr}
 80014b0:	b082      	sub	sp, #8
 80014b2:	af00      	add	r7, sp, #0
 80014b4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 80014b6:	46c0      	nop			; (mov r8, r8)
 80014b8:	46bd      	mov	sp, r7
 80014ba:	b002      	add	sp, #8
 80014bc:	bd80      	pop	{r7, pc}

080014be <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80014be:	b580      	push	{r7, lr}
 80014c0:	b082      	sub	sp, #8
 80014c2:	af00      	add	r7, sp, #0
 80014c4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 80014c6:	46c0      	nop			; (mov r8, r8)
 80014c8:	46bd      	mov	sp, r7
 80014ca:	b002      	add	sp, #8
 80014cc:	bd80      	pop	{r7, pc}

080014ce <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 80014ce:	b580      	push	{r7, lr}
 80014d0:	b082      	sub	sp, #8
 80014d2:	af00      	add	r7, sp, #0
 80014d4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 80014d6:	46c0      	nop			; (mov r8, r8)
 80014d8:	46bd      	mov	sp, r7
 80014da:	b002      	add	sp, #8
 80014dc:	bd80      	pop	{r7, pc}

080014de <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 80014de:	b580      	push	{r7, lr}
 80014e0:	b082      	sub	sp, #8
 80014e2:	af00      	add	r7, sp, #0
 80014e4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 80014e6:	46c0      	nop			; (mov r8, r8)
 80014e8:	46bd      	mov	sp, r7
 80014ea:	b002      	add	sp, #8
 80014ec:	bd80      	pop	{r7, pc}

080014ee <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 80014ee:	b580      	push	{r7, lr}
 80014f0:	b082      	sub	sp, #8
 80014f2:	af00      	add	r7, sp, #0
 80014f4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 80014f6:	46c0      	nop			; (mov r8, r8)
 80014f8:	46bd      	mov	sp, r7
 80014fa:	b002      	add	sp, #8
 80014fc:	bd80      	pop	{r7, pc}

080014fe <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80014fe:	b580      	push	{r7, lr}
 8001500:	b082      	sub	sp, #8
 8001502:	af00      	add	r7, sp, #0
 8001504:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 8001506:	46c0      	nop			; (mov r8, r8)
 8001508:	46bd      	mov	sp, r7
 800150a:	b002      	add	sp, #8
 800150c:	bd80      	pop	{r7, pc}

0800150e <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 800150e:	b580      	push	{r7, lr}
 8001510:	b082      	sub	sp, #8
 8001512:	af00      	add	r7, sp, #0
 8001514:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8001516:	46c0      	nop			; (mov r8, r8)
 8001518:	46bd      	mov	sp, r7
 800151a:	b002      	add	sp, #8
 800151c:	bd80      	pop	{r7, pc}

0800151e <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800151e:	b580      	push	{r7, lr}
 8001520:	b082      	sub	sp, #8
 8001522:	af00      	add	r7, sp, #0
 8001524:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8001526:	46c0      	nop			; (mov r8, r8)
 8001528:	46bd      	mov	sp, r7
 800152a:	b002      	add	sp, #8
 800152c:	bd80      	pop	{r7, pc}

0800152e <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 800152e:	b580      	push	{r7, lr}
 8001530:	b082      	sub	sp, #8
 8001532:	af00      	add	r7, sp, #0
 8001534:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8001536:	46c0      	nop			; (mov r8, r8)
 8001538:	46bd      	mov	sp, r7
 800153a:	b002      	add	sp, #8
 800153c:	bd80      	pop	{r7, pc}

0800153e <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 800153e:	b580      	push	{r7, lr}
 8001540:	b082      	sub	sp, #8
 8001542:	af00      	add	r7, sp, #0
 8001544:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8001546:	46c0      	nop			; (mov r8, r8)
 8001548:	46bd      	mov	sp, r7
 800154a:	b002      	add	sp, #8
 800154c:	bd80      	pop	{r7, pc}

0800154e <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 800154e:	b580      	push	{r7, lr}
 8001550:	b082      	sub	sp, #8
 8001552:	af00      	add	r7, sp, #0
 8001554:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8001556:	46c0      	nop			; (mov r8, r8)
 8001558:	46bd      	mov	sp, r7
 800155a:	b002      	add	sp, #8
 800155c:	bd80      	pop	{r7, pc}

0800155e <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 800155e:	b580      	push	{r7, lr}
 8001560:	b082      	sub	sp, #8
 8001562:	af00      	add	r7, sp, #0
 8001564:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8001566:	46c0      	nop			; (mov r8, r8)
 8001568:	46bd      	mov	sp, r7
 800156a:	b002      	add	sp, #8
 800156c:	bd80      	pop	{r7, pc}
	...

08001570 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	b082      	sub	sp, #8
 8001574:	af00      	add	r7, sp, #0
 8001576:	0002      	movs	r2, r0
 8001578:	1dfb      	adds	r3, r7, #7
 800157a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800157c:	1dfb      	adds	r3, r7, #7
 800157e:	781b      	ldrb	r3, [r3, #0]
 8001580:	2b7f      	cmp	r3, #127	; 0x7f
 8001582:	d809      	bhi.n	8001598 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001584:	1dfb      	adds	r3, r7, #7
 8001586:	781b      	ldrb	r3, [r3, #0]
 8001588:	001a      	movs	r2, r3
 800158a:	231f      	movs	r3, #31
 800158c:	401a      	ands	r2, r3
 800158e:	4b04      	ldr	r3, [pc, #16]	; (80015a0 <__NVIC_EnableIRQ+0x30>)
 8001590:	2101      	movs	r1, #1
 8001592:	4091      	lsls	r1, r2
 8001594:	000a      	movs	r2, r1
 8001596:	601a      	str	r2, [r3, #0]
  }
}
 8001598:	46c0      	nop			; (mov r8, r8)
 800159a:	46bd      	mov	sp, r7
 800159c:	b002      	add	sp, #8
 800159e:	bd80      	pop	{r7, pc}
 80015a0:	e000e100 	.word	0xe000e100

080015a4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80015a4:	b590      	push	{r4, r7, lr}
 80015a6:	b083      	sub	sp, #12
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	0002      	movs	r2, r0
 80015ac:	6039      	str	r1, [r7, #0]
 80015ae:	1dfb      	adds	r3, r7, #7
 80015b0:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80015b2:	1dfb      	adds	r3, r7, #7
 80015b4:	781b      	ldrb	r3, [r3, #0]
 80015b6:	2b7f      	cmp	r3, #127	; 0x7f
 80015b8:	d828      	bhi.n	800160c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80015ba:	4a2f      	ldr	r2, [pc, #188]	; (8001678 <__NVIC_SetPriority+0xd4>)
 80015bc:	1dfb      	adds	r3, r7, #7
 80015be:	781b      	ldrb	r3, [r3, #0]
 80015c0:	b25b      	sxtb	r3, r3
 80015c2:	089b      	lsrs	r3, r3, #2
 80015c4:	33c0      	adds	r3, #192	; 0xc0
 80015c6:	009b      	lsls	r3, r3, #2
 80015c8:	589b      	ldr	r3, [r3, r2]
 80015ca:	1dfa      	adds	r2, r7, #7
 80015cc:	7812      	ldrb	r2, [r2, #0]
 80015ce:	0011      	movs	r1, r2
 80015d0:	2203      	movs	r2, #3
 80015d2:	400a      	ands	r2, r1
 80015d4:	00d2      	lsls	r2, r2, #3
 80015d6:	21ff      	movs	r1, #255	; 0xff
 80015d8:	4091      	lsls	r1, r2
 80015da:	000a      	movs	r2, r1
 80015dc:	43d2      	mvns	r2, r2
 80015de:	401a      	ands	r2, r3
 80015e0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80015e2:	683b      	ldr	r3, [r7, #0]
 80015e4:	019b      	lsls	r3, r3, #6
 80015e6:	22ff      	movs	r2, #255	; 0xff
 80015e8:	401a      	ands	r2, r3
 80015ea:	1dfb      	adds	r3, r7, #7
 80015ec:	781b      	ldrb	r3, [r3, #0]
 80015ee:	0018      	movs	r0, r3
 80015f0:	2303      	movs	r3, #3
 80015f2:	4003      	ands	r3, r0
 80015f4:	00db      	lsls	r3, r3, #3
 80015f6:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80015f8:	481f      	ldr	r0, [pc, #124]	; (8001678 <__NVIC_SetPriority+0xd4>)
 80015fa:	1dfb      	adds	r3, r7, #7
 80015fc:	781b      	ldrb	r3, [r3, #0]
 80015fe:	b25b      	sxtb	r3, r3
 8001600:	089b      	lsrs	r3, r3, #2
 8001602:	430a      	orrs	r2, r1
 8001604:	33c0      	adds	r3, #192	; 0xc0
 8001606:	009b      	lsls	r3, r3, #2
 8001608:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800160a:	e031      	b.n	8001670 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800160c:	4a1b      	ldr	r2, [pc, #108]	; (800167c <__NVIC_SetPriority+0xd8>)
 800160e:	1dfb      	adds	r3, r7, #7
 8001610:	781b      	ldrb	r3, [r3, #0]
 8001612:	0019      	movs	r1, r3
 8001614:	230f      	movs	r3, #15
 8001616:	400b      	ands	r3, r1
 8001618:	3b08      	subs	r3, #8
 800161a:	089b      	lsrs	r3, r3, #2
 800161c:	3306      	adds	r3, #6
 800161e:	009b      	lsls	r3, r3, #2
 8001620:	18d3      	adds	r3, r2, r3
 8001622:	3304      	adds	r3, #4
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	1dfa      	adds	r2, r7, #7
 8001628:	7812      	ldrb	r2, [r2, #0]
 800162a:	0011      	movs	r1, r2
 800162c:	2203      	movs	r2, #3
 800162e:	400a      	ands	r2, r1
 8001630:	00d2      	lsls	r2, r2, #3
 8001632:	21ff      	movs	r1, #255	; 0xff
 8001634:	4091      	lsls	r1, r2
 8001636:	000a      	movs	r2, r1
 8001638:	43d2      	mvns	r2, r2
 800163a:	401a      	ands	r2, r3
 800163c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800163e:	683b      	ldr	r3, [r7, #0]
 8001640:	019b      	lsls	r3, r3, #6
 8001642:	22ff      	movs	r2, #255	; 0xff
 8001644:	401a      	ands	r2, r3
 8001646:	1dfb      	adds	r3, r7, #7
 8001648:	781b      	ldrb	r3, [r3, #0]
 800164a:	0018      	movs	r0, r3
 800164c:	2303      	movs	r3, #3
 800164e:	4003      	ands	r3, r0
 8001650:	00db      	lsls	r3, r3, #3
 8001652:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001654:	4809      	ldr	r0, [pc, #36]	; (800167c <__NVIC_SetPriority+0xd8>)
 8001656:	1dfb      	adds	r3, r7, #7
 8001658:	781b      	ldrb	r3, [r3, #0]
 800165a:	001c      	movs	r4, r3
 800165c:	230f      	movs	r3, #15
 800165e:	4023      	ands	r3, r4
 8001660:	3b08      	subs	r3, #8
 8001662:	089b      	lsrs	r3, r3, #2
 8001664:	430a      	orrs	r2, r1
 8001666:	3306      	adds	r3, #6
 8001668:	009b      	lsls	r3, r3, #2
 800166a:	18c3      	adds	r3, r0, r3
 800166c:	3304      	adds	r3, #4
 800166e:	601a      	str	r2, [r3, #0]
}
 8001670:	46c0      	nop			; (mov r8, r8)
 8001672:	46bd      	mov	sp, r7
 8001674:	b003      	add	sp, #12
 8001676:	bd90      	pop	{r4, r7, pc}
 8001678:	e000e100 	.word	0xe000e100
 800167c:	e000ed00 	.word	0xe000ed00

08001680 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001680:	b580      	push	{r7, lr}
 8001682:	b082      	sub	sp, #8
 8001684:	af00      	add	r7, sp, #0
 8001686:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	3b01      	subs	r3, #1
 800168c:	4a0c      	ldr	r2, [pc, #48]	; (80016c0 <SysTick_Config+0x40>)
 800168e:	4293      	cmp	r3, r2
 8001690:	d901      	bls.n	8001696 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001692:	2301      	movs	r3, #1
 8001694:	e010      	b.n	80016b8 <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001696:	4b0b      	ldr	r3, [pc, #44]	; (80016c4 <SysTick_Config+0x44>)
 8001698:	687a      	ldr	r2, [r7, #4]
 800169a:	3a01      	subs	r2, #1
 800169c:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800169e:	2301      	movs	r3, #1
 80016a0:	425b      	negs	r3, r3
 80016a2:	2103      	movs	r1, #3
 80016a4:	0018      	movs	r0, r3
 80016a6:	f7ff ff7d 	bl	80015a4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80016aa:	4b06      	ldr	r3, [pc, #24]	; (80016c4 <SysTick_Config+0x44>)
 80016ac:	2200      	movs	r2, #0
 80016ae:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80016b0:	4b04      	ldr	r3, [pc, #16]	; (80016c4 <SysTick_Config+0x44>)
 80016b2:	2207      	movs	r2, #7
 80016b4:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80016b6:	2300      	movs	r3, #0
}
 80016b8:	0018      	movs	r0, r3
 80016ba:	46bd      	mov	sp, r7
 80016bc:	b002      	add	sp, #8
 80016be:	bd80      	pop	{r7, pc}
 80016c0:	00ffffff 	.word	0x00ffffff
 80016c4:	e000e010 	.word	0xe000e010

080016c8 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b084      	sub	sp, #16
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	60b9      	str	r1, [r7, #8]
 80016d0:	607a      	str	r2, [r7, #4]
 80016d2:	210f      	movs	r1, #15
 80016d4:	187b      	adds	r3, r7, r1
 80016d6:	1c02      	adds	r2, r0, #0
 80016d8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80016da:	68ba      	ldr	r2, [r7, #8]
 80016dc:	187b      	adds	r3, r7, r1
 80016de:	781b      	ldrb	r3, [r3, #0]
 80016e0:	b25b      	sxtb	r3, r3
 80016e2:	0011      	movs	r1, r2
 80016e4:	0018      	movs	r0, r3
 80016e6:	f7ff ff5d 	bl	80015a4 <__NVIC_SetPriority>
}
 80016ea:	46c0      	nop			; (mov r8, r8)
 80016ec:	46bd      	mov	sp, r7
 80016ee:	b004      	add	sp, #16
 80016f0:	bd80      	pop	{r7, pc}

080016f2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016f2:	b580      	push	{r7, lr}
 80016f4:	b082      	sub	sp, #8
 80016f6:	af00      	add	r7, sp, #0
 80016f8:	0002      	movs	r2, r0
 80016fa:	1dfb      	adds	r3, r7, #7
 80016fc:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80016fe:	1dfb      	adds	r3, r7, #7
 8001700:	781b      	ldrb	r3, [r3, #0]
 8001702:	b25b      	sxtb	r3, r3
 8001704:	0018      	movs	r0, r3
 8001706:	f7ff ff33 	bl	8001570 <__NVIC_EnableIRQ>
}
 800170a:	46c0      	nop			; (mov r8, r8)
 800170c:	46bd      	mov	sp, r7
 800170e:	b002      	add	sp, #8
 8001710:	bd80      	pop	{r7, pc}

08001712 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001712:	b580      	push	{r7, lr}
 8001714:	b082      	sub	sp, #8
 8001716:	af00      	add	r7, sp, #0
 8001718:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	0018      	movs	r0, r3
 800171e:	f7ff ffaf 	bl	8001680 <SysTick_Config>
 8001722:	0003      	movs	r3, r0
}
 8001724:	0018      	movs	r0, r3
 8001726:	46bd      	mov	sp, r7
 8001728:	b002      	add	sp, #8
 800172a:	bd80      	pop	{r7, pc}

0800172c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 800172c:	b580      	push	{r7, lr}
 800172e:	b086      	sub	sp, #24
 8001730:	af00      	add	r7, sp, #0
 8001732:	6078      	str	r0, [r7, #4]
 8001734:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001736:	2300      	movs	r3, #0
 8001738:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800173a:	e149      	b.n	80019d0 <HAL_GPIO_Init+0x2a4>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800173c:	683b      	ldr	r3, [r7, #0]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	2101      	movs	r1, #1
 8001742:	697a      	ldr	r2, [r7, #20]
 8001744:	4091      	lsls	r1, r2
 8001746:	000a      	movs	r2, r1
 8001748:	4013      	ands	r3, r2
 800174a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	2b00      	cmp	r3, #0
 8001750:	d100      	bne.n	8001754 <HAL_GPIO_Init+0x28>
 8001752:	e13a      	b.n	80019ca <HAL_GPIO_Init+0x29e>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001754:	683b      	ldr	r3, [r7, #0]
 8001756:	685b      	ldr	r3, [r3, #4]
 8001758:	2b01      	cmp	r3, #1
 800175a:	d00b      	beq.n	8001774 <HAL_GPIO_Init+0x48>
 800175c:	683b      	ldr	r3, [r7, #0]
 800175e:	685b      	ldr	r3, [r3, #4]
 8001760:	2b02      	cmp	r3, #2
 8001762:	d007      	beq.n	8001774 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001764:	683b      	ldr	r3, [r7, #0]
 8001766:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001768:	2b11      	cmp	r3, #17
 800176a:	d003      	beq.n	8001774 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800176c:	683b      	ldr	r3, [r7, #0]
 800176e:	685b      	ldr	r3, [r3, #4]
 8001770:	2b12      	cmp	r3, #18
 8001772:	d130      	bne.n	80017d6 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	689b      	ldr	r3, [r3, #8]
 8001778:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800177a:	697b      	ldr	r3, [r7, #20]
 800177c:	005b      	lsls	r3, r3, #1
 800177e:	2203      	movs	r2, #3
 8001780:	409a      	lsls	r2, r3
 8001782:	0013      	movs	r3, r2
 8001784:	43da      	mvns	r2, r3
 8001786:	693b      	ldr	r3, [r7, #16]
 8001788:	4013      	ands	r3, r2
 800178a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800178c:	683b      	ldr	r3, [r7, #0]
 800178e:	68da      	ldr	r2, [r3, #12]
 8001790:	697b      	ldr	r3, [r7, #20]
 8001792:	005b      	lsls	r3, r3, #1
 8001794:	409a      	lsls	r2, r3
 8001796:	0013      	movs	r3, r2
 8001798:	693a      	ldr	r2, [r7, #16]
 800179a:	4313      	orrs	r3, r2
 800179c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	693a      	ldr	r2, [r7, #16]
 80017a2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	685b      	ldr	r3, [r3, #4]
 80017a8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80017aa:	2201      	movs	r2, #1
 80017ac:	697b      	ldr	r3, [r7, #20]
 80017ae:	409a      	lsls	r2, r3
 80017b0:	0013      	movs	r3, r2
 80017b2:	43da      	mvns	r2, r3
 80017b4:	693b      	ldr	r3, [r7, #16]
 80017b6:	4013      	ands	r3, r2
 80017b8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80017ba:	683b      	ldr	r3, [r7, #0]
 80017bc:	685b      	ldr	r3, [r3, #4]
 80017be:	091b      	lsrs	r3, r3, #4
 80017c0:	2201      	movs	r2, #1
 80017c2:	401a      	ands	r2, r3
 80017c4:	697b      	ldr	r3, [r7, #20]
 80017c6:	409a      	lsls	r2, r3
 80017c8:	0013      	movs	r3, r2
 80017ca:	693a      	ldr	r2, [r7, #16]
 80017cc:	4313      	orrs	r3, r2
 80017ce:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	693a      	ldr	r2, [r7, #16]
 80017d4:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	68db      	ldr	r3, [r3, #12]
 80017da:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80017dc:	697b      	ldr	r3, [r7, #20]
 80017de:	005b      	lsls	r3, r3, #1
 80017e0:	2203      	movs	r2, #3
 80017e2:	409a      	lsls	r2, r3
 80017e4:	0013      	movs	r3, r2
 80017e6:	43da      	mvns	r2, r3
 80017e8:	693b      	ldr	r3, [r7, #16]
 80017ea:	4013      	ands	r3, r2
 80017ec:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80017ee:	683b      	ldr	r3, [r7, #0]
 80017f0:	689a      	ldr	r2, [r3, #8]
 80017f2:	697b      	ldr	r3, [r7, #20]
 80017f4:	005b      	lsls	r3, r3, #1
 80017f6:	409a      	lsls	r2, r3
 80017f8:	0013      	movs	r3, r2
 80017fa:	693a      	ldr	r2, [r7, #16]
 80017fc:	4313      	orrs	r3, r2
 80017fe:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	693a      	ldr	r2, [r7, #16]
 8001804:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001806:	683b      	ldr	r3, [r7, #0]
 8001808:	685b      	ldr	r3, [r3, #4]
 800180a:	2b02      	cmp	r3, #2
 800180c:	d003      	beq.n	8001816 <HAL_GPIO_Init+0xea>
 800180e:	683b      	ldr	r3, [r7, #0]
 8001810:	685b      	ldr	r3, [r3, #4]
 8001812:	2b12      	cmp	r3, #18
 8001814:	d123      	bne.n	800185e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001816:	697b      	ldr	r3, [r7, #20]
 8001818:	08da      	lsrs	r2, r3, #3
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	3208      	adds	r2, #8
 800181e:	0092      	lsls	r2, r2, #2
 8001820:	58d3      	ldr	r3, [r2, r3]
 8001822:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001824:	697b      	ldr	r3, [r7, #20]
 8001826:	2207      	movs	r2, #7
 8001828:	4013      	ands	r3, r2
 800182a:	009b      	lsls	r3, r3, #2
 800182c:	220f      	movs	r2, #15
 800182e:	409a      	lsls	r2, r3
 8001830:	0013      	movs	r3, r2
 8001832:	43da      	mvns	r2, r3
 8001834:	693b      	ldr	r3, [r7, #16]
 8001836:	4013      	ands	r3, r2
 8001838:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800183a:	683b      	ldr	r3, [r7, #0]
 800183c:	691a      	ldr	r2, [r3, #16]
 800183e:	697b      	ldr	r3, [r7, #20]
 8001840:	2107      	movs	r1, #7
 8001842:	400b      	ands	r3, r1
 8001844:	009b      	lsls	r3, r3, #2
 8001846:	409a      	lsls	r2, r3
 8001848:	0013      	movs	r3, r2
 800184a:	693a      	ldr	r2, [r7, #16]
 800184c:	4313      	orrs	r3, r2
 800184e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001850:	697b      	ldr	r3, [r7, #20]
 8001852:	08da      	lsrs	r2, r3, #3
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	3208      	adds	r2, #8
 8001858:	0092      	lsls	r2, r2, #2
 800185a:	6939      	ldr	r1, [r7, #16]
 800185c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001864:	697b      	ldr	r3, [r7, #20]
 8001866:	005b      	lsls	r3, r3, #1
 8001868:	2203      	movs	r2, #3
 800186a:	409a      	lsls	r2, r3
 800186c:	0013      	movs	r3, r2
 800186e:	43da      	mvns	r2, r3
 8001870:	693b      	ldr	r3, [r7, #16]
 8001872:	4013      	ands	r3, r2
 8001874:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001876:	683b      	ldr	r3, [r7, #0]
 8001878:	685b      	ldr	r3, [r3, #4]
 800187a:	2203      	movs	r2, #3
 800187c:	401a      	ands	r2, r3
 800187e:	697b      	ldr	r3, [r7, #20]
 8001880:	005b      	lsls	r3, r3, #1
 8001882:	409a      	lsls	r2, r3
 8001884:	0013      	movs	r3, r2
 8001886:	693a      	ldr	r2, [r7, #16]
 8001888:	4313      	orrs	r3, r2
 800188a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	693a      	ldr	r2, [r7, #16]
 8001890:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001892:	683b      	ldr	r3, [r7, #0]
 8001894:	685a      	ldr	r2, [r3, #4]
 8001896:	2380      	movs	r3, #128	; 0x80
 8001898:	055b      	lsls	r3, r3, #21
 800189a:	4013      	ands	r3, r2
 800189c:	d100      	bne.n	80018a0 <HAL_GPIO_Init+0x174>
 800189e:	e094      	b.n	80019ca <HAL_GPIO_Init+0x29e>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018a0:	4b51      	ldr	r3, [pc, #324]	; (80019e8 <HAL_GPIO_Init+0x2bc>)
 80018a2:	699a      	ldr	r2, [r3, #24]
 80018a4:	4b50      	ldr	r3, [pc, #320]	; (80019e8 <HAL_GPIO_Init+0x2bc>)
 80018a6:	2101      	movs	r1, #1
 80018a8:	430a      	orrs	r2, r1
 80018aa:	619a      	str	r2, [r3, #24]
 80018ac:	4b4e      	ldr	r3, [pc, #312]	; (80019e8 <HAL_GPIO_Init+0x2bc>)
 80018ae:	699b      	ldr	r3, [r3, #24]
 80018b0:	2201      	movs	r2, #1
 80018b2:	4013      	ands	r3, r2
 80018b4:	60bb      	str	r3, [r7, #8]
 80018b6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80018b8:	4a4c      	ldr	r2, [pc, #304]	; (80019ec <HAL_GPIO_Init+0x2c0>)
 80018ba:	697b      	ldr	r3, [r7, #20]
 80018bc:	089b      	lsrs	r3, r3, #2
 80018be:	3302      	adds	r3, #2
 80018c0:	009b      	lsls	r3, r3, #2
 80018c2:	589b      	ldr	r3, [r3, r2]
 80018c4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80018c6:	697b      	ldr	r3, [r7, #20]
 80018c8:	2203      	movs	r2, #3
 80018ca:	4013      	ands	r3, r2
 80018cc:	009b      	lsls	r3, r3, #2
 80018ce:	220f      	movs	r2, #15
 80018d0:	409a      	lsls	r2, r3
 80018d2:	0013      	movs	r3, r2
 80018d4:	43da      	mvns	r2, r3
 80018d6:	693b      	ldr	r3, [r7, #16]
 80018d8:	4013      	ands	r3, r2
 80018da:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80018dc:	687a      	ldr	r2, [r7, #4]
 80018de:	2390      	movs	r3, #144	; 0x90
 80018e0:	05db      	lsls	r3, r3, #23
 80018e2:	429a      	cmp	r2, r3
 80018e4:	d00d      	beq.n	8001902 <HAL_GPIO_Init+0x1d6>
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	4a41      	ldr	r2, [pc, #260]	; (80019f0 <HAL_GPIO_Init+0x2c4>)
 80018ea:	4293      	cmp	r3, r2
 80018ec:	d007      	beq.n	80018fe <HAL_GPIO_Init+0x1d2>
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	4a40      	ldr	r2, [pc, #256]	; (80019f4 <HAL_GPIO_Init+0x2c8>)
 80018f2:	4293      	cmp	r3, r2
 80018f4:	d101      	bne.n	80018fa <HAL_GPIO_Init+0x1ce>
 80018f6:	2302      	movs	r3, #2
 80018f8:	e004      	b.n	8001904 <HAL_GPIO_Init+0x1d8>
 80018fa:	2305      	movs	r3, #5
 80018fc:	e002      	b.n	8001904 <HAL_GPIO_Init+0x1d8>
 80018fe:	2301      	movs	r3, #1
 8001900:	e000      	b.n	8001904 <HAL_GPIO_Init+0x1d8>
 8001902:	2300      	movs	r3, #0
 8001904:	697a      	ldr	r2, [r7, #20]
 8001906:	2103      	movs	r1, #3
 8001908:	400a      	ands	r2, r1
 800190a:	0092      	lsls	r2, r2, #2
 800190c:	4093      	lsls	r3, r2
 800190e:	693a      	ldr	r2, [r7, #16]
 8001910:	4313      	orrs	r3, r2
 8001912:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001914:	4935      	ldr	r1, [pc, #212]	; (80019ec <HAL_GPIO_Init+0x2c0>)
 8001916:	697b      	ldr	r3, [r7, #20]
 8001918:	089b      	lsrs	r3, r3, #2
 800191a:	3302      	adds	r3, #2
 800191c:	009b      	lsls	r3, r3, #2
 800191e:	693a      	ldr	r2, [r7, #16]
 8001920:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001922:	4b35      	ldr	r3, [pc, #212]	; (80019f8 <HAL_GPIO_Init+0x2cc>)
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	43da      	mvns	r2, r3
 800192c:	693b      	ldr	r3, [r7, #16]
 800192e:	4013      	ands	r3, r2
 8001930:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001932:	683b      	ldr	r3, [r7, #0]
 8001934:	685a      	ldr	r2, [r3, #4]
 8001936:	2380      	movs	r3, #128	; 0x80
 8001938:	025b      	lsls	r3, r3, #9
 800193a:	4013      	ands	r3, r2
 800193c:	d003      	beq.n	8001946 <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 800193e:	693a      	ldr	r2, [r7, #16]
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	4313      	orrs	r3, r2
 8001944:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001946:	4b2c      	ldr	r3, [pc, #176]	; (80019f8 <HAL_GPIO_Init+0x2cc>)
 8001948:	693a      	ldr	r2, [r7, #16]
 800194a:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 800194c:	4b2a      	ldr	r3, [pc, #168]	; (80019f8 <HAL_GPIO_Init+0x2cc>)
 800194e:	685b      	ldr	r3, [r3, #4]
 8001950:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	43da      	mvns	r2, r3
 8001956:	693b      	ldr	r3, [r7, #16]
 8001958:	4013      	ands	r3, r2
 800195a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800195c:	683b      	ldr	r3, [r7, #0]
 800195e:	685a      	ldr	r2, [r3, #4]
 8001960:	2380      	movs	r3, #128	; 0x80
 8001962:	029b      	lsls	r3, r3, #10
 8001964:	4013      	ands	r3, r2
 8001966:	d003      	beq.n	8001970 <HAL_GPIO_Init+0x244>
        {
          temp |= iocurrent;
 8001968:	693a      	ldr	r2, [r7, #16]
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	4313      	orrs	r3, r2
 800196e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001970:	4b21      	ldr	r3, [pc, #132]	; (80019f8 <HAL_GPIO_Init+0x2cc>)
 8001972:	693a      	ldr	r2, [r7, #16]
 8001974:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001976:	4b20      	ldr	r3, [pc, #128]	; (80019f8 <HAL_GPIO_Init+0x2cc>)
 8001978:	689b      	ldr	r3, [r3, #8]
 800197a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	43da      	mvns	r2, r3
 8001980:	693b      	ldr	r3, [r7, #16]
 8001982:	4013      	ands	r3, r2
 8001984:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001986:	683b      	ldr	r3, [r7, #0]
 8001988:	685a      	ldr	r2, [r3, #4]
 800198a:	2380      	movs	r3, #128	; 0x80
 800198c:	035b      	lsls	r3, r3, #13
 800198e:	4013      	ands	r3, r2
 8001990:	d003      	beq.n	800199a <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 8001992:	693a      	ldr	r2, [r7, #16]
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	4313      	orrs	r3, r2
 8001998:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800199a:	4b17      	ldr	r3, [pc, #92]	; (80019f8 <HAL_GPIO_Init+0x2cc>)
 800199c:	693a      	ldr	r2, [r7, #16]
 800199e:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80019a0:	4b15      	ldr	r3, [pc, #84]	; (80019f8 <HAL_GPIO_Init+0x2cc>)
 80019a2:	68db      	ldr	r3, [r3, #12]
 80019a4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80019a6:	68fb      	ldr	r3, [r7, #12]
 80019a8:	43da      	mvns	r2, r3
 80019aa:	693b      	ldr	r3, [r7, #16]
 80019ac:	4013      	ands	r3, r2
 80019ae:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80019b0:	683b      	ldr	r3, [r7, #0]
 80019b2:	685a      	ldr	r2, [r3, #4]
 80019b4:	2380      	movs	r3, #128	; 0x80
 80019b6:	039b      	lsls	r3, r3, #14
 80019b8:	4013      	ands	r3, r2
 80019ba:	d003      	beq.n	80019c4 <HAL_GPIO_Init+0x298>
        {
          temp |= iocurrent;
 80019bc:	693a      	ldr	r2, [r7, #16]
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	4313      	orrs	r3, r2
 80019c2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80019c4:	4b0c      	ldr	r3, [pc, #48]	; (80019f8 <HAL_GPIO_Init+0x2cc>)
 80019c6:	693a      	ldr	r2, [r7, #16]
 80019c8:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 80019ca:	697b      	ldr	r3, [r7, #20]
 80019cc:	3301      	adds	r3, #1
 80019ce:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80019d0:	683b      	ldr	r3, [r7, #0]
 80019d2:	681a      	ldr	r2, [r3, #0]
 80019d4:	697b      	ldr	r3, [r7, #20]
 80019d6:	40da      	lsrs	r2, r3
 80019d8:	1e13      	subs	r3, r2, #0
 80019da:	d000      	beq.n	80019de <HAL_GPIO_Init+0x2b2>
 80019dc:	e6ae      	b.n	800173c <HAL_GPIO_Init+0x10>
  } 
}
 80019de:	46c0      	nop			; (mov r8, r8)
 80019e0:	46bd      	mov	sp, r7
 80019e2:	b006      	add	sp, #24
 80019e4:	bd80      	pop	{r7, pc}
 80019e6:	46c0      	nop			; (mov r8, r8)
 80019e8:	40021000 	.word	0x40021000
 80019ec:	40010000 	.word	0x40010000
 80019f0:	48000400 	.word	0x48000400
 80019f4:	48000800 	.word	0x48000800
 80019f8:	40010400 	.word	0x40010400

080019fc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	b082      	sub	sp, #8
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	6078      	str	r0, [r7, #4]
 8001a04:	0008      	movs	r0, r1
 8001a06:	0011      	movs	r1, r2
 8001a08:	1cbb      	adds	r3, r7, #2
 8001a0a:	1c02      	adds	r2, r0, #0
 8001a0c:	801a      	strh	r2, [r3, #0]
 8001a0e:	1c7b      	adds	r3, r7, #1
 8001a10:	1c0a      	adds	r2, r1, #0
 8001a12:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001a14:	1c7b      	adds	r3, r7, #1
 8001a16:	781b      	ldrb	r3, [r3, #0]
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d004      	beq.n	8001a26 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001a1c:	1cbb      	adds	r3, r7, #2
 8001a1e:	881a      	ldrh	r2, [r3, #0]
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001a24:	e003      	b.n	8001a2e <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001a26:	1cbb      	adds	r3, r7, #2
 8001a28:	881a      	ldrh	r2, [r3, #0]
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001a2e:	46c0      	nop			; (mov r8, r8)
 8001a30:	46bd      	mov	sp, r7
 8001a32:	b002      	add	sp, #8
 8001a34:	bd80      	pop	{r7, pc}

08001a36 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F0 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001a36:	b580      	push	{r7, lr}
 8001a38:	b084      	sub	sp, #16
 8001a3a:	af00      	add	r7, sp, #0
 8001a3c:	6078      	str	r0, [r7, #4]
 8001a3e:	000a      	movs	r2, r1
 8001a40:	1cbb      	adds	r3, r7, #2
 8001a42:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	695b      	ldr	r3, [r3, #20]
 8001a48:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001a4a:	1cbb      	adds	r3, r7, #2
 8001a4c:	881b      	ldrh	r3, [r3, #0]
 8001a4e:	68fa      	ldr	r2, [r7, #12]
 8001a50:	4013      	ands	r3, r2
 8001a52:	041a      	lsls	r2, r3, #16
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	43db      	mvns	r3, r3
 8001a58:	1cb9      	adds	r1, r7, #2
 8001a5a:	8809      	ldrh	r1, [r1, #0]
 8001a5c:	400b      	ands	r3, r1
 8001a5e:	431a      	orrs	r2, r3
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	619a      	str	r2, [r3, #24]
}
 8001a64:	46c0      	nop			; (mov r8, r8)
 8001a66:	46bd      	mov	sp, r7
 8001a68:	b004      	add	sp, #16
 8001a6a:	bd80      	pop	{r7, pc}

08001a6c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	b088      	sub	sp, #32
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d102      	bne.n	8001a80 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001a7a:	2301      	movs	r3, #1
 8001a7c:	f000 fb76 	bl	800216c <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	2201      	movs	r2, #1
 8001a86:	4013      	ands	r3, r2
 8001a88:	d100      	bne.n	8001a8c <HAL_RCC_OscConfig+0x20>
 8001a8a:	e08e      	b.n	8001baa <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001a8c:	4bc5      	ldr	r3, [pc, #788]	; (8001da4 <HAL_RCC_OscConfig+0x338>)
 8001a8e:	685b      	ldr	r3, [r3, #4]
 8001a90:	220c      	movs	r2, #12
 8001a92:	4013      	ands	r3, r2
 8001a94:	2b04      	cmp	r3, #4
 8001a96:	d00e      	beq.n	8001ab6 <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001a98:	4bc2      	ldr	r3, [pc, #776]	; (8001da4 <HAL_RCC_OscConfig+0x338>)
 8001a9a:	685b      	ldr	r3, [r3, #4]
 8001a9c:	220c      	movs	r2, #12
 8001a9e:	4013      	ands	r3, r2
 8001aa0:	2b08      	cmp	r3, #8
 8001aa2:	d117      	bne.n	8001ad4 <HAL_RCC_OscConfig+0x68>
 8001aa4:	4bbf      	ldr	r3, [pc, #764]	; (8001da4 <HAL_RCC_OscConfig+0x338>)
 8001aa6:	685a      	ldr	r2, [r3, #4]
 8001aa8:	23c0      	movs	r3, #192	; 0xc0
 8001aaa:	025b      	lsls	r3, r3, #9
 8001aac:	401a      	ands	r2, r3
 8001aae:	2380      	movs	r3, #128	; 0x80
 8001ab0:	025b      	lsls	r3, r3, #9
 8001ab2:	429a      	cmp	r2, r3
 8001ab4:	d10e      	bne.n	8001ad4 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ab6:	4bbb      	ldr	r3, [pc, #748]	; (8001da4 <HAL_RCC_OscConfig+0x338>)
 8001ab8:	681a      	ldr	r2, [r3, #0]
 8001aba:	2380      	movs	r3, #128	; 0x80
 8001abc:	029b      	lsls	r3, r3, #10
 8001abe:	4013      	ands	r3, r2
 8001ac0:	d100      	bne.n	8001ac4 <HAL_RCC_OscConfig+0x58>
 8001ac2:	e071      	b.n	8001ba8 <HAL_RCC_OscConfig+0x13c>
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	685b      	ldr	r3, [r3, #4]
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d000      	beq.n	8001ace <HAL_RCC_OscConfig+0x62>
 8001acc:	e06c      	b.n	8001ba8 <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 8001ace:	2301      	movs	r3, #1
 8001ad0:	f000 fb4c 	bl	800216c <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	685b      	ldr	r3, [r3, #4]
 8001ad8:	2b01      	cmp	r3, #1
 8001ada:	d107      	bne.n	8001aec <HAL_RCC_OscConfig+0x80>
 8001adc:	4bb1      	ldr	r3, [pc, #708]	; (8001da4 <HAL_RCC_OscConfig+0x338>)
 8001ade:	681a      	ldr	r2, [r3, #0]
 8001ae0:	4bb0      	ldr	r3, [pc, #704]	; (8001da4 <HAL_RCC_OscConfig+0x338>)
 8001ae2:	2180      	movs	r1, #128	; 0x80
 8001ae4:	0249      	lsls	r1, r1, #9
 8001ae6:	430a      	orrs	r2, r1
 8001ae8:	601a      	str	r2, [r3, #0]
 8001aea:	e02f      	b.n	8001b4c <HAL_RCC_OscConfig+0xe0>
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	685b      	ldr	r3, [r3, #4]
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d10c      	bne.n	8001b0e <HAL_RCC_OscConfig+0xa2>
 8001af4:	4bab      	ldr	r3, [pc, #684]	; (8001da4 <HAL_RCC_OscConfig+0x338>)
 8001af6:	681a      	ldr	r2, [r3, #0]
 8001af8:	4baa      	ldr	r3, [pc, #680]	; (8001da4 <HAL_RCC_OscConfig+0x338>)
 8001afa:	49ab      	ldr	r1, [pc, #684]	; (8001da8 <HAL_RCC_OscConfig+0x33c>)
 8001afc:	400a      	ands	r2, r1
 8001afe:	601a      	str	r2, [r3, #0]
 8001b00:	4ba8      	ldr	r3, [pc, #672]	; (8001da4 <HAL_RCC_OscConfig+0x338>)
 8001b02:	681a      	ldr	r2, [r3, #0]
 8001b04:	4ba7      	ldr	r3, [pc, #668]	; (8001da4 <HAL_RCC_OscConfig+0x338>)
 8001b06:	49a9      	ldr	r1, [pc, #676]	; (8001dac <HAL_RCC_OscConfig+0x340>)
 8001b08:	400a      	ands	r2, r1
 8001b0a:	601a      	str	r2, [r3, #0]
 8001b0c:	e01e      	b.n	8001b4c <HAL_RCC_OscConfig+0xe0>
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	685b      	ldr	r3, [r3, #4]
 8001b12:	2b05      	cmp	r3, #5
 8001b14:	d10e      	bne.n	8001b34 <HAL_RCC_OscConfig+0xc8>
 8001b16:	4ba3      	ldr	r3, [pc, #652]	; (8001da4 <HAL_RCC_OscConfig+0x338>)
 8001b18:	681a      	ldr	r2, [r3, #0]
 8001b1a:	4ba2      	ldr	r3, [pc, #648]	; (8001da4 <HAL_RCC_OscConfig+0x338>)
 8001b1c:	2180      	movs	r1, #128	; 0x80
 8001b1e:	02c9      	lsls	r1, r1, #11
 8001b20:	430a      	orrs	r2, r1
 8001b22:	601a      	str	r2, [r3, #0]
 8001b24:	4b9f      	ldr	r3, [pc, #636]	; (8001da4 <HAL_RCC_OscConfig+0x338>)
 8001b26:	681a      	ldr	r2, [r3, #0]
 8001b28:	4b9e      	ldr	r3, [pc, #632]	; (8001da4 <HAL_RCC_OscConfig+0x338>)
 8001b2a:	2180      	movs	r1, #128	; 0x80
 8001b2c:	0249      	lsls	r1, r1, #9
 8001b2e:	430a      	orrs	r2, r1
 8001b30:	601a      	str	r2, [r3, #0]
 8001b32:	e00b      	b.n	8001b4c <HAL_RCC_OscConfig+0xe0>
 8001b34:	4b9b      	ldr	r3, [pc, #620]	; (8001da4 <HAL_RCC_OscConfig+0x338>)
 8001b36:	681a      	ldr	r2, [r3, #0]
 8001b38:	4b9a      	ldr	r3, [pc, #616]	; (8001da4 <HAL_RCC_OscConfig+0x338>)
 8001b3a:	499b      	ldr	r1, [pc, #620]	; (8001da8 <HAL_RCC_OscConfig+0x33c>)
 8001b3c:	400a      	ands	r2, r1
 8001b3e:	601a      	str	r2, [r3, #0]
 8001b40:	4b98      	ldr	r3, [pc, #608]	; (8001da4 <HAL_RCC_OscConfig+0x338>)
 8001b42:	681a      	ldr	r2, [r3, #0]
 8001b44:	4b97      	ldr	r3, [pc, #604]	; (8001da4 <HAL_RCC_OscConfig+0x338>)
 8001b46:	4999      	ldr	r1, [pc, #612]	; (8001dac <HAL_RCC_OscConfig+0x340>)
 8001b48:	400a      	ands	r2, r1
 8001b4a:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	685b      	ldr	r3, [r3, #4]
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d014      	beq.n	8001b7e <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b54:	f7fe ff6c 	bl	8000a30 <HAL_GetTick>
 8001b58:	0003      	movs	r3, r0
 8001b5a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b5c:	e008      	b.n	8001b70 <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001b5e:	f7fe ff67 	bl	8000a30 <HAL_GetTick>
 8001b62:	0002      	movs	r2, r0
 8001b64:	69bb      	ldr	r3, [r7, #24]
 8001b66:	1ad3      	subs	r3, r2, r3
 8001b68:	2b64      	cmp	r3, #100	; 0x64
 8001b6a:	d901      	bls.n	8001b70 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 8001b6c:	2303      	movs	r3, #3
 8001b6e:	e2fd      	b.n	800216c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b70:	4b8c      	ldr	r3, [pc, #560]	; (8001da4 <HAL_RCC_OscConfig+0x338>)
 8001b72:	681a      	ldr	r2, [r3, #0]
 8001b74:	2380      	movs	r3, #128	; 0x80
 8001b76:	029b      	lsls	r3, r3, #10
 8001b78:	4013      	ands	r3, r2
 8001b7a:	d0f0      	beq.n	8001b5e <HAL_RCC_OscConfig+0xf2>
 8001b7c:	e015      	b.n	8001baa <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b7e:	f7fe ff57 	bl	8000a30 <HAL_GetTick>
 8001b82:	0003      	movs	r3, r0
 8001b84:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b86:	e008      	b.n	8001b9a <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001b88:	f7fe ff52 	bl	8000a30 <HAL_GetTick>
 8001b8c:	0002      	movs	r2, r0
 8001b8e:	69bb      	ldr	r3, [r7, #24]
 8001b90:	1ad3      	subs	r3, r2, r3
 8001b92:	2b64      	cmp	r3, #100	; 0x64
 8001b94:	d901      	bls.n	8001b9a <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 8001b96:	2303      	movs	r3, #3
 8001b98:	e2e8      	b.n	800216c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b9a:	4b82      	ldr	r3, [pc, #520]	; (8001da4 <HAL_RCC_OscConfig+0x338>)
 8001b9c:	681a      	ldr	r2, [r3, #0]
 8001b9e:	2380      	movs	r3, #128	; 0x80
 8001ba0:	029b      	lsls	r3, r3, #10
 8001ba2:	4013      	ands	r3, r2
 8001ba4:	d1f0      	bne.n	8001b88 <HAL_RCC_OscConfig+0x11c>
 8001ba6:	e000      	b.n	8001baa <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ba8:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	2202      	movs	r2, #2
 8001bb0:	4013      	ands	r3, r2
 8001bb2:	d100      	bne.n	8001bb6 <HAL_RCC_OscConfig+0x14a>
 8001bb4:	e06c      	b.n	8001c90 <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001bb6:	4b7b      	ldr	r3, [pc, #492]	; (8001da4 <HAL_RCC_OscConfig+0x338>)
 8001bb8:	685b      	ldr	r3, [r3, #4]
 8001bba:	220c      	movs	r2, #12
 8001bbc:	4013      	ands	r3, r2
 8001bbe:	d00e      	beq.n	8001bde <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001bc0:	4b78      	ldr	r3, [pc, #480]	; (8001da4 <HAL_RCC_OscConfig+0x338>)
 8001bc2:	685b      	ldr	r3, [r3, #4]
 8001bc4:	220c      	movs	r2, #12
 8001bc6:	4013      	ands	r3, r2
 8001bc8:	2b08      	cmp	r3, #8
 8001bca:	d11f      	bne.n	8001c0c <HAL_RCC_OscConfig+0x1a0>
 8001bcc:	4b75      	ldr	r3, [pc, #468]	; (8001da4 <HAL_RCC_OscConfig+0x338>)
 8001bce:	685a      	ldr	r2, [r3, #4]
 8001bd0:	23c0      	movs	r3, #192	; 0xc0
 8001bd2:	025b      	lsls	r3, r3, #9
 8001bd4:	401a      	ands	r2, r3
 8001bd6:	2380      	movs	r3, #128	; 0x80
 8001bd8:	021b      	lsls	r3, r3, #8
 8001bda:	429a      	cmp	r2, r3
 8001bdc:	d116      	bne.n	8001c0c <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001bde:	4b71      	ldr	r3, [pc, #452]	; (8001da4 <HAL_RCC_OscConfig+0x338>)
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	2202      	movs	r2, #2
 8001be4:	4013      	ands	r3, r2
 8001be6:	d005      	beq.n	8001bf4 <HAL_RCC_OscConfig+0x188>
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	68db      	ldr	r3, [r3, #12]
 8001bec:	2b01      	cmp	r3, #1
 8001bee:	d001      	beq.n	8001bf4 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8001bf0:	2301      	movs	r3, #1
 8001bf2:	e2bb      	b.n	800216c <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001bf4:	4b6b      	ldr	r3, [pc, #428]	; (8001da4 <HAL_RCC_OscConfig+0x338>)
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	22f8      	movs	r2, #248	; 0xf8
 8001bfa:	4393      	bics	r3, r2
 8001bfc:	0019      	movs	r1, r3
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	691b      	ldr	r3, [r3, #16]
 8001c02:	00da      	lsls	r2, r3, #3
 8001c04:	4b67      	ldr	r3, [pc, #412]	; (8001da4 <HAL_RCC_OscConfig+0x338>)
 8001c06:	430a      	orrs	r2, r1
 8001c08:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c0a:	e041      	b.n	8001c90 <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	68db      	ldr	r3, [r3, #12]
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d024      	beq.n	8001c5e <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001c14:	4b63      	ldr	r3, [pc, #396]	; (8001da4 <HAL_RCC_OscConfig+0x338>)
 8001c16:	681a      	ldr	r2, [r3, #0]
 8001c18:	4b62      	ldr	r3, [pc, #392]	; (8001da4 <HAL_RCC_OscConfig+0x338>)
 8001c1a:	2101      	movs	r1, #1
 8001c1c:	430a      	orrs	r2, r1
 8001c1e:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c20:	f7fe ff06 	bl	8000a30 <HAL_GetTick>
 8001c24:	0003      	movs	r3, r0
 8001c26:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c28:	e008      	b.n	8001c3c <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001c2a:	f7fe ff01 	bl	8000a30 <HAL_GetTick>
 8001c2e:	0002      	movs	r2, r0
 8001c30:	69bb      	ldr	r3, [r7, #24]
 8001c32:	1ad3      	subs	r3, r2, r3
 8001c34:	2b02      	cmp	r3, #2
 8001c36:	d901      	bls.n	8001c3c <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8001c38:	2303      	movs	r3, #3
 8001c3a:	e297      	b.n	800216c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c3c:	4b59      	ldr	r3, [pc, #356]	; (8001da4 <HAL_RCC_OscConfig+0x338>)
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	2202      	movs	r2, #2
 8001c42:	4013      	ands	r3, r2
 8001c44:	d0f1      	beq.n	8001c2a <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c46:	4b57      	ldr	r3, [pc, #348]	; (8001da4 <HAL_RCC_OscConfig+0x338>)
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	22f8      	movs	r2, #248	; 0xf8
 8001c4c:	4393      	bics	r3, r2
 8001c4e:	0019      	movs	r1, r3
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	691b      	ldr	r3, [r3, #16]
 8001c54:	00da      	lsls	r2, r3, #3
 8001c56:	4b53      	ldr	r3, [pc, #332]	; (8001da4 <HAL_RCC_OscConfig+0x338>)
 8001c58:	430a      	orrs	r2, r1
 8001c5a:	601a      	str	r2, [r3, #0]
 8001c5c:	e018      	b.n	8001c90 <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001c5e:	4b51      	ldr	r3, [pc, #324]	; (8001da4 <HAL_RCC_OscConfig+0x338>)
 8001c60:	681a      	ldr	r2, [r3, #0]
 8001c62:	4b50      	ldr	r3, [pc, #320]	; (8001da4 <HAL_RCC_OscConfig+0x338>)
 8001c64:	2101      	movs	r1, #1
 8001c66:	438a      	bics	r2, r1
 8001c68:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c6a:	f7fe fee1 	bl	8000a30 <HAL_GetTick>
 8001c6e:	0003      	movs	r3, r0
 8001c70:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c72:	e008      	b.n	8001c86 <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001c74:	f7fe fedc 	bl	8000a30 <HAL_GetTick>
 8001c78:	0002      	movs	r2, r0
 8001c7a:	69bb      	ldr	r3, [r7, #24]
 8001c7c:	1ad3      	subs	r3, r2, r3
 8001c7e:	2b02      	cmp	r3, #2
 8001c80:	d901      	bls.n	8001c86 <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 8001c82:	2303      	movs	r3, #3
 8001c84:	e272      	b.n	800216c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c86:	4b47      	ldr	r3, [pc, #284]	; (8001da4 <HAL_RCC_OscConfig+0x338>)
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	2202      	movs	r2, #2
 8001c8c:	4013      	ands	r3, r2
 8001c8e:	d1f1      	bne.n	8001c74 <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	2208      	movs	r2, #8
 8001c96:	4013      	ands	r3, r2
 8001c98:	d036      	beq.n	8001d08 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	69db      	ldr	r3, [r3, #28]
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d019      	beq.n	8001cd6 <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001ca2:	4b40      	ldr	r3, [pc, #256]	; (8001da4 <HAL_RCC_OscConfig+0x338>)
 8001ca4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001ca6:	4b3f      	ldr	r3, [pc, #252]	; (8001da4 <HAL_RCC_OscConfig+0x338>)
 8001ca8:	2101      	movs	r1, #1
 8001caa:	430a      	orrs	r2, r1
 8001cac:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001cae:	f7fe febf 	bl	8000a30 <HAL_GetTick>
 8001cb2:	0003      	movs	r3, r0
 8001cb4:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001cb6:	e008      	b.n	8001cca <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001cb8:	f7fe feba 	bl	8000a30 <HAL_GetTick>
 8001cbc:	0002      	movs	r2, r0
 8001cbe:	69bb      	ldr	r3, [r7, #24]
 8001cc0:	1ad3      	subs	r3, r2, r3
 8001cc2:	2b02      	cmp	r3, #2
 8001cc4:	d901      	bls.n	8001cca <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 8001cc6:	2303      	movs	r3, #3
 8001cc8:	e250      	b.n	800216c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001cca:	4b36      	ldr	r3, [pc, #216]	; (8001da4 <HAL_RCC_OscConfig+0x338>)
 8001ccc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cce:	2202      	movs	r2, #2
 8001cd0:	4013      	ands	r3, r2
 8001cd2:	d0f1      	beq.n	8001cb8 <HAL_RCC_OscConfig+0x24c>
 8001cd4:	e018      	b.n	8001d08 <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001cd6:	4b33      	ldr	r3, [pc, #204]	; (8001da4 <HAL_RCC_OscConfig+0x338>)
 8001cd8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001cda:	4b32      	ldr	r3, [pc, #200]	; (8001da4 <HAL_RCC_OscConfig+0x338>)
 8001cdc:	2101      	movs	r1, #1
 8001cde:	438a      	bics	r2, r1
 8001ce0:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ce2:	f7fe fea5 	bl	8000a30 <HAL_GetTick>
 8001ce6:	0003      	movs	r3, r0
 8001ce8:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001cea:	e008      	b.n	8001cfe <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001cec:	f7fe fea0 	bl	8000a30 <HAL_GetTick>
 8001cf0:	0002      	movs	r2, r0
 8001cf2:	69bb      	ldr	r3, [r7, #24]
 8001cf4:	1ad3      	subs	r3, r2, r3
 8001cf6:	2b02      	cmp	r3, #2
 8001cf8:	d901      	bls.n	8001cfe <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 8001cfa:	2303      	movs	r3, #3
 8001cfc:	e236      	b.n	800216c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001cfe:	4b29      	ldr	r3, [pc, #164]	; (8001da4 <HAL_RCC_OscConfig+0x338>)
 8001d00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d02:	2202      	movs	r2, #2
 8001d04:	4013      	ands	r3, r2
 8001d06:	d1f1      	bne.n	8001cec <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	2204      	movs	r2, #4
 8001d0e:	4013      	ands	r3, r2
 8001d10:	d100      	bne.n	8001d14 <HAL_RCC_OscConfig+0x2a8>
 8001d12:	e0b5      	b.n	8001e80 <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001d14:	231f      	movs	r3, #31
 8001d16:	18fb      	adds	r3, r7, r3
 8001d18:	2200      	movs	r2, #0
 8001d1a:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001d1c:	4b21      	ldr	r3, [pc, #132]	; (8001da4 <HAL_RCC_OscConfig+0x338>)
 8001d1e:	69da      	ldr	r2, [r3, #28]
 8001d20:	2380      	movs	r3, #128	; 0x80
 8001d22:	055b      	lsls	r3, r3, #21
 8001d24:	4013      	ands	r3, r2
 8001d26:	d111      	bne.n	8001d4c <HAL_RCC_OscConfig+0x2e0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d28:	4b1e      	ldr	r3, [pc, #120]	; (8001da4 <HAL_RCC_OscConfig+0x338>)
 8001d2a:	69da      	ldr	r2, [r3, #28]
 8001d2c:	4b1d      	ldr	r3, [pc, #116]	; (8001da4 <HAL_RCC_OscConfig+0x338>)
 8001d2e:	2180      	movs	r1, #128	; 0x80
 8001d30:	0549      	lsls	r1, r1, #21
 8001d32:	430a      	orrs	r2, r1
 8001d34:	61da      	str	r2, [r3, #28]
 8001d36:	4b1b      	ldr	r3, [pc, #108]	; (8001da4 <HAL_RCC_OscConfig+0x338>)
 8001d38:	69da      	ldr	r2, [r3, #28]
 8001d3a:	2380      	movs	r3, #128	; 0x80
 8001d3c:	055b      	lsls	r3, r3, #21
 8001d3e:	4013      	ands	r3, r2
 8001d40:	60fb      	str	r3, [r7, #12]
 8001d42:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001d44:	231f      	movs	r3, #31
 8001d46:	18fb      	adds	r3, r7, r3
 8001d48:	2201      	movs	r2, #1
 8001d4a:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d4c:	4b18      	ldr	r3, [pc, #96]	; (8001db0 <HAL_RCC_OscConfig+0x344>)
 8001d4e:	681a      	ldr	r2, [r3, #0]
 8001d50:	2380      	movs	r3, #128	; 0x80
 8001d52:	005b      	lsls	r3, r3, #1
 8001d54:	4013      	ands	r3, r2
 8001d56:	d11a      	bne.n	8001d8e <HAL_RCC_OscConfig+0x322>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001d58:	4b15      	ldr	r3, [pc, #84]	; (8001db0 <HAL_RCC_OscConfig+0x344>)
 8001d5a:	681a      	ldr	r2, [r3, #0]
 8001d5c:	4b14      	ldr	r3, [pc, #80]	; (8001db0 <HAL_RCC_OscConfig+0x344>)
 8001d5e:	2180      	movs	r1, #128	; 0x80
 8001d60:	0049      	lsls	r1, r1, #1
 8001d62:	430a      	orrs	r2, r1
 8001d64:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001d66:	f7fe fe63 	bl	8000a30 <HAL_GetTick>
 8001d6a:	0003      	movs	r3, r0
 8001d6c:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d6e:	e008      	b.n	8001d82 <HAL_RCC_OscConfig+0x316>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d70:	f7fe fe5e 	bl	8000a30 <HAL_GetTick>
 8001d74:	0002      	movs	r2, r0
 8001d76:	69bb      	ldr	r3, [r7, #24]
 8001d78:	1ad3      	subs	r3, r2, r3
 8001d7a:	2b64      	cmp	r3, #100	; 0x64
 8001d7c:	d901      	bls.n	8001d82 <HAL_RCC_OscConfig+0x316>
        {
          return HAL_TIMEOUT;
 8001d7e:	2303      	movs	r3, #3
 8001d80:	e1f4      	b.n	800216c <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d82:	4b0b      	ldr	r3, [pc, #44]	; (8001db0 <HAL_RCC_OscConfig+0x344>)
 8001d84:	681a      	ldr	r2, [r3, #0]
 8001d86:	2380      	movs	r3, #128	; 0x80
 8001d88:	005b      	lsls	r3, r3, #1
 8001d8a:	4013      	ands	r3, r2
 8001d8c:	d0f0      	beq.n	8001d70 <HAL_RCC_OscConfig+0x304>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	689b      	ldr	r3, [r3, #8]
 8001d92:	2b01      	cmp	r3, #1
 8001d94:	d10e      	bne.n	8001db4 <HAL_RCC_OscConfig+0x348>
 8001d96:	4b03      	ldr	r3, [pc, #12]	; (8001da4 <HAL_RCC_OscConfig+0x338>)
 8001d98:	6a1a      	ldr	r2, [r3, #32]
 8001d9a:	4b02      	ldr	r3, [pc, #8]	; (8001da4 <HAL_RCC_OscConfig+0x338>)
 8001d9c:	2101      	movs	r1, #1
 8001d9e:	430a      	orrs	r2, r1
 8001da0:	621a      	str	r2, [r3, #32]
 8001da2:	e035      	b.n	8001e10 <HAL_RCC_OscConfig+0x3a4>
 8001da4:	40021000 	.word	0x40021000
 8001da8:	fffeffff 	.word	0xfffeffff
 8001dac:	fffbffff 	.word	0xfffbffff
 8001db0:	40007000 	.word	0x40007000
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	689b      	ldr	r3, [r3, #8]
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d10c      	bne.n	8001dd6 <HAL_RCC_OscConfig+0x36a>
 8001dbc:	4bca      	ldr	r3, [pc, #808]	; (80020e8 <HAL_RCC_OscConfig+0x67c>)
 8001dbe:	6a1a      	ldr	r2, [r3, #32]
 8001dc0:	4bc9      	ldr	r3, [pc, #804]	; (80020e8 <HAL_RCC_OscConfig+0x67c>)
 8001dc2:	2101      	movs	r1, #1
 8001dc4:	438a      	bics	r2, r1
 8001dc6:	621a      	str	r2, [r3, #32]
 8001dc8:	4bc7      	ldr	r3, [pc, #796]	; (80020e8 <HAL_RCC_OscConfig+0x67c>)
 8001dca:	6a1a      	ldr	r2, [r3, #32]
 8001dcc:	4bc6      	ldr	r3, [pc, #792]	; (80020e8 <HAL_RCC_OscConfig+0x67c>)
 8001dce:	2104      	movs	r1, #4
 8001dd0:	438a      	bics	r2, r1
 8001dd2:	621a      	str	r2, [r3, #32]
 8001dd4:	e01c      	b.n	8001e10 <HAL_RCC_OscConfig+0x3a4>
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	689b      	ldr	r3, [r3, #8]
 8001dda:	2b05      	cmp	r3, #5
 8001ddc:	d10c      	bne.n	8001df8 <HAL_RCC_OscConfig+0x38c>
 8001dde:	4bc2      	ldr	r3, [pc, #776]	; (80020e8 <HAL_RCC_OscConfig+0x67c>)
 8001de0:	6a1a      	ldr	r2, [r3, #32]
 8001de2:	4bc1      	ldr	r3, [pc, #772]	; (80020e8 <HAL_RCC_OscConfig+0x67c>)
 8001de4:	2104      	movs	r1, #4
 8001de6:	430a      	orrs	r2, r1
 8001de8:	621a      	str	r2, [r3, #32]
 8001dea:	4bbf      	ldr	r3, [pc, #764]	; (80020e8 <HAL_RCC_OscConfig+0x67c>)
 8001dec:	6a1a      	ldr	r2, [r3, #32]
 8001dee:	4bbe      	ldr	r3, [pc, #760]	; (80020e8 <HAL_RCC_OscConfig+0x67c>)
 8001df0:	2101      	movs	r1, #1
 8001df2:	430a      	orrs	r2, r1
 8001df4:	621a      	str	r2, [r3, #32]
 8001df6:	e00b      	b.n	8001e10 <HAL_RCC_OscConfig+0x3a4>
 8001df8:	4bbb      	ldr	r3, [pc, #748]	; (80020e8 <HAL_RCC_OscConfig+0x67c>)
 8001dfa:	6a1a      	ldr	r2, [r3, #32]
 8001dfc:	4bba      	ldr	r3, [pc, #744]	; (80020e8 <HAL_RCC_OscConfig+0x67c>)
 8001dfe:	2101      	movs	r1, #1
 8001e00:	438a      	bics	r2, r1
 8001e02:	621a      	str	r2, [r3, #32]
 8001e04:	4bb8      	ldr	r3, [pc, #736]	; (80020e8 <HAL_RCC_OscConfig+0x67c>)
 8001e06:	6a1a      	ldr	r2, [r3, #32]
 8001e08:	4bb7      	ldr	r3, [pc, #732]	; (80020e8 <HAL_RCC_OscConfig+0x67c>)
 8001e0a:	2104      	movs	r1, #4
 8001e0c:	438a      	bics	r2, r1
 8001e0e:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	689b      	ldr	r3, [r3, #8]
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d014      	beq.n	8001e42 <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e18:	f7fe fe0a 	bl	8000a30 <HAL_GetTick>
 8001e1c:	0003      	movs	r3, r0
 8001e1e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e20:	e009      	b.n	8001e36 <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001e22:	f7fe fe05 	bl	8000a30 <HAL_GetTick>
 8001e26:	0002      	movs	r2, r0
 8001e28:	69bb      	ldr	r3, [r7, #24]
 8001e2a:	1ad3      	subs	r3, r2, r3
 8001e2c:	4aaf      	ldr	r2, [pc, #700]	; (80020ec <HAL_RCC_OscConfig+0x680>)
 8001e2e:	4293      	cmp	r3, r2
 8001e30:	d901      	bls.n	8001e36 <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8001e32:	2303      	movs	r3, #3
 8001e34:	e19a      	b.n	800216c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e36:	4bac      	ldr	r3, [pc, #688]	; (80020e8 <HAL_RCC_OscConfig+0x67c>)
 8001e38:	6a1b      	ldr	r3, [r3, #32]
 8001e3a:	2202      	movs	r2, #2
 8001e3c:	4013      	ands	r3, r2
 8001e3e:	d0f0      	beq.n	8001e22 <HAL_RCC_OscConfig+0x3b6>
 8001e40:	e013      	b.n	8001e6a <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e42:	f7fe fdf5 	bl	8000a30 <HAL_GetTick>
 8001e46:	0003      	movs	r3, r0
 8001e48:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e4a:	e009      	b.n	8001e60 <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001e4c:	f7fe fdf0 	bl	8000a30 <HAL_GetTick>
 8001e50:	0002      	movs	r2, r0
 8001e52:	69bb      	ldr	r3, [r7, #24]
 8001e54:	1ad3      	subs	r3, r2, r3
 8001e56:	4aa5      	ldr	r2, [pc, #660]	; (80020ec <HAL_RCC_OscConfig+0x680>)
 8001e58:	4293      	cmp	r3, r2
 8001e5a:	d901      	bls.n	8001e60 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8001e5c:	2303      	movs	r3, #3
 8001e5e:	e185      	b.n	800216c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e60:	4ba1      	ldr	r3, [pc, #644]	; (80020e8 <HAL_RCC_OscConfig+0x67c>)
 8001e62:	6a1b      	ldr	r3, [r3, #32]
 8001e64:	2202      	movs	r2, #2
 8001e66:	4013      	ands	r3, r2
 8001e68:	d1f0      	bne.n	8001e4c <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001e6a:	231f      	movs	r3, #31
 8001e6c:	18fb      	adds	r3, r7, r3
 8001e6e:	781b      	ldrb	r3, [r3, #0]
 8001e70:	2b01      	cmp	r3, #1
 8001e72:	d105      	bne.n	8001e80 <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e74:	4b9c      	ldr	r3, [pc, #624]	; (80020e8 <HAL_RCC_OscConfig+0x67c>)
 8001e76:	69da      	ldr	r2, [r3, #28]
 8001e78:	4b9b      	ldr	r3, [pc, #620]	; (80020e8 <HAL_RCC_OscConfig+0x67c>)
 8001e7a:	499d      	ldr	r1, [pc, #628]	; (80020f0 <HAL_RCC_OscConfig+0x684>)
 8001e7c:	400a      	ands	r2, r1
 8001e7e:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	2210      	movs	r2, #16
 8001e86:	4013      	ands	r3, r2
 8001e88:	d063      	beq.n	8001f52 <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	695b      	ldr	r3, [r3, #20]
 8001e8e:	2b01      	cmp	r3, #1
 8001e90:	d12a      	bne.n	8001ee8 <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001e92:	4b95      	ldr	r3, [pc, #596]	; (80020e8 <HAL_RCC_OscConfig+0x67c>)
 8001e94:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001e96:	4b94      	ldr	r3, [pc, #592]	; (80020e8 <HAL_RCC_OscConfig+0x67c>)
 8001e98:	2104      	movs	r1, #4
 8001e9a:	430a      	orrs	r2, r1
 8001e9c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8001e9e:	4b92      	ldr	r3, [pc, #584]	; (80020e8 <HAL_RCC_OscConfig+0x67c>)
 8001ea0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001ea2:	4b91      	ldr	r3, [pc, #580]	; (80020e8 <HAL_RCC_OscConfig+0x67c>)
 8001ea4:	2101      	movs	r1, #1
 8001ea6:	430a      	orrs	r2, r1
 8001ea8:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001eaa:	f7fe fdc1 	bl	8000a30 <HAL_GetTick>
 8001eae:	0003      	movs	r3, r0
 8001eb0:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001eb2:	e008      	b.n	8001ec6 <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001eb4:	f7fe fdbc 	bl	8000a30 <HAL_GetTick>
 8001eb8:	0002      	movs	r2, r0
 8001eba:	69bb      	ldr	r3, [r7, #24]
 8001ebc:	1ad3      	subs	r3, r2, r3
 8001ebe:	2b02      	cmp	r3, #2
 8001ec0:	d901      	bls.n	8001ec6 <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 8001ec2:	2303      	movs	r3, #3
 8001ec4:	e152      	b.n	800216c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001ec6:	4b88      	ldr	r3, [pc, #544]	; (80020e8 <HAL_RCC_OscConfig+0x67c>)
 8001ec8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001eca:	2202      	movs	r2, #2
 8001ecc:	4013      	ands	r3, r2
 8001ece:	d0f1      	beq.n	8001eb4 <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001ed0:	4b85      	ldr	r3, [pc, #532]	; (80020e8 <HAL_RCC_OscConfig+0x67c>)
 8001ed2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ed4:	22f8      	movs	r2, #248	; 0xf8
 8001ed6:	4393      	bics	r3, r2
 8001ed8:	0019      	movs	r1, r3
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	699b      	ldr	r3, [r3, #24]
 8001ede:	00da      	lsls	r2, r3, #3
 8001ee0:	4b81      	ldr	r3, [pc, #516]	; (80020e8 <HAL_RCC_OscConfig+0x67c>)
 8001ee2:	430a      	orrs	r2, r1
 8001ee4:	635a      	str	r2, [r3, #52]	; 0x34
 8001ee6:	e034      	b.n	8001f52 <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	695b      	ldr	r3, [r3, #20]
 8001eec:	3305      	adds	r3, #5
 8001eee:	d111      	bne.n	8001f14 <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8001ef0:	4b7d      	ldr	r3, [pc, #500]	; (80020e8 <HAL_RCC_OscConfig+0x67c>)
 8001ef2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001ef4:	4b7c      	ldr	r3, [pc, #496]	; (80020e8 <HAL_RCC_OscConfig+0x67c>)
 8001ef6:	2104      	movs	r1, #4
 8001ef8:	438a      	bics	r2, r1
 8001efa:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001efc:	4b7a      	ldr	r3, [pc, #488]	; (80020e8 <HAL_RCC_OscConfig+0x67c>)
 8001efe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f00:	22f8      	movs	r2, #248	; 0xf8
 8001f02:	4393      	bics	r3, r2
 8001f04:	0019      	movs	r1, r3
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	699b      	ldr	r3, [r3, #24]
 8001f0a:	00da      	lsls	r2, r3, #3
 8001f0c:	4b76      	ldr	r3, [pc, #472]	; (80020e8 <HAL_RCC_OscConfig+0x67c>)
 8001f0e:	430a      	orrs	r2, r1
 8001f10:	635a      	str	r2, [r3, #52]	; 0x34
 8001f12:	e01e      	b.n	8001f52 <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001f14:	4b74      	ldr	r3, [pc, #464]	; (80020e8 <HAL_RCC_OscConfig+0x67c>)
 8001f16:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001f18:	4b73      	ldr	r3, [pc, #460]	; (80020e8 <HAL_RCC_OscConfig+0x67c>)
 8001f1a:	2104      	movs	r1, #4
 8001f1c:	430a      	orrs	r2, r1
 8001f1e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8001f20:	4b71      	ldr	r3, [pc, #452]	; (80020e8 <HAL_RCC_OscConfig+0x67c>)
 8001f22:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001f24:	4b70      	ldr	r3, [pc, #448]	; (80020e8 <HAL_RCC_OscConfig+0x67c>)
 8001f26:	2101      	movs	r1, #1
 8001f28:	438a      	bics	r2, r1
 8001f2a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f2c:	f7fe fd80 	bl	8000a30 <HAL_GetTick>
 8001f30:	0003      	movs	r3, r0
 8001f32:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001f34:	e008      	b.n	8001f48 <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001f36:	f7fe fd7b 	bl	8000a30 <HAL_GetTick>
 8001f3a:	0002      	movs	r2, r0
 8001f3c:	69bb      	ldr	r3, [r7, #24]
 8001f3e:	1ad3      	subs	r3, r2, r3
 8001f40:	2b02      	cmp	r3, #2
 8001f42:	d901      	bls.n	8001f48 <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 8001f44:	2303      	movs	r3, #3
 8001f46:	e111      	b.n	800216c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001f48:	4b67      	ldr	r3, [pc, #412]	; (80020e8 <HAL_RCC_OscConfig+0x67c>)
 8001f4a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f4c:	2202      	movs	r2, #2
 8001f4e:	4013      	ands	r3, r2
 8001f50:	d1f1      	bne.n	8001f36 <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	2220      	movs	r2, #32
 8001f58:	4013      	ands	r3, r2
 8001f5a:	d05c      	beq.n	8002016 <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8001f5c:	4b62      	ldr	r3, [pc, #392]	; (80020e8 <HAL_RCC_OscConfig+0x67c>)
 8001f5e:	685b      	ldr	r3, [r3, #4]
 8001f60:	220c      	movs	r2, #12
 8001f62:	4013      	ands	r3, r2
 8001f64:	2b0c      	cmp	r3, #12
 8001f66:	d00e      	beq.n	8001f86 <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8001f68:	4b5f      	ldr	r3, [pc, #380]	; (80020e8 <HAL_RCC_OscConfig+0x67c>)
 8001f6a:	685b      	ldr	r3, [r3, #4]
 8001f6c:	220c      	movs	r2, #12
 8001f6e:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8001f70:	2b08      	cmp	r3, #8
 8001f72:	d114      	bne.n	8001f9e <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8001f74:	4b5c      	ldr	r3, [pc, #368]	; (80020e8 <HAL_RCC_OscConfig+0x67c>)
 8001f76:	685a      	ldr	r2, [r3, #4]
 8001f78:	23c0      	movs	r3, #192	; 0xc0
 8001f7a:	025b      	lsls	r3, r3, #9
 8001f7c:	401a      	ands	r2, r3
 8001f7e:	23c0      	movs	r3, #192	; 0xc0
 8001f80:	025b      	lsls	r3, r3, #9
 8001f82:	429a      	cmp	r2, r3
 8001f84:	d10b      	bne.n	8001f9e <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8001f86:	4b58      	ldr	r3, [pc, #352]	; (80020e8 <HAL_RCC_OscConfig+0x67c>)
 8001f88:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001f8a:	2380      	movs	r3, #128	; 0x80
 8001f8c:	025b      	lsls	r3, r3, #9
 8001f8e:	4013      	ands	r3, r2
 8001f90:	d040      	beq.n	8002014 <HAL_RCC_OscConfig+0x5a8>
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	6a1b      	ldr	r3, [r3, #32]
 8001f96:	2b01      	cmp	r3, #1
 8001f98:	d03c      	beq.n	8002014 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8001f9a:	2301      	movs	r3, #1
 8001f9c:	e0e6      	b.n	800216c <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	6a1b      	ldr	r3, [r3, #32]
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d01b      	beq.n	8001fde <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8001fa6:	4b50      	ldr	r3, [pc, #320]	; (80020e8 <HAL_RCC_OscConfig+0x67c>)
 8001fa8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001faa:	4b4f      	ldr	r3, [pc, #316]	; (80020e8 <HAL_RCC_OscConfig+0x67c>)
 8001fac:	2180      	movs	r1, #128	; 0x80
 8001fae:	0249      	lsls	r1, r1, #9
 8001fb0:	430a      	orrs	r2, r1
 8001fb2:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fb4:	f7fe fd3c 	bl	8000a30 <HAL_GetTick>
 8001fb8:	0003      	movs	r3, r0
 8001fba:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8001fbc:	e008      	b.n	8001fd0 <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001fbe:	f7fe fd37 	bl	8000a30 <HAL_GetTick>
 8001fc2:	0002      	movs	r2, r0
 8001fc4:	69bb      	ldr	r3, [r7, #24]
 8001fc6:	1ad3      	subs	r3, r2, r3
 8001fc8:	2b02      	cmp	r3, #2
 8001fca:	d901      	bls.n	8001fd0 <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 8001fcc:	2303      	movs	r3, #3
 8001fce:	e0cd      	b.n	800216c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8001fd0:	4b45      	ldr	r3, [pc, #276]	; (80020e8 <HAL_RCC_OscConfig+0x67c>)
 8001fd2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001fd4:	2380      	movs	r3, #128	; 0x80
 8001fd6:	025b      	lsls	r3, r3, #9
 8001fd8:	4013      	ands	r3, r2
 8001fda:	d0f0      	beq.n	8001fbe <HAL_RCC_OscConfig+0x552>
 8001fdc:	e01b      	b.n	8002016 <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8001fde:	4b42      	ldr	r3, [pc, #264]	; (80020e8 <HAL_RCC_OscConfig+0x67c>)
 8001fe0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001fe2:	4b41      	ldr	r3, [pc, #260]	; (80020e8 <HAL_RCC_OscConfig+0x67c>)
 8001fe4:	4943      	ldr	r1, [pc, #268]	; (80020f4 <HAL_RCC_OscConfig+0x688>)
 8001fe6:	400a      	ands	r2, r1
 8001fe8:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fea:	f7fe fd21 	bl	8000a30 <HAL_GetTick>
 8001fee:	0003      	movs	r3, r0
 8001ff0:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8001ff2:	e008      	b.n	8002006 <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001ff4:	f7fe fd1c 	bl	8000a30 <HAL_GetTick>
 8001ff8:	0002      	movs	r2, r0
 8001ffa:	69bb      	ldr	r3, [r7, #24]
 8001ffc:	1ad3      	subs	r3, r2, r3
 8001ffe:	2b02      	cmp	r3, #2
 8002000:	d901      	bls.n	8002006 <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 8002002:	2303      	movs	r3, #3
 8002004:	e0b2      	b.n	800216c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8002006:	4b38      	ldr	r3, [pc, #224]	; (80020e8 <HAL_RCC_OscConfig+0x67c>)
 8002008:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800200a:	2380      	movs	r3, #128	; 0x80
 800200c:	025b      	lsls	r3, r3, #9
 800200e:	4013      	ands	r3, r2
 8002010:	d1f0      	bne.n	8001ff4 <HAL_RCC_OscConfig+0x588>
 8002012:	e000      	b.n	8002016 <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8002014:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800201a:	2b00      	cmp	r3, #0
 800201c:	d100      	bne.n	8002020 <HAL_RCC_OscConfig+0x5b4>
 800201e:	e0a4      	b.n	800216a <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002020:	4b31      	ldr	r3, [pc, #196]	; (80020e8 <HAL_RCC_OscConfig+0x67c>)
 8002022:	685b      	ldr	r3, [r3, #4]
 8002024:	220c      	movs	r2, #12
 8002026:	4013      	ands	r3, r2
 8002028:	2b08      	cmp	r3, #8
 800202a:	d100      	bne.n	800202e <HAL_RCC_OscConfig+0x5c2>
 800202c:	e078      	b.n	8002120 <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002032:	2b02      	cmp	r3, #2
 8002034:	d14c      	bne.n	80020d0 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002036:	4b2c      	ldr	r3, [pc, #176]	; (80020e8 <HAL_RCC_OscConfig+0x67c>)
 8002038:	681a      	ldr	r2, [r3, #0]
 800203a:	4b2b      	ldr	r3, [pc, #172]	; (80020e8 <HAL_RCC_OscConfig+0x67c>)
 800203c:	492e      	ldr	r1, [pc, #184]	; (80020f8 <HAL_RCC_OscConfig+0x68c>)
 800203e:	400a      	ands	r2, r1
 8002040:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002042:	f7fe fcf5 	bl	8000a30 <HAL_GetTick>
 8002046:	0003      	movs	r3, r0
 8002048:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800204a:	e008      	b.n	800205e <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800204c:	f7fe fcf0 	bl	8000a30 <HAL_GetTick>
 8002050:	0002      	movs	r2, r0
 8002052:	69bb      	ldr	r3, [r7, #24]
 8002054:	1ad3      	subs	r3, r2, r3
 8002056:	2b02      	cmp	r3, #2
 8002058:	d901      	bls.n	800205e <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 800205a:	2303      	movs	r3, #3
 800205c:	e086      	b.n	800216c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800205e:	4b22      	ldr	r3, [pc, #136]	; (80020e8 <HAL_RCC_OscConfig+0x67c>)
 8002060:	681a      	ldr	r2, [r3, #0]
 8002062:	2380      	movs	r3, #128	; 0x80
 8002064:	049b      	lsls	r3, r3, #18
 8002066:	4013      	ands	r3, r2
 8002068:	d1f0      	bne.n	800204c <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800206a:	4b1f      	ldr	r3, [pc, #124]	; (80020e8 <HAL_RCC_OscConfig+0x67c>)
 800206c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800206e:	220f      	movs	r2, #15
 8002070:	4393      	bics	r3, r2
 8002072:	0019      	movs	r1, r3
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002078:	4b1b      	ldr	r3, [pc, #108]	; (80020e8 <HAL_RCC_OscConfig+0x67c>)
 800207a:	430a      	orrs	r2, r1
 800207c:	62da      	str	r2, [r3, #44]	; 0x2c
 800207e:	4b1a      	ldr	r3, [pc, #104]	; (80020e8 <HAL_RCC_OscConfig+0x67c>)
 8002080:	685b      	ldr	r3, [r3, #4]
 8002082:	4a1e      	ldr	r2, [pc, #120]	; (80020fc <HAL_RCC_OscConfig+0x690>)
 8002084:	4013      	ands	r3, r2
 8002086:	0019      	movs	r1, r3
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002090:	431a      	orrs	r2, r3
 8002092:	4b15      	ldr	r3, [pc, #84]	; (80020e8 <HAL_RCC_OscConfig+0x67c>)
 8002094:	430a      	orrs	r2, r1
 8002096:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002098:	4b13      	ldr	r3, [pc, #76]	; (80020e8 <HAL_RCC_OscConfig+0x67c>)
 800209a:	681a      	ldr	r2, [r3, #0]
 800209c:	4b12      	ldr	r3, [pc, #72]	; (80020e8 <HAL_RCC_OscConfig+0x67c>)
 800209e:	2180      	movs	r1, #128	; 0x80
 80020a0:	0449      	lsls	r1, r1, #17
 80020a2:	430a      	orrs	r2, r1
 80020a4:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020a6:	f7fe fcc3 	bl	8000a30 <HAL_GetTick>
 80020aa:	0003      	movs	r3, r0
 80020ac:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80020ae:	e008      	b.n	80020c2 <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80020b0:	f7fe fcbe 	bl	8000a30 <HAL_GetTick>
 80020b4:	0002      	movs	r2, r0
 80020b6:	69bb      	ldr	r3, [r7, #24]
 80020b8:	1ad3      	subs	r3, r2, r3
 80020ba:	2b02      	cmp	r3, #2
 80020bc:	d901      	bls.n	80020c2 <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 80020be:	2303      	movs	r3, #3
 80020c0:	e054      	b.n	800216c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80020c2:	4b09      	ldr	r3, [pc, #36]	; (80020e8 <HAL_RCC_OscConfig+0x67c>)
 80020c4:	681a      	ldr	r2, [r3, #0]
 80020c6:	2380      	movs	r3, #128	; 0x80
 80020c8:	049b      	lsls	r3, r3, #18
 80020ca:	4013      	ands	r3, r2
 80020cc:	d0f0      	beq.n	80020b0 <HAL_RCC_OscConfig+0x644>
 80020ce:	e04c      	b.n	800216a <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80020d0:	4b05      	ldr	r3, [pc, #20]	; (80020e8 <HAL_RCC_OscConfig+0x67c>)
 80020d2:	681a      	ldr	r2, [r3, #0]
 80020d4:	4b04      	ldr	r3, [pc, #16]	; (80020e8 <HAL_RCC_OscConfig+0x67c>)
 80020d6:	4908      	ldr	r1, [pc, #32]	; (80020f8 <HAL_RCC_OscConfig+0x68c>)
 80020d8:	400a      	ands	r2, r1
 80020da:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020dc:	f7fe fca8 	bl	8000a30 <HAL_GetTick>
 80020e0:	0003      	movs	r3, r0
 80020e2:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80020e4:	e015      	b.n	8002112 <HAL_RCC_OscConfig+0x6a6>
 80020e6:	46c0      	nop			; (mov r8, r8)
 80020e8:	40021000 	.word	0x40021000
 80020ec:	00001388 	.word	0x00001388
 80020f0:	efffffff 	.word	0xefffffff
 80020f4:	fffeffff 	.word	0xfffeffff
 80020f8:	feffffff 	.word	0xfeffffff
 80020fc:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002100:	f7fe fc96 	bl	8000a30 <HAL_GetTick>
 8002104:	0002      	movs	r2, r0
 8002106:	69bb      	ldr	r3, [r7, #24]
 8002108:	1ad3      	subs	r3, r2, r3
 800210a:	2b02      	cmp	r3, #2
 800210c:	d901      	bls.n	8002112 <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 800210e:	2303      	movs	r3, #3
 8002110:	e02c      	b.n	800216c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002112:	4b18      	ldr	r3, [pc, #96]	; (8002174 <HAL_RCC_OscConfig+0x708>)
 8002114:	681a      	ldr	r2, [r3, #0]
 8002116:	2380      	movs	r3, #128	; 0x80
 8002118:	049b      	lsls	r3, r3, #18
 800211a:	4013      	ands	r3, r2
 800211c:	d1f0      	bne.n	8002100 <HAL_RCC_OscConfig+0x694>
 800211e:	e024      	b.n	800216a <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002124:	2b01      	cmp	r3, #1
 8002126:	d101      	bne.n	800212c <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 8002128:	2301      	movs	r3, #1
 800212a:	e01f      	b.n	800216c <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 800212c:	4b11      	ldr	r3, [pc, #68]	; (8002174 <HAL_RCC_OscConfig+0x708>)
 800212e:	685b      	ldr	r3, [r3, #4]
 8002130:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8002132:	4b10      	ldr	r3, [pc, #64]	; (8002174 <HAL_RCC_OscConfig+0x708>)
 8002134:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002136:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002138:	697a      	ldr	r2, [r7, #20]
 800213a:	23c0      	movs	r3, #192	; 0xc0
 800213c:	025b      	lsls	r3, r3, #9
 800213e:	401a      	ands	r2, r3
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002144:	429a      	cmp	r2, r3
 8002146:	d10e      	bne.n	8002166 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8002148:	693b      	ldr	r3, [r7, #16]
 800214a:	220f      	movs	r2, #15
 800214c:	401a      	ands	r2, r3
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002152:	429a      	cmp	r2, r3
 8002154:	d107      	bne.n	8002166 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8002156:	697a      	ldr	r2, [r7, #20]
 8002158:	23f0      	movs	r3, #240	; 0xf0
 800215a:	039b      	lsls	r3, r3, #14
 800215c:	401a      	ands	r2, r3
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8002162:	429a      	cmp	r2, r3
 8002164:	d001      	beq.n	800216a <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 8002166:	2301      	movs	r3, #1
 8002168:	e000      	b.n	800216c <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 800216a:	2300      	movs	r3, #0
}
 800216c:	0018      	movs	r0, r3
 800216e:	46bd      	mov	sp, r7
 8002170:	b008      	add	sp, #32
 8002172:	bd80      	pop	{r7, pc}
 8002174:	40021000 	.word	0x40021000

08002178 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002178:	b580      	push	{r7, lr}
 800217a:	b084      	sub	sp, #16
 800217c:	af00      	add	r7, sp, #0
 800217e:	6078      	str	r0, [r7, #4]
 8002180:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	2b00      	cmp	r3, #0
 8002186:	d101      	bne.n	800218c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002188:	2301      	movs	r3, #1
 800218a:	e0bf      	b.n	800230c <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800218c:	4b61      	ldr	r3, [pc, #388]	; (8002314 <HAL_RCC_ClockConfig+0x19c>)
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	2201      	movs	r2, #1
 8002192:	4013      	ands	r3, r2
 8002194:	683a      	ldr	r2, [r7, #0]
 8002196:	429a      	cmp	r2, r3
 8002198:	d911      	bls.n	80021be <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800219a:	4b5e      	ldr	r3, [pc, #376]	; (8002314 <HAL_RCC_ClockConfig+0x19c>)
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	2201      	movs	r2, #1
 80021a0:	4393      	bics	r3, r2
 80021a2:	0019      	movs	r1, r3
 80021a4:	4b5b      	ldr	r3, [pc, #364]	; (8002314 <HAL_RCC_ClockConfig+0x19c>)
 80021a6:	683a      	ldr	r2, [r7, #0]
 80021a8:	430a      	orrs	r2, r1
 80021aa:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80021ac:	4b59      	ldr	r3, [pc, #356]	; (8002314 <HAL_RCC_ClockConfig+0x19c>)
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	2201      	movs	r2, #1
 80021b2:	4013      	ands	r3, r2
 80021b4:	683a      	ldr	r2, [r7, #0]
 80021b6:	429a      	cmp	r2, r3
 80021b8:	d001      	beq.n	80021be <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 80021ba:	2301      	movs	r3, #1
 80021bc:	e0a6      	b.n	800230c <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	2202      	movs	r2, #2
 80021c4:	4013      	ands	r3, r2
 80021c6:	d015      	beq.n	80021f4 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	2204      	movs	r2, #4
 80021ce:	4013      	ands	r3, r2
 80021d0:	d006      	beq.n	80021e0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80021d2:	4b51      	ldr	r3, [pc, #324]	; (8002318 <HAL_RCC_ClockConfig+0x1a0>)
 80021d4:	685a      	ldr	r2, [r3, #4]
 80021d6:	4b50      	ldr	r3, [pc, #320]	; (8002318 <HAL_RCC_ClockConfig+0x1a0>)
 80021d8:	21e0      	movs	r1, #224	; 0xe0
 80021da:	00c9      	lsls	r1, r1, #3
 80021dc:	430a      	orrs	r2, r1
 80021de:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80021e0:	4b4d      	ldr	r3, [pc, #308]	; (8002318 <HAL_RCC_ClockConfig+0x1a0>)
 80021e2:	685b      	ldr	r3, [r3, #4]
 80021e4:	22f0      	movs	r2, #240	; 0xf0
 80021e6:	4393      	bics	r3, r2
 80021e8:	0019      	movs	r1, r3
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	689a      	ldr	r2, [r3, #8]
 80021ee:	4b4a      	ldr	r3, [pc, #296]	; (8002318 <HAL_RCC_ClockConfig+0x1a0>)
 80021f0:	430a      	orrs	r2, r1
 80021f2:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	2201      	movs	r2, #1
 80021fa:	4013      	ands	r3, r2
 80021fc:	d04c      	beq.n	8002298 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	685b      	ldr	r3, [r3, #4]
 8002202:	2b01      	cmp	r3, #1
 8002204:	d107      	bne.n	8002216 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002206:	4b44      	ldr	r3, [pc, #272]	; (8002318 <HAL_RCC_ClockConfig+0x1a0>)
 8002208:	681a      	ldr	r2, [r3, #0]
 800220a:	2380      	movs	r3, #128	; 0x80
 800220c:	029b      	lsls	r3, r3, #10
 800220e:	4013      	ands	r3, r2
 8002210:	d120      	bne.n	8002254 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8002212:	2301      	movs	r3, #1
 8002214:	e07a      	b.n	800230c <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	685b      	ldr	r3, [r3, #4]
 800221a:	2b02      	cmp	r3, #2
 800221c:	d107      	bne.n	800222e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800221e:	4b3e      	ldr	r3, [pc, #248]	; (8002318 <HAL_RCC_ClockConfig+0x1a0>)
 8002220:	681a      	ldr	r2, [r3, #0]
 8002222:	2380      	movs	r3, #128	; 0x80
 8002224:	049b      	lsls	r3, r3, #18
 8002226:	4013      	ands	r3, r2
 8002228:	d114      	bne.n	8002254 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 800222a:	2301      	movs	r3, #1
 800222c:	e06e      	b.n	800230c <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	685b      	ldr	r3, [r3, #4]
 8002232:	2b03      	cmp	r3, #3
 8002234:	d107      	bne.n	8002246 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8002236:	4b38      	ldr	r3, [pc, #224]	; (8002318 <HAL_RCC_ClockConfig+0x1a0>)
 8002238:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800223a:	2380      	movs	r3, #128	; 0x80
 800223c:	025b      	lsls	r3, r3, #9
 800223e:	4013      	ands	r3, r2
 8002240:	d108      	bne.n	8002254 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8002242:	2301      	movs	r3, #1
 8002244:	e062      	b.n	800230c <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002246:	4b34      	ldr	r3, [pc, #208]	; (8002318 <HAL_RCC_ClockConfig+0x1a0>)
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	2202      	movs	r2, #2
 800224c:	4013      	ands	r3, r2
 800224e:	d101      	bne.n	8002254 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8002250:	2301      	movs	r3, #1
 8002252:	e05b      	b.n	800230c <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002254:	4b30      	ldr	r3, [pc, #192]	; (8002318 <HAL_RCC_ClockConfig+0x1a0>)
 8002256:	685b      	ldr	r3, [r3, #4]
 8002258:	2203      	movs	r2, #3
 800225a:	4393      	bics	r3, r2
 800225c:	0019      	movs	r1, r3
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	685a      	ldr	r2, [r3, #4]
 8002262:	4b2d      	ldr	r3, [pc, #180]	; (8002318 <HAL_RCC_ClockConfig+0x1a0>)
 8002264:	430a      	orrs	r2, r1
 8002266:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002268:	f7fe fbe2 	bl	8000a30 <HAL_GetTick>
 800226c:	0003      	movs	r3, r0
 800226e:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002270:	e009      	b.n	8002286 <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002272:	f7fe fbdd 	bl	8000a30 <HAL_GetTick>
 8002276:	0002      	movs	r2, r0
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	1ad3      	subs	r3, r2, r3
 800227c:	4a27      	ldr	r2, [pc, #156]	; (800231c <HAL_RCC_ClockConfig+0x1a4>)
 800227e:	4293      	cmp	r3, r2
 8002280:	d901      	bls.n	8002286 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002282:	2303      	movs	r3, #3
 8002284:	e042      	b.n	800230c <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002286:	4b24      	ldr	r3, [pc, #144]	; (8002318 <HAL_RCC_ClockConfig+0x1a0>)
 8002288:	685b      	ldr	r3, [r3, #4]
 800228a:	220c      	movs	r2, #12
 800228c:	401a      	ands	r2, r3
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	685b      	ldr	r3, [r3, #4]
 8002292:	009b      	lsls	r3, r3, #2
 8002294:	429a      	cmp	r2, r3
 8002296:	d1ec      	bne.n	8002272 <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002298:	4b1e      	ldr	r3, [pc, #120]	; (8002314 <HAL_RCC_ClockConfig+0x19c>)
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	2201      	movs	r2, #1
 800229e:	4013      	ands	r3, r2
 80022a0:	683a      	ldr	r2, [r7, #0]
 80022a2:	429a      	cmp	r2, r3
 80022a4:	d211      	bcs.n	80022ca <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022a6:	4b1b      	ldr	r3, [pc, #108]	; (8002314 <HAL_RCC_ClockConfig+0x19c>)
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	2201      	movs	r2, #1
 80022ac:	4393      	bics	r3, r2
 80022ae:	0019      	movs	r1, r3
 80022b0:	4b18      	ldr	r3, [pc, #96]	; (8002314 <HAL_RCC_ClockConfig+0x19c>)
 80022b2:	683a      	ldr	r2, [r7, #0]
 80022b4:	430a      	orrs	r2, r1
 80022b6:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80022b8:	4b16      	ldr	r3, [pc, #88]	; (8002314 <HAL_RCC_ClockConfig+0x19c>)
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	2201      	movs	r2, #1
 80022be:	4013      	ands	r3, r2
 80022c0:	683a      	ldr	r2, [r7, #0]
 80022c2:	429a      	cmp	r2, r3
 80022c4:	d001      	beq.n	80022ca <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 80022c6:	2301      	movs	r3, #1
 80022c8:	e020      	b.n	800230c <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	2204      	movs	r2, #4
 80022d0:	4013      	ands	r3, r2
 80022d2:	d009      	beq.n	80022e8 <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80022d4:	4b10      	ldr	r3, [pc, #64]	; (8002318 <HAL_RCC_ClockConfig+0x1a0>)
 80022d6:	685b      	ldr	r3, [r3, #4]
 80022d8:	4a11      	ldr	r2, [pc, #68]	; (8002320 <HAL_RCC_ClockConfig+0x1a8>)
 80022da:	4013      	ands	r3, r2
 80022dc:	0019      	movs	r1, r3
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	68da      	ldr	r2, [r3, #12]
 80022e2:	4b0d      	ldr	r3, [pc, #52]	; (8002318 <HAL_RCC_ClockConfig+0x1a0>)
 80022e4:	430a      	orrs	r2, r1
 80022e6:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80022e8:	f000 f820 	bl	800232c <HAL_RCC_GetSysClockFreq>
 80022ec:	0001      	movs	r1, r0
 80022ee:	4b0a      	ldr	r3, [pc, #40]	; (8002318 <HAL_RCC_ClockConfig+0x1a0>)
 80022f0:	685b      	ldr	r3, [r3, #4]
 80022f2:	091b      	lsrs	r3, r3, #4
 80022f4:	220f      	movs	r2, #15
 80022f6:	4013      	ands	r3, r2
 80022f8:	4a0a      	ldr	r2, [pc, #40]	; (8002324 <HAL_RCC_ClockConfig+0x1ac>)
 80022fa:	5cd3      	ldrb	r3, [r2, r3]
 80022fc:	000a      	movs	r2, r1
 80022fe:	40da      	lsrs	r2, r3
 8002300:	4b09      	ldr	r3, [pc, #36]	; (8002328 <HAL_RCC_ClockConfig+0x1b0>)
 8002302:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8002304:	2000      	movs	r0, #0
 8002306:	f7fe fb4d 	bl	80009a4 <HAL_InitTick>
  
  return HAL_OK;
 800230a:	2300      	movs	r3, #0
}
 800230c:	0018      	movs	r0, r3
 800230e:	46bd      	mov	sp, r7
 8002310:	b004      	add	sp, #16
 8002312:	bd80      	pop	{r7, pc}
 8002314:	40022000 	.word	0x40022000
 8002318:	40021000 	.word	0x40021000
 800231c:	00001388 	.word	0x00001388
 8002320:	fffff8ff 	.word	0xfffff8ff
 8002324:	0800350c 	.word	0x0800350c
 8002328:	20000008 	.word	0x20000008

0800232c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800232c:	b590      	push	{r4, r7, lr}
 800232e:	b08f      	sub	sp, #60	; 0x3c
 8002330:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8002332:	2314      	movs	r3, #20
 8002334:	18fb      	adds	r3, r7, r3
 8002336:	4a37      	ldr	r2, [pc, #220]	; (8002414 <HAL_RCC_GetSysClockFreq+0xe8>)
 8002338:	ca13      	ldmia	r2!, {r0, r1, r4}
 800233a:	c313      	stmia	r3!, {r0, r1, r4}
 800233c:	6812      	ldr	r2, [r2, #0]
 800233e:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8002340:	1d3b      	adds	r3, r7, #4
 8002342:	4a35      	ldr	r2, [pc, #212]	; (8002418 <HAL_RCC_GetSysClockFreq+0xec>)
 8002344:	ca13      	ldmia	r2!, {r0, r1, r4}
 8002346:	c313      	stmia	r3!, {r0, r1, r4}
 8002348:	6812      	ldr	r2, [r2, #0]
 800234a:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800234c:	2300      	movs	r3, #0
 800234e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002350:	2300      	movs	r3, #0
 8002352:	62bb      	str	r3, [r7, #40]	; 0x28
 8002354:	2300      	movs	r3, #0
 8002356:	637b      	str	r3, [r7, #52]	; 0x34
 8002358:	2300      	movs	r3, #0
 800235a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 800235c:	2300      	movs	r3, #0
 800235e:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8002360:	4b2e      	ldr	r3, [pc, #184]	; (800241c <HAL_RCC_GetSysClockFreq+0xf0>)
 8002362:	685b      	ldr	r3, [r3, #4]
 8002364:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002366:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002368:	220c      	movs	r2, #12
 800236a:	4013      	ands	r3, r2
 800236c:	2b08      	cmp	r3, #8
 800236e:	d006      	beq.n	800237e <HAL_RCC_GetSysClockFreq+0x52>
 8002370:	2b0c      	cmp	r3, #12
 8002372:	d043      	beq.n	80023fc <HAL_RCC_GetSysClockFreq+0xd0>
 8002374:	2b04      	cmp	r3, #4
 8002376:	d144      	bne.n	8002402 <HAL_RCC_GetSysClockFreq+0xd6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002378:	4b29      	ldr	r3, [pc, #164]	; (8002420 <HAL_RCC_GetSysClockFreq+0xf4>)
 800237a:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800237c:	e044      	b.n	8002408 <HAL_RCC_GetSysClockFreq+0xdc>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 800237e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002380:	0c9b      	lsrs	r3, r3, #18
 8002382:	220f      	movs	r2, #15
 8002384:	4013      	ands	r3, r2
 8002386:	2214      	movs	r2, #20
 8002388:	18ba      	adds	r2, r7, r2
 800238a:	5cd3      	ldrb	r3, [r2, r3]
 800238c:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 800238e:	4b23      	ldr	r3, [pc, #140]	; (800241c <HAL_RCC_GetSysClockFreq+0xf0>)
 8002390:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002392:	220f      	movs	r2, #15
 8002394:	4013      	ands	r3, r2
 8002396:	1d3a      	adds	r2, r7, #4
 8002398:	5cd3      	ldrb	r3, [r2, r3]
 800239a:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800239c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800239e:	23c0      	movs	r3, #192	; 0xc0
 80023a0:	025b      	lsls	r3, r3, #9
 80023a2:	401a      	ands	r2, r3
 80023a4:	2380      	movs	r3, #128	; 0x80
 80023a6:	025b      	lsls	r3, r3, #9
 80023a8:	429a      	cmp	r2, r3
 80023aa:	d109      	bne.n	80023c0 <HAL_RCC_GetSysClockFreq+0x94>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80023ac:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80023ae:	481c      	ldr	r0, [pc, #112]	; (8002420 <HAL_RCC_GetSysClockFreq+0xf4>)
 80023b0:	f7fd feaa 	bl	8000108 <__udivsi3>
 80023b4:	0003      	movs	r3, r0
 80023b6:	001a      	movs	r2, r3
 80023b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023ba:	4353      	muls	r3, r2
 80023bc:	637b      	str	r3, [r7, #52]	; 0x34
 80023be:	e01a      	b.n	80023f6 <HAL_RCC_GetSysClockFreq+0xca>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 80023c0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80023c2:	23c0      	movs	r3, #192	; 0xc0
 80023c4:	025b      	lsls	r3, r3, #9
 80023c6:	401a      	ands	r2, r3
 80023c8:	23c0      	movs	r3, #192	; 0xc0
 80023ca:	025b      	lsls	r3, r3, #9
 80023cc:	429a      	cmp	r2, r3
 80023ce:	d109      	bne.n	80023e4 <HAL_RCC_GetSysClockFreq+0xb8>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80023d0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80023d2:	4814      	ldr	r0, [pc, #80]	; (8002424 <HAL_RCC_GetSysClockFreq+0xf8>)
 80023d4:	f7fd fe98 	bl	8000108 <__udivsi3>
 80023d8:	0003      	movs	r3, r0
 80023da:	001a      	movs	r2, r3
 80023dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023de:	4353      	muls	r3, r2
 80023e0:	637b      	str	r3, [r7, #52]	; 0x34
 80023e2:	e008      	b.n	80023f6 <HAL_RCC_GetSysClockFreq+0xca>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80023e4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80023e6:	480e      	ldr	r0, [pc, #56]	; (8002420 <HAL_RCC_GetSysClockFreq+0xf4>)
 80023e8:	f7fd fe8e 	bl	8000108 <__udivsi3>
 80023ec:	0003      	movs	r3, r0
 80023ee:	001a      	movs	r2, r3
 80023f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023f2:	4353      	muls	r3, r2
 80023f4:	637b      	str	r3, [r7, #52]	; 0x34
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 80023f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80023f8:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80023fa:	e005      	b.n	8002408 <HAL_RCC_GetSysClockFreq+0xdc>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 80023fc:	4b09      	ldr	r3, [pc, #36]	; (8002424 <HAL_RCC_GetSysClockFreq+0xf8>)
 80023fe:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002400:	e002      	b.n	8002408 <HAL_RCC_GetSysClockFreq+0xdc>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002402:	4b07      	ldr	r3, [pc, #28]	; (8002420 <HAL_RCC_GetSysClockFreq+0xf4>)
 8002404:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002406:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8002408:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 800240a:	0018      	movs	r0, r3
 800240c:	46bd      	mov	sp, r7
 800240e:	b00f      	add	sp, #60	; 0x3c
 8002410:	bd90      	pop	{r4, r7, pc}
 8002412:	46c0      	nop			; (mov r8, r8)
 8002414:	080034ec 	.word	0x080034ec
 8002418:	080034fc 	.word	0x080034fc
 800241c:	40021000 	.word	0x40021000
 8002420:	007a1200 	.word	0x007a1200
 8002424:	02dc6c00 	.word	0x02dc6c00

08002428 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002428:	b580      	push	{r7, lr}
 800242a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800242c:	4b02      	ldr	r3, [pc, #8]	; (8002438 <HAL_RCC_GetHCLKFreq+0x10>)
 800242e:	681b      	ldr	r3, [r3, #0]
}
 8002430:	0018      	movs	r0, r3
 8002432:	46bd      	mov	sp, r7
 8002434:	bd80      	pop	{r7, pc}
 8002436:	46c0      	nop			; (mov r8, r8)
 8002438:	20000008 	.word	0x20000008

0800243c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800243c:	b580      	push	{r7, lr}
 800243e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8002440:	f7ff fff2 	bl	8002428 <HAL_RCC_GetHCLKFreq>
 8002444:	0001      	movs	r1, r0
 8002446:	4b06      	ldr	r3, [pc, #24]	; (8002460 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002448:	685b      	ldr	r3, [r3, #4]
 800244a:	0a1b      	lsrs	r3, r3, #8
 800244c:	2207      	movs	r2, #7
 800244e:	4013      	ands	r3, r2
 8002450:	4a04      	ldr	r2, [pc, #16]	; (8002464 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002452:	5cd3      	ldrb	r3, [r2, r3]
 8002454:	40d9      	lsrs	r1, r3
 8002456:	000b      	movs	r3, r1
}    
 8002458:	0018      	movs	r0, r3
 800245a:	46bd      	mov	sp, r7
 800245c:	bd80      	pop	{r7, pc}
 800245e:	46c0      	nop			; (mov r8, r8)
 8002460:	40021000 	.word	0x40021000
 8002464:	0800351c 	.word	0x0800351c

08002468 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002468:	b580      	push	{r7, lr}
 800246a:	b082      	sub	sp, #8
 800246c:	af00      	add	r7, sp, #0
 800246e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	2b00      	cmp	r3, #0
 8002474:	d101      	bne.n	800247a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002476:	2301      	movs	r3, #1
 8002478:	e044      	b.n	8002504 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800247e:	2b00      	cmp	r3, #0
 8002480:	d107      	bne.n	8002492 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	2270      	movs	r2, #112	; 0x70
 8002486:	2100      	movs	r1, #0
 8002488:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	0018      	movs	r0, r3
 800248e:	f7fe f8b9 	bl	8000604 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	2224      	movs	r2, #36	; 0x24
 8002496:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	681a      	ldr	r2, [r3, #0]
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	2101      	movs	r1, #1
 80024a4:	438a      	bics	r2, r1
 80024a6:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	0018      	movs	r0, r3
 80024ac:	f000 f8d8 	bl	8002660 <UART_SetConfig>
 80024b0:	0003      	movs	r3, r0
 80024b2:	2b01      	cmp	r3, #1
 80024b4:	d101      	bne.n	80024ba <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80024b6:	2301      	movs	r3, #1
 80024b8:	e024      	b.n	8002504 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d003      	beq.n	80024ca <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	0018      	movs	r0, r3
 80024c6:	f000 fa51 	bl	800296c <UART_AdvFeatureConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	685a      	ldr	r2, [r3, #4]
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	490d      	ldr	r1, [pc, #52]	; (800250c <HAL_UART_Init+0xa4>)
 80024d6:	400a      	ands	r2, r1
 80024d8:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	689a      	ldr	r2, [r3, #8]
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	212a      	movs	r1, #42	; 0x2a
 80024e6:	438a      	bics	r2, r1
 80024e8:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	681a      	ldr	r2, [r3, #0]
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	2101      	movs	r1, #1
 80024f6:	430a      	orrs	r2, r1
 80024f8:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	0018      	movs	r0, r3
 80024fe:	f000 fae9 	bl	8002ad4 <UART_CheckIdleState>
 8002502:	0003      	movs	r3, r0
}
 8002504:	0018      	movs	r0, r3
 8002506:	46bd      	mov	sp, r7
 8002508:	b002      	add	sp, #8
 800250a:	bd80      	pop	{r7, pc}
 800250c:	ffffb7ff 	.word	0xffffb7ff

08002510 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002510:	b580      	push	{r7, lr}
 8002512:	b08a      	sub	sp, #40	; 0x28
 8002514:	af02      	add	r7, sp, #8
 8002516:	60f8      	str	r0, [r7, #12]
 8002518:	60b9      	str	r1, [r7, #8]
 800251a:	603b      	str	r3, [r7, #0]
 800251c:	1dbb      	adds	r3, r7, #6
 800251e:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002524:	2b20      	cmp	r3, #32
 8002526:	d000      	beq.n	800252a <HAL_UART_Transmit+0x1a>
 8002528:	e095      	b.n	8002656 <HAL_UART_Transmit+0x146>
  {
    if ((pData == NULL) || (Size == 0U))
 800252a:	68bb      	ldr	r3, [r7, #8]
 800252c:	2b00      	cmp	r3, #0
 800252e:	d003      	beq.n	8002538 <HAL_UART_Transmit+0x28>
 8002530:	1dbb      	adds	r3, r7, #6
 8002532:	881b      	ldrh	r3, [r3, #0]
 8002534:	2b00      	cmp	r3, #0
 8002536:	d101      	bne.n	800253c <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8002538:	2301      	movs	r3, #1
 800253a:	e08d      	b.n	8002658 <HAL_UART_Transmit+0x148>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	689a      	ldr	r2, [r3, #8]
 8002540:	2380      	movs	r3, #128	; 0x80
 8002542:	015b      	lsls	r3, r3, #5
 8002544:	429a      	cmp	r2, r3
 8002546:	d109      	bne.n	800255c <HAL_UART_Transmit+0x4c>
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	691b      	ldr	r3, [r3, #16]
 800254c:	2b00      	cmp	r3, #0
 800254e:	d105      	bne.n	800255c <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8002550:	68bb      	ldr	r3, [r7, #8]
 8002552:	2201      	movs	r2, #1
 8002554:	4013      	ands	r3, r2
 8002556:	d001      	beq.n	800255c <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8002558:	2301      	movs	r3, #1
 800255a:	e07d      	b.n	8002658 <HAL_UART_Transmit+0x148>
      }
    }

    __HAL_LOCK(huart);
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	2270      	movs	r2, #112	; 0x70
 8002560:	5c9b      	ldrb	r3, [r3, r2]
 8002562:	2b01      	cmp	r3, #1
 8002564:	d101      	bne.n	800256a <HAL_UART_Transmit+0x5a>
 8002566:	2302      	movs	r3, #2
 8002568:	e076      	b.n	8002658 <HAL_UART_Transmit+0x148>
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	2270      	movs	r2, #112	; 0x70
 800256e:	2101      	movs	r1, #1
 8002570:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	2200      	movs	r2, #0
 8002576:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	2221      	movs	r2, #33	; 0x21
 800257c:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 800257e:	f7fe fa57 	bl	8000a30 <HAL_GetTick>
 8002582:	0003      	movs	r3, r0
 8002584:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	1dba      	adds	r2, r7, #6
 800258a:	2150      	movs	r1, #80	; 0x50
 800258c:	8812      	ldrh	r2, [r2, #0]
 800258e:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	1dba      	adds	r2, r7, #6
 8002594:	2152      	movs	r1, #82	; 0x52
 8002596:	8812      	ldrh	r2, [r2, #0]
 8002598:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	689a      	ldr	r2, [r3, #8]
 800259e:	2380      	movs	r3, #128	; 0x80
 80025a0:	015b      	lsls	r3, r3, #5
 80025a2:	429a      	cmp	r2, r3
 80025a4:	d108      	bne.n	80025b8 <HAL_UART_Transmit+0xa8>
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	691b      	ldr	r3, [r3, #16]
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d104      	bne.n	80025b8 <HAL_UART_Transmit+0xa8>
    {
      pdata8bits  = NULL;
 80025ae:	2300      	movs	r3, #0
 80025b0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80025b2:	68bb      	ldr	r3, [r7, #8]
 80025b4:	61bb      	str	r3, [r7, #24]
 80025b6:	e003      	b.n	80025c0 <HAL_UART_Transmit+0xb0>
    }
    else
    {
      pdata8bits  = pData;
 80025b8:	68bb      	ldr	r3, [r7, #8]
 80025ba:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80025bc:	2300      	movs	r3, #0
 80025be:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80025c0:	e02d      	b.n	800261e <HAL_UART_Transmit+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80025c2:	697a      	ldr	r2, [r7, #20]
 80025c4:	68f8      	ldr	r0, [r7, #12]
 80025c6:	683b      	ldr	r3, [r7, #0]
 80025c8:	9300      	str	r3, [sp, #0]
 80025ca:	0013      	movs	r3, r2
 80025cc:	2200      	movs	r2, #0
 80025ce:	2180      	movs	r1, #128	; 0x80
 80025d0:	f000 fac6 	bl	8002b60 <UART_WaitOnFlagUntilTimeout>
 80025d4:	1e03      	subs	r3, r0, #0
 80025d6:	d001      	beq.n	80025dc <HAL_UART_Transmit+0xcc>
      {
        return HAL_TIMEOUT;
 80025d8:	2303      	movs	r3, #3
 80025da:	e03d      	b.n	8002658 <HAL_UART_Transmit+0x148>
      }
      if (pdata8bits == NULL)
 80025dc:	69fb      	ldr	r3, [r7, #28]
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d10b      	bne.n	80025fa <HAL_UART_Transmit+0xea>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80025e2:	69bb      	ldr	r3, [r7, #24]
 80025e4:	881a      	ldrh	r2, [r3, #0]
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	05d2      	lsls	r2, r2, #23
 80025ec:	0dd2      	lsrs	r2, r2, #23
 80025ee:	b292      	uxth	r2, r2
 80025f0:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80025f2:	69bb      	ldr	r3, [r7, #24]
 80025f4:	3302      	adds	r3, #2
 80025f6:	61bb      	str	r3, [r7, #24]
 80025f8:	e008      	b.n	800260c <HAL_UART_Transmit+0xfc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80025fa:	69fb      	ldr	r3, [r7, #28]
 80025fc:	781a      	ldrb	r2, [r3, #0]
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	b292      	uxth	r2, r2
 8002604:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002606:	69fb      	ldr	r3, [r7, #28]
 8002608:	3301      	adds	r3, #1
 800260a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	2252      	movs	r2, #82	; 0x52
 8002610:	5a9b      	ldrh	r3, [r3, r2]
 8002612:	b29b      	uxth	r3, r3
 8002614:	3b01      	subs	r3, #1
 8002616:	b299      	uxth	r1, r3
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	2252      	movs	r2, #82	; 0x52
 800261c:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	2252      	movs	r2, #82	; 0x52
 8002622:	5a9b      	ldrh	r3, [r3, r2]
 8002624:	b29b      	uxth	r3, r3
 8002626:	2b00      	cmp	r3, #0
 8002628:	d1cb      	bne.n	80025c2 <HAL_UART_Transmit+0xb2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800262a:	697a      	ldr	r2, [r7, #20]
 800262c:	68f8      	ldr	r0, [r7, #12]
 800262e:	683b      	ldr	r3, [r7, #0]
 8002630:	9300      	str	r3, [sp, #0]
 8002632:	0013      	movs	r3, r2
 8002634:	2200      	movs	r2, #0
 8002636:	2140      	movs	r1, #64	; 0x40
 8002638:	f000 fa92 	bl	8002b60 <UART_WaitOnFlagUntilTimeout>
 800263c:	1e03      	subs	r3, r0, #0
 800263e:	d001      	beq.n	8002644 <HAL_UART_Transmit+0x134>
    {
      return HAL_TIMEOUT;
 8002640:	2303      	movs	r3, #3
 8002642:	e009      	b.n	8002658 <HAL_UART_Transmit+0x148>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	2220      	movs	r2, #32
 8002648:	675a      	str	r2, [r3, #116]	; 0x74

    __HAL_UNLOCK(huart);
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	2270      	movs	r2, #112	; 0x70
 800264e:	2100      	movs	r1, #0
 8002650:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002652:	2300      	movs	r3, #0
 8002654:	e000      	b.n	8002658 <HAL_UART_Transmit+0x148>
  }
  else
  {
    return HAL_BUSY;
 8002656:	2302      	movs	r3, #2
  }
}
 8002658:	0018      	movs	r0, r3
 800265a:	46bd      	mov	sp, r7
 800265c:	b008      	add	sp, #32
 800265e:	bd80      	pop	{r7, pc}

08002660 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002660:	b580      	push	{r7, lr}
 8002662:	b088      	sub	sp, #32
 8002664:	af00      	add	r7, sp, #0
 8002666:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8002668:	2300      	movs	r3, #0
 800266a:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 800266c:	2317      	movs	r3, #23
 800266e:	18fb      	adds	r3, r7, r3
 8002670:	2200      	movs	r2, #0
 8002672:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	689a      	ldr	r2, [r3, #8]
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	691b      	ldr	r3, [r3, #16]
 800267c:	431a      	orrs	r2, r3
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	695b      	ldr	r3, [r3, #20]
 8002682:	431a      	orrs	r2, r3
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	69db      	ldr	r3, [r3, #28]
 8002688:	4313      	orrs	r3, r2
 800268a:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	4aad      	ldr	r2, [pc, #692]	; (8002948 <UART_SetConfig+0x2e8>)
 8002694:	4013      	ands	r3, r2
 8002696:	0019      	movs	r1, r3
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	693a      	ldr	r2, [r7, #16]
 800269e:	430a      	orrs	r2, r1
 80026a0:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	685b      	ldr	r3, [r3, #4]
 80026a8:	4aa8      	ldr	r2, [pc, #672]	; (800294c <UART_SetConfig+0x2ec>)
 80026aa:	4013      	ands	r3, r2
 80026ac:	0019      	movs	r1, r3
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	68da      	ldr	r2, [r3, #12]
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	430a      	orrs	r2, r1
 80026b8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	699b      	ldr	r3, [r3, #24]
 80026be:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	6a1b      	ldr	r3, [r3, #32]
 80026c4:	693a      	ldr	r2, [r7, #16]
 80026c6:	4313      	orrs	r3, r2
 80026c8:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	689b      	ldr	r3, [r3, #8]
 80026d0:	4a9f      	ldr	r2, [pc, #636]	; (8002950 <UART_SetConfig+0x2f0>)
 80026d2:	4013      	ands	r3, r2
 80026d4:	0019      	movs	r1, r3
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	693a      	ldr	r2, [r7, #16]
 80026dc:	430a      	orrs	r2, r1
 80026de:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	4a9b      	ldr	r2, [pc, #620]	; (8002954 <UART_SetConfig+0x2f4>)
 80026e6:	4293      	cmp	r3, r2
 80026e8:	d125      	bne.n	8002736 <UART_SetConfig+0xd6>
 80026ea:	4b9b      	ldr	r3, [pc, #620]	; (8002958 <UART_SetConfig+0x2f8>)
 80026ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026ee:	2203      	movs	r2, #3
 80026f0:	4013      	ands	r3, r2
 80026f2:	2b01      	cmp	r3, #1
 80026f4:	d00f      	beq.n	8002716 <UART_SetConfig+0xb6>
 80026f6:	d304      	bcc.n	8002702 <UART_SetConfig+0xa2>
 80026f8:	2b02      	cmp	r3, #2
 80026fa:	d011      	beq.n	8002720 <UART_SetConfig+0xc0>
 80026fc:	2b03      	cmp	r3, #3
 80026fe:	d005      	beq.n	800270c <UART_SetConfig+0xac>
 8002700:	e013      	b.n	800272a <UART_SetConfig+0xca>
 8002702:	231f      	movs	r3, #31
 8002704:	18fb      	adds	r3, r7, r3
 8002706:	2200      	movs	r2, #0
 8002708:	701a      	strb	r2, [r3, #0]
 800270a:	e022      	b.n	8002752 <UART_SetConfig+0xf2>
 800270c:	231f      	movs	r3, #31
 800270e:	18fb      	adds	r3, r7, r3
 8002710:	2202      	movs	r2, #2
 8002712:	701a      	strb	r2, [r3, #0]
 8002714:	e01d      	b.n	8002752 <UART_SetConfig+0xf2>
 8002716:	231f      	movs	r3, #31
 8002718:	18fb      	adds	r3, r7, r3
 800271a:	2204      	movs	r2, #4
 800271c:	701a      	strb	r2, [r3, #0]
 800271e:	e018      	b.n	8002752 <UART_SetConfig+0xf2>
 8002720:	231f      	movs	r3, #31
 8002722:	18fb      	adds	r3, r7, r3
 8002724:	2208      	movs	r2, #8
 8002726:	701a      	strb	r2, [r3, #0]
 8002728:	e013      	b.n	8002752 <UART_SetConfig+0xf2>
 800272a:	231f      	movs	r3, #31
 800272c:	18fb      	adds	r3, r7, r3
 800272e:	2210      	movs	r2, #16
 8002730:	701a      	strb	r2, [r3, #0]
 8002732:	46c0      	nop			; (mov r8, r8)
 8002734:	e00d      	b.n	8002752 <UART_SetConfig+0xf2>
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	4a88      	ldr	r2, [pc, #544]	; (800295c <UART_SetConfig+0x2fc>)
 800273c:	4293      	cmp	r3, r2
 800273e:	d104      	bne.n	800274a <UART_SetConfig+0xea>
 8002740:	231f      	movs	r3, #31
 8002742:	18fb      	adds	r3, r7, r3
 8002744:	2200      	movs	r2, #0
 8002746:	701a      	strb	r2, [r3, #0]
 8002748:	e003      	b.n	8002752 <UART_SetConfig+0xf2>
 800274a:	231f      	movs	r3, #31
 800274c:	18fb      	adds	r3, r7, r3
 800274e:	2210      	movs	r2, #16
 8002750:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	69da      	ldr	r2, [r3, #28]
 8002756:	2380      	movs	r3, #128	; 0x80
 8002758:	021b      	lsls	r3, r3, #8
 800275a:	429a      	cmp	r2, r3
 800275c:	d000      	beq.n	8002760 <UART_SetConfig+0x100>
 800275e:	e07d      	b.n	800285c <UART_SetConfig+0x1fc>
  {
    switch (clocksource)
 8002760:	231f      	movs	r3, #31
 8002762:	18fb      	adds	r3, r7, r3
 8002764:	781b      	ldrb	r3, [r3, #0]
 8002766:	2b02      	cmp	r3, #2
 8002768:	d01c      	beq.n	80027a4 <UART_SetConfig+0x144>
 800276a:	dc02      	bgt.n	8002772 <UART_SetConfig+0x112>
 800276c:	2b00      	cmp	r3, #0
 800276e:	d005      	beq.n	800277c <UART_SetConfig+0x11c>
 8002770:	e04b      	b.n	800280a <UART_SetConfig+0x1aa>
 8002772:	2b04      	cmp	r3, #4
 8002774:	d025      	beq.n	80027c2 <UART_SetConfig+0x162>
 8002776:	2b08      	cmp	r3, #8
 8002778:	d037      	beq.n	80027ea <UART_SetConfig+0x18a>
 800277a:	e046      	b.n	800280a <UART_SetConfig+0x1aa>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800277c:	f7ff fe5e 	bl	800243c <HAL_RCC_GetPCLK1Freq>
 8002780:	0003      	movs	r3, r0
 8002782:	60fb      	str	r3, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	005a      	lsls	r2, r3, #1
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	685b      	ldr	r3, [r3, #4]
 800278c:	085b      	lsrs	r3, r3, #1
 800278e:	18d2      	adds	r2, r2, r3
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	685b      	ldr	r3, [r3, #4]
 8002794:	0019      	movs	r1, r3
 8002796:	0010      	movs	r0, r2
 8002798:	f7fd fcb6 	bl	8000108 <__udivsi3>
 800279c:	0003      	movs	r3, r0
 800279e:	b29b      	uxth	r3, r3
 80027a0:	61bb      	str	r3, [r7, #24]
        break;
 80027a2:	e037      	b.n	8002814 <UART_SetConfig+0x1b4>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	685b      	ldr	r3, [r3, #4]
 80027a8:	085b      	lsrs	r3, r3, #1
 80027aa:	4a6d      	ldr	r2, [pc, #436]	; (8002960 <UART_SetConfig+0x300>)
 80027ac:	189a      	adds	r2, r3, r2
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	685b      	ldr	r3, [r3, #4]
 80027b2:	0019      	movs	r1, r3
 80027b4:	0010      	movs	r0, r2
 80027b6:	f7fd fca7 	bl	8000108 <__udivsi3>
 80027ba:	0003      	movs	r3, r0
 80027bc:	b29b      	uxth	r3, r3
 80027be:	61bb      	str	r3, [r7, #24]
        break;
 80027c0:	e028      	b.n	8002814 <UART_SetConfig+0x1b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80027c2:	f7ff fdb3 	bl	800232c <HAL_RCC_GetSysClockFreq>
 80027c6:	0003      	movs	r3, r0
 80027c8:	60fb      	str	r3, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	005a      	lsls	r2, r3, #1
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	685b      	ldr	r3, [r3, #4]
 80027d2:	085b      	lsrs	r3, r3, #1
 80027d4:	18d2      	adds	r2, r2, r3
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	685b      	ldr	r3, [r3, #4]
 80027da:	0019      	movs	r1, r3
 80027dc:	0010      	movs	r0, r2
 80027de:	f7fd fc93 	bl	8000108 <__udivsi3>
 80027e2:	0003      	movs	r3, r0
 80027e4:	b29b      	uxth	r3, r3
 80027e6:	61bb      	str	r3, [r7, #24]
        break;
 80027e8:	e014      	b.n	8002814 <UART_SetConfig+0x1b4>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	685b      	ldr	r3, [r3, #4]
 80027ee:	085b      	lsrs	r3, r3, #1
 80027f0:	2280      	movs	r2, #128	; 0x80
 80027f2:	0252      	lsls	r2, r2, #9
 80027f4:	189a      	adds	r2, r3, r2
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	685b      	ldr	r3, [r3, #4]
 80027fa:	0019      	movs	r1, r3
 80027fc:	0010      	movs	r0, r2
 80027fe:	f7fd fc83 	bl	8000108 <__udivsi3>
 8002802:	0003      	movs	r3, r0
 8002804:	b29b      	uxth	r3, r3
 8002806:	61bb      	str	r3, [r7, #24]
        break;
 8002808:	e004      	b.n	8002814 <UART_SetConfig+0x1b4>
      default:
        ret = HAL_ERROR;
 800280a:	2317      	movs	r3, #23
 800280c:	18fb      	adds	r3, r7, r3
 800280e:	2201      	movs	r2, #1
 8002810:	701a      	strb	r2, [r3, #0]
        break;
 8002812:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002814:	69bb      	ldr	r3, [r7, #24]
 8002816:	2b0f      	cmp	r3, #15
 8002818:	d91b      	bls.n	8002852 <UART_SetConfig+0x1f2>
 800281a:	69bb      	ldr	r3, [r7, #24]
 800281c:	4a51      	ldr	r2, [pc, #324]	; (8002964 <UART_SetConfig+0x304>)
 800281e:	4293      	cmp	r3, r2
 8002820:	d817      	bhi.n	8002852 <UART_SetConfig+0x1f2>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002822:	69bb      	ldr	r3, [r7, #24]
 8002824:	b29a      	uxth	r2, r3
 8002826:	200a      	movs	r0, #10
 8002828:	183b      	adds	r3, r7, r0
 800282a:	210f      	movs	r1, #15
 800282c:	438a      	bics	r2, r1
 800282e:	801a      	strh	r2, [r3, #0]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002830:	69bb      	ldr	r3, [r7, #24]
 8002832:	085b      	lsrs	r3, r3, #1
 8002834:	b29b      	uxth	r3, r3
 8002836:	2207      	movs	r2, #7
 8002838:	4013      	ands	r3, r2
 800283a:	b299      	uxth	r1, r3
 800283c:	183b      	adds	r3, r7, r0
 800283e:	183a      	adds	r2, r7, r0
 8002840:	8812      	ldrh	r2, [r2, #0]
 8002842:	430a      	orrs	r2, r1
 8002844:	801a      	strh	r2, [r3, #0]
      huart->Instance->BRR = brrtemp;
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	183a      	adds	r2, r7, r0
 800284c:	8812      	ldrh	r2, [r2, #0]
 800284e:	60da      	str	r2, [r3, #12]
 8002850:	e06c      	b.n	800292c <UART_SetConfig+0x2cc>
    }
    else
    {
      ret = HAL_ERROR;
 8002852:	2317      	movs	r3, #23
 8002854:	18fb      	adds	r3, r7, r3
 8002856:	2201      	movs	r2, #1
 8002858:	701a      	strb	r2, [r3, #0]
 800285a:	e067      	b.n	800292c <UART_SetConfig+0x2cc>
    }
  }
  else
  {
    switch (clocksource)
 800285c:	231f      	movs	r3, #31
 800285e:	18fb      	adds	r3, r7, r3
 8002860:	781b      	ldrb	r3, [r3, #0]
 8002862:	2b02      	cmp	r3, #2
 8002864:	d01b      	beq.n	800289e <UART_SetConfig+0x23e>
 8002866:	dc02      	bgt.n	800286e <UART_SetConfig+0x20e>
 8002868:	2b00      	cmp	r3, #0
 800286a:	d005      	beq.n	8002878 <UART_SetConfig+0x218>
 800286c:	e049      	b.n	8002902 <UART_SetConfig+0x2a2>
 800286e:	2b04      	cmp	r3, #4
 8002870:	d024      	beq.n	80028bc <UART_SetConfig+0x25c>
 8002872:	2b08      	cmp	r3, #8
 8002874:	d035      	beq.n	80028e2 <UART_SetConfig+0x282>
 8002876:	e044      	b.n	8002902 <UART_SetConfig+0x2a2>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002878:	f7ff fde0 	bl	800243c <HAL_RCC_GetPCLK1Freq>
 800287c:	0003      	movs	r3, r0
 800287e:	60fb      	str	r3, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	685b      	ldr	r3, [r3, #4]
 8002884:	085a      	lsrs	r2, r3, #1
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	18d2      	adds	r2, r2, r3
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	685b      	ldr	r3, [r3, #4]
 800288e:	0019      	movs	r1, r3
 8002890:	0010      	movs	r0, r2
 8002892:	f7fd fc39 	bl	8000108 <__udivsi3>
 8002896:	0003      	movs	r3, r0
 8002898:	b29b      	uxth	r3, r3
 800289a:	61bb      	str	r3, [r7, #24]
        break;
 800289c:	e036      	b.n	800290c <UART_SetConfig+0x2ac>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	685b      	ldr	r3, [r3, #4]
 80028a2:	085b      	lsrs	r3, r3, #1
 80028a4:	4a30      	ldr	r2, [pc, #192]	; (8002968 <UART_SetConfig+0x308>)
 80028a6:	189a      	adds	r2, r3, r2
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	685b      	ldr	r3, [r3, #4]
 80028ac:	0019      	movs	r1, r3
 80028ae:	0010      	movs	r0, r2
 80028b0:	f7fd fc2a 	bl	8000108 <__udivsi3>
 80028b4:	0003      	movs	r3, r0
 80028b6:	b29b      	uxth	r3, r3
 80028b8:	61bb      	str	r3, [r7, #24]
        break;
 80028ba:	e027      	b.n	800290c <UART_SetConfig+0x2ac>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80028bc:	f7ff fd36 	bl	800232c <HAL_RCC_GetSysClockFreq>
 80028c0:	0003      	movs	r3, r0
 80028c2:	60fb      	str	r3, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	685b      	ldr	r3, [r3, #4]
 80028c8:	085a      	lsrs	r2, r3, #1
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	18d2      	adds	r2, r2, r3
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	685b      	ldr	r3, [r3, #4]
 80028d2:	0019      	movs	r1, r3
 80028d4:	0010      	movs	r0, r2
 80028d6:	f7fd fc17 	bl	8000108 <__udivsi3>
 80028da:	0003      	movs	r3, r0
 80028dc:	b29b      	uxth	r3, r3
 80028de:	61bb      	str	r3, [r7, #24]
        break;
 80028e0:	e014      	b.n	800290c <UART_SetConfig+0x2ac>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	685b      	ldr	r3, [r3, #4]
 80028e6:	085b      	lsrs	r3, r3, #1
 80028e8:	2280      	movs	r2, #128	; 0x80
 80028ea:	0212      	lsls	r2, r2, #8
 80028ec:	189a      	adds	r2, r3, r2
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	685b      	ldr	r3, [r3, #4]
 80028f2:	0019      	movs	r1, r3
 80028f4:	0010      	movs	r0, r2
 80028f6:	f7fd fc07 	bl	8000108 <__udivsi3>
 80028fa:	0003      	movs	r3, r0
 80028fc:	b29b      	uxth	r3, r3
 80028fe:	61bb      	str	r3, [r7, #24]
        break;
 8002900:	e004      	b.n	800290c <UART_SetConfig+0x2ac>
      default:
        ret = HAL_ERROR;
 8002902:	2317      	movs	r3, #23
 8002904:	18fb      	adds	r3, r7, r3
 8002906:	2201      	movs	r2, #1
 8002908:	701a      	strb	r2, [r3, #0]
        break;
 800290a:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800290c:	69bb      	ldr	r3, [r7, #24]
 800290e:	2b0f      	cmp	r3, #15
 8002910:	d908      	bls.n	8002924 <UART_SetConfig+0x2c4>
 8002912:	69bb      	ldr	r3, [r7, #24]
 8002914:	4a13      	ldr	r2, [pc, #76]	; (8002964 <UART_SetConfig+0x304>)
 8002916:	4293      	cmp	r3, r2
 8002918:	d804      	bhi.n	8002924 <UART_SetConfig+0x2c4>
    {
      huart->Instance->BRR = usartdiv;
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	69ba      	ldr	r2, [r7, #24]
 8002920:	60da      	str	r2, [r3, #12]
 8002922:	e003      	b.n	800292c <UART_SetConfig+0x2cc>
    }
    else
    {
      ret = HAL_ERROR;
 8002924:	2317      	movs	r3, #23
 8002926:	18fb      	adds	r3, r7, r3
 8002928:	2201      	movs	r2, #1
 800292a:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	2200      	movs	r2, #0
 8002930:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	2200      	movs	r2, #0
 8002936:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8002938:	2317      	movs	r3, #23
 800293a:	18fb      	adds	r3, r7, r3
 800293c:	781b      	ldrb	r3, [r3, #0]
}
 800293e:	0018      	movs	r0, r3
 8002940:	46bd      	mov	sp, r7
 8002942:	b008      	add	sp, #32
 8002944:	bd80      	pop	{r7, pc}
 8002946:	46c0      	nop			; (mov r8, r8)
 8002948:	efff69f3 	.word	0xefff69f3
 800294c:	ffffcfff 	.word	0xffffcfff
 8002950:	fffff4ff 	.word	0xfffff4ff
 8002954:	40013800 	.word	0x40013800
 8002958:	40021000 	.word	0x40021000
 800295c:	40004400 	.word	0x40004400
 8002960:	00f42400 	.word	0x00f42400
 8002964:	0000ffff 	.word	0x0000ffff
 8002968:	007a1200 	.word	0x007a1200

0800296c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800296c:	b580      	push	{r7, lr}
 800296e:	b082      	sub	sp, #8
 8002970:	af00      	add	r7, sp, #0
 8002972:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002978:	2201      	movs	r2, #1
 800297a:	4013      	ands	r3, r2
 800297c:	d00b      	beq.n	8002996 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	685b      	ldr	r3, [r3, #4]
 8002984:	4a4a      	ldr	r2, [pc, #296]	; (8002ab0 <UART_AdvFeatureConfig+0x144>)
 8002986:	4013      	ands	r3, r2
 8002988:	0019      	movs	r1, r3
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	430a      	orrs	r2, r1
 8002994:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800299a:	2202      	movs	r2, #2
 800299c:	4013      	ands	r3, r2
 800299e:	d00b      	beq.n	80029b8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	685b      	ldr	r3, [r3, #4]
 80029a6:	4a43      	ldr	r2, [pc, #268]	; (8002ab4 <UART_AdvFeatureConfig+0x148>)
 80029a8:	4013      	ands	r3, r2
 80029aa:	0019      	movs	r1, r3
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	430a      	orrs	r2, r1
 80029b6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029bc:	2204      	movs	r2, #4
 80029be:	4013      	ands	r3, r2
 80029c0:	d00b      	beq.n	80029da <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	685b      	ldr	r3, [r3, #4]
 80029c8:	4a3b      	ldr	r2, [pc, #236]	; (8002ab8 <UART_AdvFeatureConfig+0x14c>)
 80029ca:	4013      	ands	r3, r2
 80029cc:	0019      	movs	r1, r3
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	430a      	orrs	r2, r1
 80029d8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029de:	2208      	movs	r2, #8
 80029e0:	4013      	ands	r3, r2
 80029e2:	d00b      	beq.n	80029fc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	685b      	ldr	r3, [r3, #4]
 80029ea:	4a34      	ldr	r2, [pc, #208]	; (8002abc <UART_AdvFeatureConfig+0x150>)
 80029ec:	4013      	ands	r3, r2
 80029ee:	0019      	movs	r1, r3
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	430a      	orrs	r2, r1
 80029fa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a00:	2210      	movs	r2, #16
 8002a02:	4013      	ands	r3, r2
 8002a04:	d00b      	beq.n	8002a1e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	689b      	ldr	r3, [r3, #8]
 8002a0c:	4a2c      	ldr	r2, [pc, #176]	; (8002ac0 <UART_AdvFeatureConfig+0x154>)
 8002a0e:	4013      	ands	r3, r2
 8002a10:	0019      	movs	r1, r3
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	430a      	orrs	r2, r1
 8002a1c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a22:	2220      	movs	r2, #32
 8002a24:	4013      	ands	r3, r2
 8002a26:	d00b      	beq.n	8002a40 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	689b      	ldr	r3, [r3, #8]
 8002a2e:	4a25      	ldr	r2, [pc, #148]	; (8002ac4 <UART_AdvFeatureConfig+0x158>)
 8002a30:	4013      	ands	r3, r2
 8002a32:	0019      	movs	r1, r3
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	430a      	orrs	r2, r1
 8002a3e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a44:	2240      	movs	r2, #64	; 0x40
 8002a46:	4013      	ands	r3, r2
 8002a48:	d01d      	beq.n	8002a86 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	685b      	ldr	r3, [r3, #4]
 8002a50:	4a1d      	ldr	r2, [pc, #116]	; (8002ac8 <UART_AdvFeatureConfig+0x15c>)
 8002a52:	4013      	ands	r3, r2
 8002a54:	0019      	movs	r1, r3
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	430a      	orrs	r2, r1
 8002a60:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002a66:	2380      	movs	r3, #128	; 0x80
 8002a68:	035b      	lsls	r3, r3, #13
 8002a6a:	429a      	cmp	r2, r3
 8002a6c:	d10b      	bne.n	8002a86 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	685b      	ldr	r3, [r3, #4]
 8002a74:	4a15      	ldr	r2, [pc, #84]	; (8002acc <UART_AdvFeatureConfig+0x160>)
 8002a76:	4013      	ands	r3, r2
 8002a78:	0019      	movs	r1, r3
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	430a      	orrs	r2, r1
 8002a84:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a8a:	2280      	movs	r2, #128	; 0x80
 8002a8c:	4013      	ands	r3, r2
 8002a8e:	d00b      	beq.n	8002aa8 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	685b      	ldr	r3, [r3, #4]
 8002a96:	4a0e      	ldr	r2, [pc, #56]	; (8002ad0 <UART_AdvFeatureConfig+0x164>)
 8002a98:	4013      	ands	r3, r2
 8002a9a:	0019      	movs	r1, r3
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	430a      	orrs	r2, r1
 8002aa6:	605a      	str	r2, [r3, #4]
  }
}
 8002aa8:	46c0      	nop			; (mov r8, r8)
 8002aaa:	46bd      	mov	sp, r7
 8002aac:	b002      	add	sp, #8
 8002aae:	bd80      	pop	{r7, pc}
 8002ab0:	fffdffff 	.word	0xfffdffff
 8002ab4:	fffeffff 	.word	0xfffeffff
 8002ab8:	fffbffff 	.word	0xfffbffff
 8002abc:	ffff7fff 	.word	0xffff7fff
 8002ac0:	ffffefff 	.word	0xffffefff
 8002ac4:	ffffdfff 	.word	0xffffdfff
 8002ac8:	ffefffff 	.word	0xffefffff
 8002acc:	ff9fffff 	.word	0xff9fffff
 8002ad0:	fff7ffff 	.word	0xfff7ffff

08002ad4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002ad4:	b580      	push	{r7, lr}
 8002ad6:	b086      	sub	sp, #24
 8002ad8:	af02      	add	r7, sp, #8
 8002ada:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	2200      	movs	r2, #0
 8002ae0:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8002ae2:	f7fd ffa5 	bl	8000a30 <HAL_GetTick>
 8002ae6:	0003      	movs	r3, r0
 8002ae8:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	2208      	movs	r2, #8
 8002af2:	4013      	ands	r3, r2
 8002af4:	2b08      	cmp	r3, #8
 8002af6:	d10d      	bne.n	8002b14 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002af8:	68fa      	ldr	r2, [r7, #12]
 8002afa:	2380      	movs	r3, #128	; 0x80
 8002afc:	0399      	lsls	r1, r3, #14
 8002afe:	6878      	ldr	r0, [r7, #4]
 8002b00:	4b16      	ldr	r3, [pc, #88]	; (8002b5c <UART_CheckIdleState+0x88>)
 8002b02:	9300      	str	r3, [sp, #0]
 8002b04:	0013      	movs	r3, r2
 8002b06:	2200      	movs	r2, #0
 8002b08:	f000 f82a 	bl	8002b60 <UART_WaitOnFlagUntilTimeout>
 8002b0c:	1e03      	subs	r3, r0, #0
 8002b0e:	d001      	beq.n	8002b14 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002b10:	2303      	movs	r3, #3
 8002b12:	e01f      	b.n	8002b54 <UART_CheckIdleState+0x80>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	2204      	movs	r2, #4
 8002b1c:	4013      	ands	r3, r2
 8002b1e:	2b04      	cmp	r3, #4
 8002b20:	d10d      	bne.n	8002b3e <UART_CheckIdleState+0x6a>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002b22:	68fa      	ldr	r2, [r7, #12]
 8002b24:	2380      	movs	r3, #128	; 0x80
 8002b26:	03d9      	lsls	r1, r3, #15
 8002b28:	6878      	ldr	r0, [r7, #4]
 8002b2a:	4b0c      	ldr	r3, [pc, #48]	; (8002b5c <UART_CheckIdleState+0x88>)
 8002b2c:	9300      	str	r3, [sp, #0]
 8002b2e:	0013      	movs	r3, r2
 8002b30:	2200      	movs	r2, #0
 8002b32:	f000 f815 	bl	8002b60 <UART_WaitOnFlagUntilTimeout>
 8002b36:	1e03      	subs	r3, r0, #0
 8002b38:	d001      	beq.n	8002b3e <UART_CheckIdleState+0x6a>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002b3a:	2303      	movs	r3, #3
 8002b3c:	e00a      	b.n	8002b54 <UART_CheckIdleState+0x80>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	2220      	movs	r2, #32
 8002b42:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	2220      	movs	r2, #32
 8002b48:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	2270      	movs	r2, #112	; 0x70
 8002b4e:	2100      	movs	r1, #0
 8002b50:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002b52:	2300      	movs	r3, #0
}
 8002b54:	0018      	movs	r0, r3
 8002b56:	46bd      	mov	sp, r7
 8002b58:	b004      	add	sp, #16
 8002b5a:	bd80      	pop	{r7, pc}
 8002b5c:	01ffffff 	.word	0x01ffffff

08002b60 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002b60:	b580      	push	{r7, lr}
 8002b62:	b084      	sub	sp, #16
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	60f8      	str	r0, [r7, #12]
 8002b68:	60b9      	str	r1, [r7, #8]
 8002b6a:	603b      	str	r3, [r7, #0]
 8002b6c:	1dfb      	adds	r3, r7, #7
 8002b6e:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002b70:	e05d      	b.n	8002c2e <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002b72:	69bb      	ldr	r3, [r7, #24]
 8002b74:	3301      	adds	r3, #1
 8002b76:	d05a      	beq.n	8002c2e <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b78:	f7fd ff5a 	bl	8000a30 <HAL_GetTick>
 8002b7c:	0002      	movs	r2, r0
 8002b7e:	683b      	ldr	r3, [r7, #0]
 8002b80:	1ad3      	subs	r3, r2, r3
 8002b82:	69ba      	ldr	r2, [r7, #24]
 8002b84:	429a      	cmp	r2, r3
 8002b86:	d302      	bcc.n	8002b8e <UART_WaitOnFlagUntilTimeout+0x2e>
 8002b88:	69bb      	ldr	r3, [r7, #24]
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d11b      	bne.n	8002bc6 <UART_WaitOnFlagUntilTimeout+0x66>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	681a      	ldr	r2, [r3, #0]
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	492f      	ldr	r1, [pc, #188]	; (8002c58 <UART_WaitOnFlagUntilTimeout+0xf8>)
 8002b9a:	400a      	ands	r2, r1
 8002b9c:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	689a      	ldr	r2, [r3, #8]
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	2101      	movs	r1, #1
 8002baa:	438a      	bics	r2, r1
 8002bac:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	2220      	movs	r2, #32
 8002bb2:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	2220      	movs	r2, #32
 8002bb8:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	2270      	movs	r2, #112	; 0x70
 8002bbe:	2100      	movs	r1, #0
 8002bc0:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8002bc2:	2303      	movs	r3, #3
 8002bc4:	e043      	b.n	8002c4e <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	2204      	movs	r2, #4
 8002bce:	4013      	ands	r3, r2
 8002bd0:	d02d      	beq.n	8002c2e <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	69da      	ldr	r2, [r3, #28]
 8002bd8:	2380      	movs	r3, #128	; 0x80
 8002bda:	011b      	lsls	r3, r3, #4
 8002bdc:	401a      	ands	r2, r3
 8002bde:	2380      	movs	r3, #128	; 0x80
 8002be0:	011b      	lsls	r3, r3, #4
 8002be2:	429a      	cmp	r2, r3
 8002be4:	d123      	bne.n	8002c2e <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	2280      	movs	r2, #128	; 0x80
 8002bec:	0112      	lsls	r2, r2, #4
 8002bee:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	681a      	ldr	r2, [r3, #0]
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	4917      	ldr	r1, [pc, #92]	; (8002c58 <UART_WaitOnFlagUntilTimeout+0xf8>)
 8002bfc:	400a      	ands	r2, r1
 8002bfe:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	689a      	ldr	r2, [r3, #8]
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	2101      	movs	r1, #1
 8002c0c:	438a      	bics	r2, r1
 8002c0e:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	2220      	movs	r2, #32
 8002c14:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	2220      	movs	r2, #32
 8002c1a:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	2220      	movs	r2, #32
 8002c20:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	2270      	movs	r2, #112	; 0x70
 8002c26:	2100      	movs	r1, #0
 8002c28:	5499      	strb	r1, [r3, r2]
          
          return HAL_TIMEOUT;
 8002c2a:	2303      	movs	r3, #3
 8002c2c:	e00f      	b.n	8002c4e <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	69db      	ldr	r3, [r3, #28]
 8002c34:	68ba      	ldr	r2, [r7, #8]
 8002c36:	4013      	ands	r3, r2
 8002c38:	68ba      	ldr	r2, [r7, #8]
 8002c3a:	1ad3      	subs	r3, r2, r3
 8002c3c:	425a      	negs	r2, r3
 8002c3e:	4153      	adcs	r3, r2
 8002c40:	b2db      	uxtb	r3, r3
 8002c42:	001a      	movs	r2, r3
 8002c44:	1dfb      	adds	r3, r7, #7
 8002c46:	781b      	ldrb	r3, [r3, #0]
 8002c48:	429a      	cmp	r2, r3
 8002c4a:	d092      	beq.n	8002b72 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002c4c:	2300      	movs	r3, #0
}
 8002c4e:	0018      	movs	r0, r3
 8002c50:	46bd      	mov	sp, r7
 8002c52:	b004      	add	sp, #16
 8002c54:	bd80      	pop	{r7, pc}
 8002c56:	46c0      	nop			; (mov r8, r8)
 8002c58:	fffffe5f 	.word	0xfffffe5f

08002c5c <__errno>:
 8002c5c:	4b01      	ldr	r3, [pc, #4]	; (8002c64 <__errno+0x8>)
 8002c5e:	6818      	ldr	r0, [r3, #0]
 8002c60:	4770      	bx	lr
 8002c62:	46c0      	nop			; (mov r8, r8)
 8002c64:	20000014 	.word	0x20000014

08002c68 <__libc_init_array>:
 8002c68:	b570      	push	{r4, r5, r6, lr}
 8002c6a:	2600      	movs	r6, #0
 8002c6c:	4d0c      	ldr	r5, [pc, #48]	; (8002ca0 <__libc_init_array+0x38>)
 8002c6e:	4c0d      	ldr	r4, [pc, #52]	; (8002ca4 <__libc_init_array+0x3c>)
 8002c70:	1b64      	subs	r4, r4, r5
 8002c72:	10a4      	asrs	r4, r4, #2
 8002c74:	42a6      	cmp	r6, r4
 8002c76:	d109      	bne.n	8002c8c <__libc_init_array+0x24>
 8002c78:	2600      	movs	r6, #0
 8002c7a:	f000 fc29 	bl	80034d0 <_init>
 8002c7e:	4d0a      	ldr	r5, [pc, #40]	; (8002ca8 <__libc_init_array+0x40>)
 8002c80:	4c0a      	ldr	r4, [pc, #40]	; (8002cac <__libc_init_array+0x44>)
 8002c82:	1b64      	subs	r4, r4, r5
 8002c84:	10a4      	asrs	r4, r4, #2
 8002c86:	42a6      	cmp	r6, r4
 8002c88:	d105      	bne.n	8002c96 <__libc_init_array+0x2e>
 8002c8a:	bd70      	pop	{r4, r5, r6, pc}
 8002c8c:	00b3      	lsls	r3, r6, #2
 8002c8e:	58eb      	ldr	r3, [r5, r3]
 8002c90:	4798      	blx	r3
 8002c92:	3601      	adds	r6, #1
 8002c94:	e7ee      	b.n	8002c74 <__libc_init_array+0xc>
 8002c96:	00b3      	lsls	r3, r6, #2
 8002c98:	58eb      	ldr	r3, [r5, r3]
 8002c9a:	4798      	blx	r3
 8002c9c:	3601      	adds	r6, #1
 8002c9e:	e7f2      	b.n	8002c86 <__libc_init_array+0x1e>
 8002ca0:	08003558 	.word	0x08003558
 8002ca4:	08003558 	.word	0x08003558
 8002ca8:	08003558 	.word	0x08003558
 8002cac:	0800355c 	.word	0x0800355c

08002cb0 <memset>:
 8002cb0:	0003      	movs	r3, r0
 8002cb2:	1812      	adds	r2, r2, r0
 8002cb4:	4293      	cmp	r3, r2
 8002cb6:	d100      	bne.n	8002cba <memset+0xa>
 8002cb8:	4770      	bx	lr
 8002cba:	7019      	strb	r1, [r3, #0]
 8002cbc:	3301      	adds	r3, #1
 8002cbe:	e7f9      	b.n	8002cb4 <memset+0x4>

08002cc0 <siprintf>:
 8002cc0:	b40e      	push	{r1, r2, r3}
 8002cc2:	b500      	push	{lr}
 8002cc4:	490b      	ldr	r1, [pc, #44]	; (8002cf4 <siprintf+0x34>)
 8002cc6:	b09c      	sub	sp, #112	; 0x70
 8002cc8:	ab1d      	add	r3, sp, #116	; 0x74
 8002cca:	9002      	str	r0, [sp, #8]
 8002ccc:	9006      	str	r0, [sp, #24]
 8002cce:	9107      	str	r1, [sp, #28]
 8002cd0:	9104      	str	r1, [sp, #16]
 8002cd2:	4809      	ldr	r0, [pc, #36]	; (8002cf8 <siprintf+0x38>)
 8002cd4:	4909      	ldr	r1, [pc, #36]	; (8002cfc <siprintf+0x3c>)
 8002cd6:	cb04      	ldmia	r3!, {r2}
 8002cd8:	9105      	str	r1, [sp, #20]
 8002cda:	6800      	ldr	r0, [r0, #0]
 8002cdc:	a902      	add	r1, sp, #8
 8002cde:	9301      	str	r3, [sp, #4]
 8002ce0:	f000 f870 	bl	8002dc4 <_svfiprintf_r>
 8002ce4:	2300      	movs	r3, #0
 8002ce6:	9a02      	ldr	r2, [sp, #8]
 8002ce8:	7013      	strb	r3, [r2, #0]
 8002cea:	b01c      	add	sp, #112	; 0x70
 8002cec:	bc08      	pop	{r3}
 8002cee:	b003      	add	sp, #12
 8002cf0:	4718      	bx	r3
 8002cf2:	46c0      	nop			; (mov r8, r8)
 8002cf4:	7fffffff 	.word	0x7fffffff
 8002cf8:	20000014 	.word	0x20000014
 8002cfc:	ffff0208 	.word	0xffff0208

08002d00 <__ssputs_r>:
 8002d00:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002d02:	688e      	ldr	r6, [r1, #8]
 8002d04:	b085      	sub	sp, #20
 8002d06:	0007      	movs	r7, r0
 8002d08:	000c      	movs	r4, r1
 8002d0a:	9203      	str	r2, [sp, #12]
 8002d0c:	9301      	str	r3, [sp, #4]
 8002d0e:	429e      	cmp	r6, r3
 8002d10:	d83c      	bhi.n	8002d8c <__ssputs_r+0x8c>
 8002d12:	2390      	movs	r3, #144	; 0x90
 8002d14:	898a      	ldrh	r2, [r1, #12]
 8002d16:	00db      	lsls	r3, r3, #3
 8002d18:	421a      	tst	r2, r3
 8002d1a:	d034      	beq.n	8002d86 <__ssputs_r+0x86>
 8002d1c:	2503      	movs	r5, #3
 8002d1e:	6909      	ldr	r1, [r1, #16]
 8002d20:	6823      	ldr	r3, [r4, #0]
 8002d22:	1a5b      	subs	r3, r3, r1
 8002d24:	9302      	str	r3, [sp, #8]
 8002d26:	6963      	ldr	r3, [r4, #20]
 8002d28:	9802      	ldr	r0, [sp, #8]
 8002d2a:	435d      	muls	r5, r3
 8002d2c:	0feb      	lsrs	r3, r5, #31
 8002d2e:	195d      	adds	r5, r3, r5
 8002d30:	9b01      	ldr	r3, [sp, #4]
 8002d32:	106d      	asrs	r5, r5, #1
 8002d34:	3301      	adds	r3, #1
 8002d36:	181b      	adds	r3, r3, r0
 8002d38:	42ab      	cmp	r3, r5
 8002d3a:	d900      	bls.n	8002d3e <__ssputs_r+0x3e>
 8002d3c:	001d      	movs	r5, r3
 8002d3e:	0553      	lsls	r3, r2, #21
 8002d40:	d532      	bpl.n	8002da8 <__ssputs_r+0xa8>
 8002d42:	0029      	movs	r1, r5
 8002d44:	0038      	movs	r0, r7
 8002d46:	f000 fb23 	bl	8003390 <_malloc_r>
 8002d4a:	1e06      	subs	r6, r0, #0
 8002d4c:	d109      	bne.n	8002d62 <__ssputs_r+0x62>
 8002d4e:	230c      	movs	r3, #12
 8002d50:	603b      	str	r3, [r7, #0]
 8002d52:	2340      	movs	r3, #64	; 0x40
 8002d54:	2001      	movs	r0, #1
 8002d56:	89a2      	ldrh	r2, [r4, #12]
 8002d58:	4240      	negs	r0, r0
 8002d5a:	4313      	orrs	r3, r2
 8002d5c:	81a3      	strh	r3, [r4, #12]
 8002d5e:	b005      	add	sp, #20
 8002d60:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002d62:	9a02      	ldr	r2, [sp, #8]
 8002d64:	6921      	ldr	r1, [r4, #16]
 8002d66:	f000 faac 	bl	80032c2 <memcpy>
 8002d6a:	89a3      	ldrh	r3, [r4, #12]
 8002d6c:	4a14      	ldr	r2, [pc, #80]	; (8002dc0 <__ssputs_r+0xc0>)
 8002d6e:	401a      	ands	r2, r3
 8002d70:	2380      	movs	r3, #128	; 0x80
 8002d72:	4313      	orrs	r3, r2
 8002d74:	81a3      	strh	r3, [r4, #12]
 8002d76:	9b02      	ldr	r3, [sp, #8]
 8002d78:	6126      	str	r6, [r4, #16]
 8002d7a:	18f6      	adds	r6, r6, r3
 8002d7c:	6026      	str	r6, [r4, #0]
 8002d7e:	6165      	str	r5, [r4, #20]
 8002d80:	9e01      	ldr	r6, [sp, #4]
 8002d82:	1aed      	subs	r5, r5, r3
 8002d84:	60a5      	str	r5, [r4, #8]
 8002d86:	9b01      	ldr	r3, [sp, #4]
 8002d88:	429e      	cmp	r6, r3
 8002d8a:	d900      	bls.n	8002d8e <__ssputs_r+0x8e>
 8002d8c:	9e01      	ldr	r6, [sp, #4]
 8002d8e:	0032      	movs	r2, r6
 8002d90:	9903      	ldr	r1, [sp, #12]
 8002d92:	6820      	ldr	r0, [r4, #0]
 8002d94:	f000 fa9e 	bl	80032d4 <memmove>
 8002d98:	68a3      	ldr	r3, [r4, #8]
 8002d9a:	2000      	movs	r0, #0
 8002d9c:	1b9b      	subs	r3, r3, r6
 8002d9e:	60a3      	str	r3, [r4, #8]
 8002da0:	6823      	ldr	r3, [r4, #0]
 8002da2:	199e      	adds	r6, r3, r6
 8002da4:	6026      	str	r6, [r4, #0]
 8002da6:	e7da      	b.n	8002d5e <__ssputs_r+0x5e>
 8002da8:	002a      	movs	r2, r5
 8002daa:	0038      	movs	r0, r7
 8002dac:	f000 fb4e 	bl	800344c <_realloc_r>
 8002db0:	1e06      	subs	r6, r0, #0
 8002db2:	d1e0      	bne.n	8002d76 <__ssputs_r+0x76>
 8002db4:	6921      	ldr	r1, [r4, #16]
 8002db6:	0038      	movs	r0, r7
 8002db8:	f000 faa0 	bl	80032fc <_free_r>
 8002dbc:	e7c7      	b.n	8002d4e <__ssputs_r+0x4e>
 8002dbe:	46c0      	nop			; (mov r8, r8)
 8002dc0:	fffffb7f 	.word	0xfffffb7f

08002dc4 <_svfiprintf_r>:
 8002dc4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002dc6:	b0a1      	sub	sp, #132	; 0x84
 8002dc8:	9003      	str	r0, [sp, #12]
 8002dca:	001d      	movs	r5, r3
 8002dcc:	898b      	ldrh	r3, [r1, #12]
 8002dce:	000f      	movs	r7, r1
 8002dd0:	0016      	movs	r6, r2
 8002dd2:	061b      	lsls	r3, r3, #24
 8002dd4:	d511      	bpl.n	8002dfa <_svfiprintf_r+0x36>
 8002dd6:	690b      	ldr	r3, [r1, #16]
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d10e      	bne.n	8002dfa <_svfiprintf_r+0x36>
 8002ddc:	2140      	movs	r1, #64	; 0x40
 8002dde:	f000 fad7 	bl	8003390 <_malloc_r>
 8002de2:	6038      	str	r0, [r7, #0]
 8002de4:	6138      	str	r0, [r7, #16]
 8002de6:	2800      	cmp	r0, #0
 8002de8:	d105      	bne.n	8002df6 <_svfiprintf_r+0x32>
 8002dea:	230c      	movs	r3, #12
 8002dec:	9a03      	ldr	r2, [sp, #12]
 8002dee:	3801      	subs	r0, #1
 8002df0:	6013      	str	r3, [r2, #0]
 8002df2:	b021      	add	sp, #132	; 0x84
 8002df4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002df6:	2340      	movs	r3, #64	; 0x40
 8002df8:	617b      	str	r3, [r7, #20]
 8002dfa:	2300      	movs	r3, #0
 8002dfc:	ac08      	add	r4, sp, #32
 8002dfe:	6163      	str	r3, [r4, #20]
 8002e00:	3320      	adds	r3, #32
 8002e02:	7663      	strb	r3, [r4, #25]
 8002e04:	3310      	adds	r3, #16
 8002e06:	76a3      	strb	r3, [r4, #26]
 8002e08:	9507      	str	r5, [sp, #28]
 8002e0a:	0035      	movs	r5, r6
 8002e0c:	782b      	ldrb	r3, [r5, #0]
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d001      	beq.n	8002e16 <_svfiprintf_r+0x52>
 8002e12:	2b25      	cmp	r3, #37	; 0x25
 8002e14:	d146      	bne.n	8002ea4 <_svfiprintf_r+0xe0>
 8002e16:	1bab      	subs	r3, r5, r6
 8002e18:	9305      	str	r3, [sp, #20]
 8002e1a:	d00c      	beq.n	8002e36 <_svfiprintf_r+0x72>
 8002e1c:	0032      	movs	r2, r6
 8002e1e:	0039      	movs	r1, r7
 8002e20:	9803      	ldr	r0, [sp, #12]
 8002e22:	f7ff ff6d 	bl	8002d00 <__ssputs_r>
 8002e26:	1c43      	adds	r3, r0, #1
 8002e28:	d100      	bne.n	8002e2c <_svfiprintf_r+0x68>
 8002e2a:	e0ae      	b.n	8002f8a <_svfiprintf_r+0x1c6>
 8002e2c:	6962      	ldr	r2, [r4, #20]
 8002e2e:	9b05      	ldr	r3, [sp, #20]
 8002e30:	4694      	mov	ip, r2
 8002e32:	4463      	add	r3, ip
 8002e34:	6163      	str	r3, [r4, #20]
 8002e36:	782b      	ldrb	r3, [r5, #0]
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d100      	bne.n	8002e3e <_svfiprintf_r+0x7a>
 8002e3c:	e0a5      	b.n	8002f8a <_svfiprintf_r+0x1c6>
 8002e3e:	2201      	movs	r2, #1
 8002e40:	2300      	movs	r3, #0
 8002e42:	4252      	negs	r2, r2
 8002e44:	6062      	str	r2, [r4, #4]
 8002e46:	a904      	add	r1, sp, #16
 8002e48:	3254      	adds	r2, #84	; 0x54
 8002e4a:	1852      	adds	r2, r2, r1
 8002e4c:	1c6e      	adds	r6, r5, #1
 8002e4e:	6023      	str	r3, [r4, #0]
 8002e50:	60e3      	str	r3, [r4, #12]
 8002e52:	60a3      	str	r3, [r4, #8]
 8002e54:	7013      	strb	r3, [r2, #0]
 8002e56:	65a3      	str	r3, [r4, #88]	; 0x58
 8002e58:	7831      	ldrb	r1, [r6, #0]
 8002e5a:	2205      	movs	r2, #5
 8002e5c:	4853      	ldr	r0, [pc, #332]	; (8002fac <_svfiprintf_r+0x1e8>)
 8002e5e:	f000 fa25 	bl	80032ac <memchr>
 8002e62:	1c75      	adds	r5, r6, #1
 8002e64:	2800      	cmp	r0, #0
 8002e66:	d11f      	bne.n	8002ea8 <_svfiprintf_r+0xe4>
 8002e68:	6822      	ldr	r2, [r4, #0]
 8002e6a:	06d3      	lsls	r3, r2, #27
 8002e6c:	d504      	bpl.n	8002e78 <_svfiprintf_r+0xb4>
 8002e6e:	2353      	movs	r3, #83	; 0x53
 8002e70:	a904      	add	r1, sp, #16
 8002e72:	185b      	adds	r3, r3, r1
 8002e74:	2120      	movs	r1, #32
 8002e76:	7019      	strb	r1, [r3, #0]
 8002e78:	0713      	lsls	r3, r2, #28
 8002e7a:	d504      	bpl.n	8002e86 <_svfiprintf_r+0xc2>
 8002e7c:	2353      	movs	r3, #83	; 0x53
 8002e7e:	a904      	add	r1, sp, #16
 8002e80:	185b      	adds	r3, r3, r1
 8002e82:	212b      	movs	r1, #43	; 0x2b
 8002e84:	7019      	strb	r1, [r3, #0]
 8002e86:	7833      	ldrb	r3, [r6, #0]
 8002e88:	2b2a      	cmp	r3, #42	; 0x2a
 8002e8a:	d016      	beq.n	8002eba <_svfiprintf_r+0xf6>
 8002e8c:	0035      	movs	r5, r6
 8002e8e:	2100      	movs	r1, #0
 8002e90:	200a      	movs	r0, #10
 8002e92:	68e3      	ldr	r3, [r4, #12]
 8002e94:	782a      	ldrb	r2, [r5, #0]
 8002e96:	1c6e      	adds	r6, r5, #1
 8002e98:	3a30      	subs	r2, #48	; 0x30
 8002e9a:	2a09      	cmp	r2, #9
 8002e9c:	d94e      	bls.n	8002f3c <_svfiprintf_r+0x178>
 8002e9e:	2900      	cmp	r1, #0
 8002ea0:	d018      	beq.n	8002ed4 <_svfiprintf_r+0x110>
 8002ea2:	e010      	b.n	8002ec6 <_svfiprintf_r+0x102>
 8002ea4:	3501      	adds	r5, #1
 8002ea6:	e7b1      	b.n	8002e0c <_svfiprintf_r+0x48>
 8002ea8:	4b40      	ldr	r3, [pc, #256]	; (8002fac <_svfiprintf_r+0x1e8>)
 8002eaa:	6822      	ldr	r2, [r4, #0]
 8002eac:	1ac0      	subs	r0, r0, r3
 8002eae:	2301      	movs	r3, #1
 8002eb0:	4083      	lsls	r3, r0
 8002eb2:	4313      	orrs	r3, r2
 8002eb4:	6023      	str	r3, [r4, #0]
 8002eb6:	002e      	movs	r6, r5
 8002eb8:	e7ce      	b.n	8002e58 <_svfiprintf_r+0x94>
 8002eba:	9b07      	ldr	r3, [sp, #28]
 8002ebc:	1d19      	adds	r1, r3, #4
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	9107      	str	r1, [sp, #28]
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	db01      	blt.n	8002eca <_svfiprintf_r+0x106>
 8002ec6:	930b      	str	r3, [sp, #44]	; 0x2c
 8002ec8:	e004      	b.n	8002ed4 <_svfiprintf_r+0x110>
 8002eca:	425b      	negs	r3, r3
 8002ecc:	60e3      	str	r3, [r4, #12]
 8002ece:	2302      	movs	r3, #2
 8002ed0:	4313      	orrs	r3, r2
 8002ed2:	6023      	str	r3, [r4, #0]
 8002ed4:	782b      	ldrb	r3, [r5, #0]
 8002ed6:	2b2e      	cmp	r3, #46	; 0x2e
 8002ed8:	d10a      	bne.n	8002ef0 <_svfiprintf_r+0x12c>
 8002eda:	786b      	ldrb	r3, [r5, #1]
 8002edc:	2b2a      	cmp	r3, #42	; 0x2a
 8002ede:	d135      	bne.n	8002f4c <_svfiprintf_r+0x188>
 8002ee0:	9b07      	ldr	r3, [sp, #28]
 8002ee2:	3502      	adds	r5, #2
 8002ee4:	1d1a      	adds	r2, r3, #4
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	9207      	str	r2, [sp, #28]
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	db2b      	blt.n	8002f46 <_svfiprintf_r+0x182>
 8002eee:	9309      	str	r3, [sp, #36]	; 0x24
 8002ef0:	4e2f      	ldr	r6, [pc, #188]	; (8002fb0 <_svfiprintf_r+0x1ec>)
 8002ef2:	7829      	ldrb	r1, [r5, #0]
 8002ef4:	2203      	movs	r2, #3
 8002ef6:	0030      	movs	r0, r6
 8002ef8:	f000 f9d8 	bl	80032ac <memchr>
 8002efc:	2800      	cmp	r0, #0
 8002efe:	d006      	beq.n	8002f0e <_svfiprintf_r+0x14a>
 8002f00:	2340      	movs	r3, #64	; 0x40
 8002f02:	1b80      	subs	r0, r0, r6
 8002f04:	4083      	lsls	r3, r0
 8002f06:	6822      	ldr	r2, [r4, #0]
 8002f08:	3501      	adds	r5, #1
 8002f0a:	4313      	orrs	r3, r2
 8002f0c:	6023      	str	r3, [r4, #0]
 8002f0e:	7829      	ldrb	r1, [r5, #0]
 8002f10:	2206      	movs	r2, #6
 8002f12:	4828      	ldr	r0, [pc, #160]	; (8002fb4 <_svfiprintf_r+0x1f0>)
 8002f14:	1c6e      	adds	r6, r5, #1
 8002f16:	7621      	strb	r1, [r4, #24]
 8002f18:	f000 f9c8 	bl	80032ac <memchr>
 8002f1c:	2800      	cmp	r0, #0
 8002f1e:	d03c      	beq.n	8002f9a <_svfiprintf_r+0x1d6>
 8002f20:	4b25      	ldr	r3, [pc, #148]	; (8002fb8 <_svfiprintf_r+0x1f4>)
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d125      	bne.n	8002f72 <_svfiprintf_r+0x1ae>
 8002f26:	2207      	movs	r2, #7
 8002f28:	9b07      	ldr	r3, [sp, #28]
 8002f2a:	3307      	adds	r3, #7
 8002f2c:	4393      	bics	r3, r2
 8002f2e:	3308      	adds	r3, #8
 8002f30:	9307      	str	r3, [sp, #28]
 8002f32:	6963      	ldr	r3, [r4, #20]
 8002f34:	9a04      	ldr	r2, [sp, #16]
 8002f36:	189b      	adds	r3, r3, r2
 8002f38:	6163      	str	r3, [r4, #20]
 8002f3a:	e766      	b.n	8002e0a <_svfiprintf_r+0x46>
 8002f3c:	4343      	muls	r3, r0
 8002f3e:	2101      	movs	r1, #1
 8002f40:	189b      	adds	r3, r3, r2
 8002f42:	0035      	movs	r5, r6
 8002f44:	e7a6      	b.n	8002e94 <_svfiprintf_r+0xd0>
 8002f46:	2301      	movs	r3, #1
 8002f48:	425b      	negs	r3, r3
 8002f4a:	e7d0      	b.n	8002eee <_svfiprintf_r+0x12a>
 8002f4c:	2300      	movs	r3, #0
 8002f4e:	200a      	movs	r0, #10
 8002f50:	001a      	movs	r2, r3
 8002f52:	3501      	adds	r5, #1
 8002f54:	6063      	str	r3, [r4, #4]
 8002f56:	7829      	ldrb	r1, [r5, #0]
 8002f58:	1c6e      	adds	r6, r5, #1
 8002f5a:	3930      	subs	r1, #48	; 0x30
 8002f5c:	2909      	cmp	r1, #9
 8002f5e:	d903      	bls.n	8002f68 <_svfiprintf_r+0x1a4>
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d0c5      	beq.n	8002ef0 <_svfiprintf_r+0x12c>
 8002f64:	9209      	str	r2, [sp, #36]	; 0x24
 8002f66:	e7c3      	b.n	8002ef0 <_svfiprintf_r+0x12c>
 8002f68:	4342      	muls	r2, r0
 8002f6a:	2301      	movs	r3, #1
 8002f6c:	1852      	adds	r2, r2, r1
 8002f6e:	0035      	movs	r5, r6
 8002f70:	e7f1      	b.n	8002f56 <_svfiprintf_r+0x192>
 8002f72:	ab07      	add	r3, sp, #28
 8002f74:	9300      	str	r3, [sp, #0]
 8002f76:	003a      	movs	r2, r7
 8002f78:	4b10      	ldr	r3, [pc, #64]	; (8002fbc <_svfiprintf_r+0x1f8>)
 8002f7a:	0021      	movs	r1, r4
 8002f7c:	9803      	ldr	r0, [sp, #12]
 8002f7e:	e000      	b.n	8002f82 <_svfiprintf_r+0x1be>
 8002f80:	bf00      	nop
 8002f82:	9004      	str	r0, [sp, #16]
 8002f84:	9b04      	ldr	r3, [sp, #16]
 8002f86:	3301      	adds	r3, #1
 8002f88:	d1d3      	bne.n	8002f32 <_svfiprintf_r+0x16e>
 8002f8a:	89bb      	ldrh	r3, [r7, #12]
 8002f8c:	980d      	ldr	r0, [sp, #52]	; 0x34
 8002f8e:	065b      	lsls	r3, r3, #25
 8002f90:	d400      	bmi.n	8002f94 <_svfiprintf_r+0x1d0>
 8002f92:	e72e      	b.n	8002df2 <_svfiprintf_r+0x2e>
 8002f94:	2001      	movs	r0, #1
 8002f96:	4240      	negs	r0, r0
 8002f98:	e72b      	b.n	8002df2 <_svfiprintf_r+0x2e>
 8002f9a:	ab07      	add	r3, sp, #28
 8002f9c:	9300      	str	r3, [sp, #0]
 8002f9e:	003a      	movs	r2, r7
 8002fa0:	4b06      	ldr	r3, [pc, #24]	; (8002fbc <_svfiprintf_r+0x1f8>)
 8002fa2:	0021      	movs	r1, r4
 8002fa4:	9803      	ldr	r0, [sp, #12]
 8002fa6:	f000 f879 	bl	800309c <_printf_i>
 8002faa:	e7ea      	b.n	8002f82 <_svfiprintf_r+0x1be>
 8002fac:	08003524 	.word	0x08003524
 8002fb0:	0800352a 	.word	0x0800352a
 8002fb4:	0800352e 	.word	0x0800352e
 8002fb8:	00000000 	.word	0x00000000
 8002fbc:	08002d01 	.word	0x08002d01

08002fc0 <_printf_common>:
 8002fc0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002fc2:	0015      	movs	r5, r2
 8002fc4:	9301      	str	r3, [sp, #4]
 8002fc6:	688a      	ldr	r2, [r1, #8]
 8002fc8:	690b      	ldr	r3, [r1, #16]
 8002fca:	9000      	str	r0, [sp, #0]
 8002fcc:	000c      	movs	r4, r1
 8002fce:	4293      	cmp	r3, r2
 8002fd0:	da00      	bge.n	8002fd4 <_printf_common+0x14>
 8002fd2:	0013      	movs	r3, r2
 8002fd4:	0022      	movs	r2, r4
 8002fd6:	602b      	str	r3, [r5, #0]
 8002fd8:	3243      	adds	r2, #67	; 0x43
 8002fda:	7812      	ldrb	r2, [r2, #0]
 8002fdc:	2a00      	cmp	r2, #0
 8002fde:	d001      	beq.n	8002fe4 <_printf_common+0x24>
 8002fe0:	3301      	adds	r3, #1
 8002fe2:	602b      	str	r3, [r5, #0]
 8002fe4:	6823      	ldr	r3, [r4, #0]
 8002fe6:	069b      	lsls	r3, r3, #26
 8002fe8:	d502      	bpl.n	8002ff0 <_printf_common+0x30>
 8002fea:	682b      	ldr	r3, [r5, #0]
 8002fec:	3302      	adds	r3, #2
 8002fee:	602b      	str	r3, [r5, #0]
 8002ff0:	2706      	movs	r7, #6
 8002ff2:	6823      	ldr	r3, [r4, #0]
 8002ff4:	401f      	ands	r7, r3
 8002ff6:	d027      	beq.n	8003048 <_printf_common+0x88>
 8002ff8:	0023      	movs	r3, r4
 8002ffa:	3343      	adds	r3, #67	; 0x43
 8002ffc:	781b      	ldrb	r3, [r3, #0]
 8002ffe:	1e5a      	subs	r2, r3, #1
 8003000:	4193      	sbcs	r3, r2
 8003002:	6822      	ldr	r2, [r4, #0]
 8003004:	0692      	lsls	r2, r2, #26
 8003006:	d430      	bmi.n	800306a <_printf_common+0xaa>
 8003008:	0022      	movs	r2, r4
 800300a:	9901      	ldr	r1, [sp, #4]
 800300c:	3243      	adds	r2, #67	; 0x43
 800300e:	9800      	ldr	r0, [sp, #0]
 8003010:	9e08      	ldr	r6, [sp, #32]
 8003012:	47b0      	blx	r6
 8003014:	1c43      	adds	r3, r0, #1
 8003016:	d025      	beq.n	8003064 <_printf_common+0xa4>
 8003018:	2306      	movs	r3, #6
 800301a:	6820      	ldr	r0, [r4, #0]
 800301c:	682a      	ldr	r2, [r5, #0]
 800301e:	68e1      	ldr	r1, [r4, #12]
 8003020:	4003      	ands	r3, r0
 8003022:	2500      	movs	r5, #0
 8003024:	2b04      	cmp	r3, #4
 8003026:	d103      	bne.n	8003030 <_printf_common+0x70>
 8003028:	1a8d      	subs	r5, r1, r2
 800302a:	43eb      	mvns	r3, r5
 800302c:	17db      	asrs	r3, r3, #31
 800302e:	401d      	ands	r5, r3
 8003030:	68a3      	ldr	r3, [r4, #8]
 8003032:	6922      	ldr	r2, [r4, #16]
 8003034:	4293      	cmp	r3, r2
 8003036:	dd01      	ble.n	800303c <_printf_common+0x7c>
 8003038:	1a9b      	subs	r3, r3, r2
 800303a:	18ed      	adds	r5, r5, r3
 800303c:	2700      	movs	r7, #0
 800303e:	42bd      	cmp	r5, r7
 8003040:	d120      	bne.n	8003084 <_printf_common+0xc4>
 8003042:	2000      	movs	r0, #0
 8003044:	e010      	b.n	8003068 <_printf_common+0xa8>
 8003046:	3701      	adds	r7, #1
 8003048:	68e3      	ldr	r3, [r4, #12]
 800304a:	682a      	ldr	r2, [r5, #0]
 800304c:	1a9b      	subs	r3, r3, r2
 800304e:	42bb      	cmp	r3, r7
 8003050:	ddd2      	ble.n	8002ff8 <_printf_common+0x38>
 8003052:	0022      	movs	r2, r4
 8003054:	2301      	movs	r3, #1
 8003056:	3219      	adds	r2, #25
 8003058:	9901      	ldr	r1, [sp, #4]
 800305a:	9800      	ldr	r0, [sp, #0]
 800305c:	9e08      	ldr	r6, [sp, #32]
 800305e:	47b0      	blx	r6
 8003060:	1c43      	adds	r3, r0, #1
 8003062:	d1f0      	bne.n	8003046 <_printf_common+0x86>
 8003064:	2001      	movs	r0, #1
 8003066:	4240      	negs	r0, r0
 8003068:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800306a:	2030      	movs	r0, #48	; 0x30
 800306c:	18e1      	adds	r1, r4, r3
 800306e:	3143      	adds	r1, #67	; 0x43
 8003070:	7008      	strb	r0, [r1, #0]
 8003072:	0021      	movs	r1, r4
 8003074:	1c5a      	adds	r2, r3, #1
 8003076:	3145      	adds	r1, #69	; 0x45
 8003078:	7809      	ldrb	r1, [r1, #0]
 800307a:	18a2      	adds	r2, r4, r2
 800307c:	3243      	adds	r2, #67	; 0x43
 800307e:	3302      	adds	r3, #2
 8003080:	7011      	strb	r1, [r2, #0]
 8003082:	e7c1      	b.n	8003008 <_printf_common+0x48>
 8003084:	0022      	movs	r2, r4
 8003086:	2301      	movs	r3, #1
 8003088:	321a      	adds	r2, #26
 800308a:	9901      	ldr	r1, [sp, #4]
 800308c:	9800      	ldr	r0, [sp, #0]
 800308e:	9e08      	ldr	r6, [sp, #32]
 8003090:	47b0      	blx	r6
 8003092:	1c43      	adds	r3, r0, #1
 8003094:	d0e6      	beq.n	8003064 <_printf_common+0xa4>
 8003096:	3701      	adds	r7, #1
 8003098:	e7d1      	b.n	800303e <_printf_common+0x7e>
	...

0800309c <_printf_i>:
 800309c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800309e:	b089      	sub	sp, #36	; 0x24
 80030a0:	9204      	str	r2, [sp, #16]
 80030a2:	000a      	movs	r2, r1
 80030a4:	3243      	adds	r2, #67	; 0x43
 80030a6:	9305      	str	r3, [sp, #20]
 80030a8:	9003      	str	r0, [sp, #12]
 80030aa:	9202      	str	r2, [sp, #8]
 80030ac:	7e0a      	ldrb	r2, [r1, #24]
 80030ae:	000c      	movs	r4, r1
 80030b0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80030b2:	2a6e      	cmp	r2, #110	; 0x6e
 80030b4:	d100      	bne.n	80030b8 <_printf_i+0x1c>
 80030b6:	e086      	b.n	80031c6 <_printf_i+0x12a>
 80030b8:	d81f      	bhi.n	80030fa <_printf_i+0x5e>
 80030ba:	2a63      	cmp	r2, #99	; 0x63
 80030bc:	d033      	beq.n	8003126 <_printf_i+0x8a>
 80030be:	d808      	bhi.n	80030d2 <_printf_i+0x36>
 80030c0:	2a00      	cmp	r2, #0
 80030c2:	d100      	bne.n	80030c6 <_printf_i+0x2a>
 80030c4:	e08c      	b.n	80031e0 <_printf_i+0x144>
 80030c6:	2a58      	cmp	r2, #88	; 0x58
 80030c8:	d04d      	beq.n	8003166 <_printf_i+0xca>
 80030ca:	0025      	movs	r5, r4
 80030cc:	3542      	adds	r5, #66	; 0x42
 80030ce:	702a      	strb	r2, [r5, #0]
 80030d0:	e030      	b.n	8003134 <_printf_i+0x98>
 80030d2:	2a64      	cmp	r2, #100	; 0x64
 80030d4:	d001      	beq.n	80030da <_printf_i+0x3e>
 80030d6:	2a69      	cmp	r2, #105	; 0x69
 80030d8:	d1f7      	bne.n	80030ca <_printf_i+0x2e>
 80030da:	6819      	ldr	r1, [r3, #0]
 80030dc:	6825      	ldr	r5, [r4, #0]
 80030de:	1d0a      	adds	r2, r1, #4
 80030e0:	0628      	lsls	r0, r5, #24
 80030e2:	d529      	bpl.n	8003138 <_printf_i+0x9c>
 80030e4:	6808      	ldr	r0, [r1, #0]
 80030e6:	601a      	str	r2, [r3, #0]
 80030e8:	2800      	cmp	r0, #0
 80030ea:	da03      	bge.n	80030f4 <_printf_i+0x58>
 80030ec:	232d      	movs	r3, #45	; 0x2d
 80030ee:	9a02      	ldr	r2, [sp, #8]
 80030f0:	4240      	negs	r0, r0
 80030f2:	7013      	strb	r3, [r2, #0]
 80030f4:	4e6b      	ldr	r6, [pc, #428]	; (80032a4 <_printf_i+0x208>)
 80030f6:	270a      	movs	r7, #10
 80030f8:	e04f      	b.n	800319a <_printf_i+0xfe>
 80030fa:	2a73      	cmp	r2, #115	; 0x73
 80030fc:	d074      	beq.n	80031e8 <_printf_i+0x14c>
 80030fe:	d808      	bhi.n	8003112 <_printf_i+0x76>
 8003100:	2a6f      	cmp	r2, #111	; 0x6f
 8003102:	d01f      	beq.n	8003144 <_printf_i+0xa8>
 8003104:	2a70      	cmp	r2, #112	; 0x70
 8003106:	d1e0      	bne.n	80030ca <_printf_i+0x2e>
 8003108:	2220      	movs	r2, #32
 800310a:	6809      	ldr	r1, [r1, #0]
 800310c:	430a      	orrs	r2, r1
 800310e:	6022      	str	r2, [r4, #0]
 8003110:	e003      	b.n	800311a <_printf_i+0x7e>
 8003112:	2a75      	cmp	r2, #117	; 0x75
 8003114:	d016      	beq.n	8003144 <_printf_i+0xa8>
 8003116:	2a78      	cmp	r2, #120	; 0x78
 8003118:	d1d7      	bne.n	80030ca <_printf_i+0x2e>
 800311a:	0022      	movs	r2, r4
 800311c:	2178      	movs	r1, #120	; 0x78
 800311e:	3245      	adds	r2, #69	; 0x45
 8003120:	7011      	strb	r1, [r2, #0]
 8003122:	4e61      	ldr	r6, [pc, #388]	; (80032a8 <_printf_i+0x20c>)
 8003124:	e022      	b.n	800316c <_printf_i+0xd0>
 8003126:	0025      	movs	r5, r4
 8003128:	681a      	ldr	r2, [r3, #0]
 800312a:	3542      	adds	r5, #66	; 0x42
 800312c:	1d11      	adds	r1, r2, #4
 800312e:	6019      	str	r1, [r3, #0]
 8003130:	6813      	ldr	r3, [r2, #0]
 8003132:	702b      	strb	r3, [r5, #0]
 8003134:	2301      	movs	r3, #1
 8003136:	e065      	b.n	8003204 <_printf_i+0x168>
 8003138:	6808      	ldr	r0, [r1, #0]
 800313a:	601a      	str	r2, [r3, #0]
 800313c:	0669      	lsls	r1, r5, #25
 800313e:	d5d3      	bpl.n	80030e8 <_printf_i+0x4c>
 8003140:	b200      	sxth	r0, r0
 8003142:	e7d1      	b.n	80030e8 <_printf_i+0x4c>
 8003144:	6819      	ldr	r1, [r3, #0]
 8003146:	6825      	ldr	r5, [r4, #0]
 8003148:	1d08      	adds	r0, r1, #4
 800314a:	6018      	str	r0, [r3, #0]
 800314c:	6808      	ldr	r0, [r1, #0]
 800314e:	062e      	lsls	r6, r5, #24
 8003150:	d505      	bpl.n	800315e <_printf_i+0xc2>
 8003152:	4e54      	ldr	r6, [pc, #336]	; (80032a4 <_printf_i+0x208>)
 8003154:	2708      	movs	r7, #8
 8003156:	2a6f      	cmp	r2, #111	; 0x6f
 8003158:	d01b      	beq.n	8003192 <_printf_i+0xf6>
 800315a:	270a      	movs	r7, #10
 800315c:	e019      	b.n	8003192 <_printf_i+0xf6>
 800315e:	066d      	lsls	r5, r5, #25
 8003160:	d5f7      	bpl.n	8003152 <_printf_i+0xb6>
 8003162:	b280      	uxth	r0, r0
 8003164:	e7f5      	b.n	8003152 <_printf_i+0xb6>
 8003166:	3145      	adds	r1, #69	; 0x45
 8003168:	4e4e      	ldr	r6, [pc, #312]	; (80032a4 <_printf_i+0x208>)
 800316a:	700a      	strb	r2, [r1, #0]
 800316c:	6818      	ldr	r0, [r3, #0]
 800316e:	6822      	ldr	r2, [r4, #0]
 8003170:	1d01      	adds	r1, r0, #4
 8003172:	6800      	ldr	r0, [r0, #0]
 8003174:	6019      	str	r1, [r3, #0]
 8003176:	0615      	lsls	r5, r2, #24
 8003178:	d521      	bpl.n	80031be <_printf_i+0x122>
 800317a:	07d3      	lsls	r3, r2, #31
 800317c:	d502      	bpl.n	8003184 <_printf_i+0xe8>
 800317e:	2320      	movs	r3, #32
 8003180:	431a      	orrs	r2, r3
 8003182:	6022      	str	r2, [r4, #0]
 8003184:	2710      	movs	r7, #16
 8003186:	2800      	cmp	r0, #0
 8003188:	d103      	bne.n	8003192 <_printf_i+0xf6>
 800318a:	2320      	movs	r3, #32
 800318c:	6822      	ldr	r2, [r4, #0]
 800318e:	439a      	bics	r2, r3
 8003190:	6022      	str	r2, [r4, #0]
 8003192:	0023      	movs	r3, r4
 8003194:	2200      	movs	r2, #0
 8003196:	3343      	adds	r3, #67	; 0x43
 8003198:	701a      	strb	r2, [r3, #0]
 800319a:	6863      	ldr	r3, [r4, #4]
 800319c:	60a3      	str	r3, [r4, #8]
 800319e:	2b00      	cmp	r3, #0
 80031a0:	db58      	blt.n	8003254 <_printf_i+0x1b8>
 80031a2:	2204      	movs	r2, #4
 80031a4:	6821      	ldr	r1, [r4, #0]
 80031a6:	4391      	bics	r1, r2
 80031a8:	6021      	str	r1, [r4, #0]
 80031aa:	2800      	cmp	r0, #0
 80031ac:	d154      	bne.n	8003258 <_printf_i+0x1bc>
 80031ae:	9d02      	ldr	r5, [sp, #8]
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d05a      	beq.n	800326a <_printf_i+0x1ce>
 80031b4:	0025      	movs	r5, r4
 80031b6:	7833      	ldrb	r3, [r6, #0]
 80031b8:	3542      	adds	r5, #66	; 0x42
 80031ba:	702b      	strb	r3, [r5, #0]
 80031bc:	e055      	b.n	800326a <_printf_i+0x1ce>
 80031be:	0655      	lsls	r5, r2, #25
 80031c0:	d5db      	bpl.n	800317a <_printf_i+0xde>
 80031c2:	b280      	uxth	r0, r0
 80031c4:	e7d9      	b.n	800317a <_printf_i+0xde>
 80031c6:	681a      	ldr	r2, [r3, #0]
 80031c8:	680d      	ldr	r5, [r1, #0]
 80031ca:	1d10      	adds	r0, r2, #4
 80031cc:	6949      	ldr	r1, [r1, #20]
 80031ce:	6018      	str	r0, [r3, #0]
 80031d0:	6813      	ldr	r3, [r2, #0]
 80031d2:	062e      	lsls	r6, r5, #24
 80031d4:	d501      	bpl.n	80031da <_printf_i+0x13e>
 80031d6:	6019      	str	r1, [r3, #0]
 80031d8:	e002      	b.n	80031e0 <_printf_i+0x144>
 80031da:	066d      	lsls	r5, r5, #25
 80031dc:	d5fb      	bpl.n	80031d6 <_printf_i+0x13a>
 80031de:	8019      	strh	r1, [r3, #0]
 80031e0:	2300      	movs	r3, #0
 80031e2:	9d02      	ldr	r5, [sp, #8]
 80031e4:	6123      	str	r3, [r4, #16]
 80031e6:	e04f      	b.n	8003288 <_printf_i+0x1ec>
 80031e8:	681a      	ldr	r2, [r3, #0]
 80031ea:	1d11      	adds	r1, r2, #4
 80031ec:	6019      	str	r1, [r3, #0]
 80031ee:	6815      	ldr	r5, [r2, #0]
 80031f0:	2100      	movs	r1, #0
 80031f2:	6862      	ldr	r2, [r4, #4]
 80031f4:	0028      	movs	r0, r5
 80031f6:	f000 f859 	bl	80032ac <memchr>
 80031fa:	2800      	cmp	r0, #0
 80031fc:	d001      	beq.n	8003202 <_printf_i+0x166>
 80031fe:	1b40      	subs	r0, r0, r5
 8003200:	6060      	str	r0, [r4, #4]
 8003202:	6863      	ldr	r3, [r4, #4]
 8003204:	6123      	str	r3, [r4, #16]
 8003206:	2300      	movs	r3, #0
 8003208:	9a02      	ldr	r2, [sp, #8]
 800320a:	7013      	strb	r3, [r2, #0]
 800320c:	e03c      	b.n	8003288 <_printf_i+0x1ec>
 800320e:	6923      	ldr	r3, [r4, #16]
 8003210:	002a      	movs	r2, r5
 8003212:	9904      	ldr	r1, [sp, #16]
 8003214:	9803      	ldr	r0, [sp, #12]
 8003216:	9d05      	ldr	r5, [sp, #20]
 8003218:	47a8      	blx	r5
 800321a:	1c43      	adds	r3, r0, #1
 800321c:	d03e      	beq.n	800329c <_printf_i+0x200>
 800321e:	6823      	ldr	r3, [r4, #0]
 8003220:	079b      	lsls	r3, r3, #30
 8003222:	d415      	bmi.n	8003250 <_printf_i+0x1b4>
 8003224:	9b07      	ldr	r3, [sp, #28]
 8003226:	68e0      	ldr	r0, [r4, #12]
 8003228:	4298      	cmp	r0, r3
 800322a:	da39      	bge.n	80032a0 <_printf_i+0x204>
 800322c:	0018      	movs	r0, r3
 800322e:	e037      	b.n	80032a0 <_printf_i+0x204>
 8003230:	0022      	movs	r2, r4
 8003232:	2301      	movs	r3, #1
 8003234:	3219      	adds	r2, #25
 8003236:	9904      	ldr	r1, [sp, #16]
 8003238:	9803      	ldr	r0, [sp, #12]
 800323a:	9e05      	ldr	r6, [sp, #20]
 800323c:	47b0      	blx	r6
 800323e:	1c43      	adds	r3, r0, #1
 8003240:	d02c      	beq.n	800329c <_printf_i+0x200>
 8003242:	3501      	adds	r5, #1
 8003244:	68e3      	ldr	r3, [r4, #12]
 8003246:	9a07      	ldr	r2, [sp, #28]
 8003248:	1a9b      	subs	r3, r3, r2
 800324a:	42ab      	cmp	r3, r5
 800324c:	dcf0      	bgt.n	8003230 <_printf_i+0x194>
 800324e:	e7e9      	b.n	8003224 <_printf_i+0x188>
 8003250:	2500      	movs	r5, #0
 8003252:	e7f7      	b.n	8003244 <_printf_i+0x1a8>
 8003254:	2800      	cmp	r0, #0
 8003256:	d0ad      	beq.n	80031b4 <_printf_i+0x118>
 8003258:	9d02      	ldr	r5, [sp, #8]
 800325a:	0039      	movs	r1, r7
 800325c:	f7fc ffda 	bl	8000214 <__aeabi_uidivmod>
 8003260:	5c73      	ldrb	r3, [r6, r1]
 8003262:	3d01      	subs	r5, #1
 8003264:	702b      	strb	r3, [r5, #0]
 8003266:	2800      	cmp	r0, #0
 8003268:	d1f7      	bne.n	800325a <_printf_i+0x1be>
 800326a:	2f08      	cmp	r7, #8
 800326c:	d109      	bne.n	8003282 <_printf_i+0x1e6>
 800326e:	6823      	ldr	r3, [r4, #0]
 8003270:	07db      	lsls	r3, r3, #31
 8003272:	d506      	bpl.n	8003282 <_printf_i+0x1e6>
 8003274:	6863      	ldr	r3, [r4, #4]
 8003276:	6922      	ldr	r2, [r4, #16]
 8003278:	4293      	cmp	r3, r2
 800327a:	dc02      	bgt.n	8003282 <_printf_i+0x1e6>
 800327c:	2330      	movs	r3, #48	; 0x30
 800327e:	3d01      	subs	r5, #1
 8003280:	702b      	strb	r3, [r5, #0]
 8003282:	9b02      	ldr	r3, [sp, #8]
 8003284:	1b5b      	subs	r3, r3, r5
 8003286:	6123      	str	r3, [r4, #16]
 8003288:	9b05      	ldr	r3, [sp, #20]
 800328a:	aa07      	add	r2, sp, #28
 800328c:	9300      	str	r3, [sp, #0]
 800328e:	0021      	movs	r1, r4
 8003290:	9b04      	ldr	r3, [sp, #16]
 8003292:	9803      	ldr	r0, [sp, #12]
 8003294:	f7ff fe94 	bl	8002fc0 <_printf_common>
 8003298:	1c43      	adds	r3, r0, #1
 800329a:	d1b8      	bne.n	800320e <_printf_i+0x172>
 800329c:	2001      	movs	r0, #1
 800329e:	4240      	negs	r0, r0
 80032a0:	b009      	add	sp, #36	; 0x24
 80032a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80032a4:	08003535 	.word	0x08003535
 80032a8:	08003546 	.word	0x08003546

080032ac <memchr>:
 80032ac:	b2c9      	uxtb	r1, r1
 80032ae:	1882      	adds	r2, r0, r2
 80032b0:	4290      	cmp	r0, r2
 80032b2:	d101      	bne.n	80032b8 <memchr+0xc>
 80032b4:	2000      	movs	r0, #0
 80032b6:	4770      	bx	lr
 80032b8:	7803      	ldrb	r3, [r0, #0]
 80032ba:	428b      	cmp	r3, r1
 80032bc:	d0fb      	beq.n	80032b6 <memchr+0xa>
 80032be:	3001      	adds	r0, #1
 80032c0:	e7f6      	b.n	80032b0 <memchr+0x4>

080032c2 <memcpy>:
 80032c2:	2300      	movs	r3, #0
 80032c4:	b510      	push	{r4, lr}
 80032c6:	429a      	cmp	r2, r3
 80032c8:	d100      	bne.n	80032cc <memcpy+0xa>
 80032ca:	bd10      	pop	{r4, pc}
 80032cc:	5ccc      	ldrb	r4, [r1, r3]
 80032ce:	54c4      	strb	r4, [r0, r3]
 80032d0:	3301      	adds	r3, #1
 80032d2:	e7f8      	b.n	80032c6 <memcpy+0x4>

080032d4 <memmove>:
 80032d4:	b510      	push	{r4, lr}
 80032d6:	4288      	cmp	r0, r1
 80032d8:	d902      	bls.n	80032e0 <memmove+0xc>
 80032da:	188b      	adds	r3, r1, r2
 80032dc:	4298      	cmp	r0, r3
 80032de:	d303      	bcc.n	80032e8 <memmove+0x14>
 80032e0:	2300      	movs	r3, #0
 80032e2:	e007      	b.n	80032f4 <memmove+0x20>
 80032e4:	5c8b      	ldrb	r3, [r1, r2]
 80032e6:	5483      	strb	r3, [r0, r2]
 80032e8:	3a01      	subs	r2, #1
 80032ea:	d2fb      	bcs.n	80032e4 <memmove+0x10>
 80032ec:	bd10      	pop	{r4, pc}
 80032ee:	5ccc      	ldrb	r4, [r1, r3]
 80032f0:	54c4      	strb	r4, [r0, r3]
 80032f2:	3301      	adds	r3, #1
 80032f4:	429a      	cmp	r2, r3
 80032f6:	d1fa      	bne.n	80032ee <memmove+0x1a>
 80032f8:	e7f8      	b.n	80032ec <memmove+0x18>
	...

080032fc <_free_r>:
 80032fc:	b570      	push	{r4, r5, r6, lr}
 80032fe:	0005      	movs	r5, r0
 8003300:	2900      	cmp	r1, #0
 8003302:	d010      	beq.n	8003326 <_free_r+0x2a>
 8003304:	1f0c      	subs	r4, r1, #4
 8003306:	6823      	ldr	r3, [r4, #0]
 8003308:	2b00      	cmp	r3, #0
 800330a:	da00      	bge.n	800330e <_free_r+0x12>
 800330c:	18e4      	adds	r4, r4, r3
 800330e:	0028      	movs	r0, r5
 8003310:	f000 f8d4 	bl	80034bc <__malloc_lock>
 8003314:	4a1d      	ldr	r2, [pc, #116]	; (800338c <_free_r+0x90>)
 8003316:	6813      	ldr	r3, [r2, #0]
 8003318:	2b00      	cmp	r3, #0
 800331a:	d105      	bne.n	8003328 <_free_r+0x2c>
 800331c:	6063      	str	r3, [r4, #4]
 800331e:	6014      	str	r4, [r2, #0]
 8003320:	0028      	movs	r0, r5
 8003322:	f000 f8cc 	bl	80034be <__malloc_unlock>
 8003326:	bd70      	pop	{r4, r5, r6, pc}
 8003328:	42a3      	cmp	r3, r4
 800332a:	d909      	bls.n	8003340 <_free_r+0x44>
 800332c:	6821      	ldr	r1, [r4, #0]
 800332e:	1860      	adds	r0, r4, r1
 8003330:	4283      	cmp	r3, r0
 8003332:	d1f3      	bne.n	800331c <_free_r+0x20>
 8003334:	6818      	ldr	r0, [r3, #0]
 8003336:	685b      	ldr	r3, [r3, #4]
 8003338:	1841      	adds	r1, r0, r1
 800333a:	6021      	str	r1, [r4, #0]
 800333c:	e7ee      	b.n	800331c <_free_r+0x20>
 800333e:	0013      	movs	r3, r2
 8003340:	685a      	ldr	r2, [r3, #4]
 8003342:	2a00      	cmp	r2, #0
 8003344:	d001      	beq.n	800334a <_free_r+0x4e>
 8003346:	42a2      	cmp	r2, r4
 8003348:	d9f9      	bls.n	800333e <_free_r+0x42>
 800334a:	6819      	ldr	r1, [r3, #0]
 800334c:	1858      	adds	r0, r3, r1
 800334e:	42a0      	cmp	r0, r4
 8003350:	d10b      	bne.n	800336a <_free_r+0x6e>
 8003352:	6820      	ldr	r0, [r4, #0]
 8003354:	1809      	adds	r1, r1, r0
 8003356:	1858      	adds	r0, r3, r1
 8003358:	6019      	str	r1, [r3, #0]
 800335a:	4282      	cmp	r2, r0
 800335c:	d1e0      	bne.n	8003320 <_free_r+0x24>
 800335e:	6810      	ldr	r0, [r2, #0]
 8003360:	6852      	ldr	r2, [r2, #4]
 8003362:	1841      	adds	r1, r0, r1
 8003364:	6019      	str	r1, [r3, #0]
 8003366:	605a      	str	r2, [r3, #4]
 8003368:	e7da      	b.n	8003320 <_free_r+0x24>
 800336a:	42a0      	cmp	r0, r4
 800336c:	d902      	bls.n	8003374 <_free_r+0x78>
 800336e:	230c      	movs	r3, #12
 8003370:	602b      	str	r3, [r5, #0]
 8003372:	e7d5      	b.n	8003320 <_free_r+0x24>
 8003374:	6821      	ldr	r1, [r4, #0]
 8003376:	1860      	adds	r0, r4, r1
 8003378:	4282      	cmp	r2, r0
 800337a:	d103      	bne.n	8003384 <_free_r+0x88>
 800337c:	6810      	ldr	r0, [r2, #0]
 800337e:	6852      	ldr	r2, [r2, #4]
 8003380:	1841      	adds	r1, r0, r1
 8003382:	6021      	str	r1, [r4, #0]
 8003384:	6062      	str	r2, [r4, #4]
 8003386:	605c      	str	r4, [r3, #4]
 8003388:	e7ca      	b.n	8003320 <_free_r+0x24>
 800338a:	46c0      	nop			; (mov r8, r8)
 800338c:	20000098 	.word	0x20000098

08003390 <_malloc_r>:
 8003390:	2303      	movs	r3, #3
 8003392:	b570      	push	{r4, r5, r6, lr}
 8003394:	1ccd      	adds	r5, r1, #3
 8003396:	439d      	bics	r5, r3
 8003398:	3508      	adds	r5, #8
 800339a:	0006      	movs	r6, r0
 800339c:	2d0c      	cmp	r5, #12
 800339e:	d21e      	bcs.n	80033de <_malloc_r+0x4e>
 80033a0:	250c      	movs	r5, #12
 80033a2:	42a9      	cmp	r1, r5
 80033a4:	d81d      	bhi.n	80033e2 <_malloc_r+0x52>
 80033a6:	0030      	movs	r0, r6
 80033a8:	f000 f888 	bl	80034bc <__malloc_lock>
 80033ac:	4a25      	ldr	r2, [pc, #148]	; (8003444 <_malloc_r+0xb4>)
 80033ae:	6814      	ldr	r4, [r2, #0]
 80033b0:	0021      	movs	r1, r4
 80033b2:	2900      	cmp	r1, #0
 80033b4:	d119      	bne.n	80033ea <_malloc_r+0x5a>
 80033b6:	4c24      	ldr	r4, [pc, #144]	; (8003448 <_malloc_r+0xb8>)
 80033b8:	6823      	ldr	r3, [r4, #0]
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d103      	bne.n	80033c6 <_malloc_r+0x36>
 80033be:	0030      	movs	r0, r6
 80033c0:	f000 f86a 	bl	8003498 <_sbrk_r>
 80033c4:	6020      	str	r0, [r4, #0]
 80033c6:	0029      	movs	r1, r5
 80033c8:	0030      	movs	r0, r6
 80033ca:	f000 f865 	bl	8003498 <_sbrk_r>
 80033ce:	1c43      	adds	r3, r0, #1
 80033d0:	d12b      	bne.n	800342a <_malloc_r+0x9a>
 80033d2:	230c      	movs	r3, #12
 80033d4:	0030      	movs	r0, r6
 80033d6:	6033      	str	r3, [r6, #0]
 80033d8:	f000 f871 	bl	80034be <__malloc_unlock>
 80033dc:	e003      	b.n	80033e6 <_malloc_r+0x56>
 80033de:	2d00      	cmp	r5, #0
 80033e0:	dadf      	bge.n	80033a2 <_malloc_r+0x12>
 80033e2:	230c      	movs	r3, #12
 80033e4:	6033      	str	r3, [r6, #0]
 80033e6:	2000      	movs	r0, #0
 80033e8:	bd70      	pop	{r4, r5, r6, pc}
 80033ea:	680b      	ldr	r3, [r1, #0]
 80033ec:	1b5b      	subs	r3, r3, r5
 80033ee:	d419      	bmi.n	8003424 <_malloc_r+0x94>
 80033f0:	2b0b      	cmp	r3, #11
 80033f2:	d903      	bls.n	80033fc <_malloc_r+0x6c>
 80033f4:	600b      	str	r3, [r1, #0]
 80033f6:	18cc      	adds	r4, r1, r3
 80033f8:	6025      	str	r5, [r4, #0]
 80033fa:	e003      	b.n	8003404 <_malloc_r+0x74>
 80033fc:	684b      	ldr	r3, [r1, #4]
 80033fe:	428c      	cmp	r4, r1
 8003400:	d10d      	bne.n	800341e <_malloc_r+0x8e>
 8003402:	6013      	str	r3, [r2, #0]
 8003404:	0030      	movs	r0, r6
 8003406:	f000 f85a 	bl	80034be <__malloc_unlock>
 800340a:	0020      	movs	r0, r4
 800340c:	2207      	movs	r2, #7
 800340e:	300b      	adds	r0, #11
 8003410:	1d23      	adds	r3, r4, #4
 8003412:	4390      	bics	r0, r2
 8003414:	1ac3      	subs	r3, r0, r3
 8003416:	d0e7      	beq.n	80033e8 <_malloc_r+0x58>
 8003418:	425a      	negs	r2, r3
 800341a:	50e2      	str	r2, [r4, r3]
 800341c:	e7e4      	b.n	80033e8 <_malloc_r+0x58>
 800341e:	6063      	str	r3, [r4, #4]
 8003420:	000c      	movs	r4, r1
 8003422:	e7ef      	b.n	8003404 <_malloc_r+0x74>
 8003424:	000c      	movs	r4, r1
 8003426:	6849      	ldr	r1, [r1, #4]
 8003428:	e7c3      	b.n	80033b2 <_malloc_r+0x22>
 800342a:	2303      	movs	r3, #3
 800342c:	1cc4      	adds	r4, r0, #3
 800342e:	439c      	bics	r4, r3
 8003430:	42a0      	cmp	r0, r4
 8003432:	d0e1      	beq.n	80033f8 <_malloc_r+0x68>
 8003434:	1a21      	subs	r1, r4, r0
 8003436:	0030      	movs	r0, r6
 8003438:	f000 f82e 	bl	8003498 <_sbrk_r>
 800343c:	1c43      	adds	r3, r0, #1
 800343e:	d1db      	bne.n	80033f8 <_malloc_r+0x68>
 8003440:	e7c7      	b.n	80033d2 <_malloc_r+0x42>
 8003442:	46c0      	nop			; (mov r8, r8)
 8003444:	20000098 	.word	0x20000098
 8003448:	2000009c 	.word	0x2000009c

0800344c <_realloc_r>:
 800344c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800344e:	0007      	movs	r7, r0
 8003450:	000d      	movs	r5, r1
 8003452:	0016      	movs	r6, r2
 8003454:	2900      	cmp	r1, #0
 8003456:	d105      	bne.n	8003464 <_realloc_r+0x18>
 8003458:	0011      	movs	r1, r2
 800345a:	f7ff ff99 	bl	8003390 <_malloc_r>
 800345e:	0004      	movs	r4, r0
 8003460:	0020      	movs	r0, r4
 8003462:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003464:	2a00      	cmp	r2, #0
 8003466:	d103      	bne.n	8003470 <_realloc_r+0x24>
 8003468:	f7ff ff48 	bl	80032fc <_free_r>
 800346c:	0034      	movs	r4, r6
 800346e:	e7f7      	b.n	8003460 <_realloc_r+0x14>
 8003470:	f000 f826 	bl	80034c0 <_malloc_usable_size_r>
 8003474:	002c      	movs	r4, r5
 8003476:	42b0      	cmp	r0, r6
 8003478:	d2f2      	bcs.n	8003460 <_realloc_r+0x14>
 800347a:	0031      	movs	r1, r6
 800347c:	0038      	movs	r0, r7
 800347e:	f7ff ff87 	bl	8003390 <_malloc_r>
 8003482:	1e04      	subs	r4, r0, #0
 8003484:	d0ec      	beq.n	8003460 <_realloc_r+0x14>
 8003486:	0029      	movs	r1, r5
 8003488:	0032      	movs	r2, r6
 800348a:	f7ff ff1a 	bl	80032c2 <memcpy>
 800348e:	0029      	movs	r1, r5
 8003490:	0038      	movs	r0, r7
 8003492:	f7ff ff33 	bl	80032fc <_free_r>
 8003496:	e7e3      	b.n	8003460 <_realloc_r+0x14>

08003498 <_sbrk_r>:
 8003498:	2300      	movs	r3, #0
 800349a:	b570      	push	{r4, r5, r6, lr}
 800349c:	4c06      	ldr	r4, [pc, #24]	; (80034b8 <_sbrk_r+0x20>)
 800349e:	0005      	movs	r5, r0
 80034a0:	0008      	movs	r0, r1
 80034a2:	6023      	str	r3, [r4, #0]
 80034a4:	f7fd f9ec 	bl	8000880 <_sbrk>
 80034a8:	1c43      	adds	r3, r0, #1
 80034aa:	d103      	bne.n	80034b4 <_sbrk_r+0x1c>
 80034ac:	6823      	ldr	r3, [r4, #0]
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d000      	beq.n	80034b4 <_sbrk_r+0x1c>
 80034b2:	602b      	str	r3, [r5, #0]
 80034b4:	bd70      	pop	{r4, r5, r6, pc}
 80034b6:	46c0      	nop			; (mov r8, r8)
 80034b8:	20000238 	.word	0x20000238

080034bc <__malloc_lock>:
 80034bc:	4770      	bx	lr

080034be <__malloc_unlock>:
 80034be:	4770      	bx	lr

080034c0 <_malloc_usable_size_r>:
 80034c0:	1f0b      	subs	r3, r1, #4
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	1f18      	subs	r0, r3, #4
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	da01      	bge.n	80034ce <_malloc_usable_size_r+0xe>
 80034ca:	580b      	ldr	r3, [r1, r0]
 80034cc:	18c0      	adds	r0, r0, r3
 80034ce:	4770      	bx	lr

080034d0 <_init>:
 80034d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80034d2:	46c0      	nop			; (mov r8, r8)
 80034d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80034d6:	bc08      	pop	{r3}
 80034d8:	469e      	mov	lr, r3
 80034da:	4770      	bx	lr

080034dc <_fini>:
 80034dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80034de:	46c0      	nop			; (mov r8, r8)
 80034e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80034e2:	bc08      	pop	{r3}
 80034e4:	469e      	mov	lr, r3
 80034e6:	4770      	bx	lr
